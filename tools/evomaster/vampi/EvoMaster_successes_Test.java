import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-28T07:18:44.707638Z[Etc/UTC]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 4
 * <br>
 * Used time: 0h 10m 0s
 * <br>
 * Needed budget for current results: 31%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:5000";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/v1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'users'.size()", equalTo(3))
                .body("'users'[0].'email'", containsString("mail1@mail.com"))
                .body("'users'[0].'username'", containsString("name1"))
                .body("'users'[1].'email'", containsString("mail2@mail.com"))
                .body("'users'[1].'username'", containsString("name2"))
                .body("'users'[2].'email'", containsString("admin@mail.com"))
                .body("'users'[2].'username'", containsString("admin"));
        
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/v1/_debug")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'users'.size()", equalTo(3))
                .body("'users'[0].'admin'", equalTo(false))
                .body("'users'[0].'email'", containsString("mail1@mail.com"))
                .body("'users'[0].'password'", containsString("pass1"))
                .body("'users'[0].'username'", containsString("name1"))
                .body("'users'[1].'admin'", equalTo(false))
                .body("'users'[1].'email'", containsString("mail2@mail.com"))
                .body("'users'[1].'password'", containsString("pass2"))
                .body("'users'[1].'username'", containsString("name2"))
                .body("'users'[2].'admin'", equalTo(true))
                .body("'users'[2].'email'", containsString("admin@mail.com"))
                .body("'users'[2].'password'", containsString("pass1"))
                .body("'users'[2].'username'", containsString("admin"));
        
    }


}
