import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-28T07:18:44.661597Z[Etc/UTC]
 * <br>
 * The generated test suite contains 13 tests
 * <br>
 * Covered targets: 32
 * <br>
 * Used time: 0h 10m 0s
 * <br>
 * Needed budget for current results: 31%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:5000";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/createdb")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"FJ2TI2LVjRd\", " + 
                    " \"password\": \"9wZDS\", " + 
                    " \"email\": \"s2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/v1/register")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Successfully registered. Login to receive an auth token."))
                .body("'status'", containsString("success"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/books/v1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'Books'.size()", equalTo(3))
                .body("'Books'[0].'book_title'", containsString("bookTitle76"))
                .body("'Books'[0].'user'", containsString("name1"))
                .body("'Books'[1].'book_title'", containsString("bookTitle51"))
                .body("'Books'[1].'user'", containsString("name2"))
                .body("'Books'[2].'book_title'", containsString("bookTitle71"))
                .body("'Books'[2].'user'", containsString("admin"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"W4xN6AQmSkCofS7q\", " + 
                    " \"password\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/v1/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Username does not exist"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/createdb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Database populated."));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("VAmPI the Vulnerable API"))
                .body("'help'", containsString("VAmPI is a vulnerable on purpose API. It was created in order to evaluate the efficiency of third party tools in identifying vulnerabilities in APIs but it can also be used in learning/teaching purposes."))
                .body("'vulnerable'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"2x\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/v1/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("'username' is a required property"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"vn8Wz\" " + 
                    " } ")
                .put(baseUrlOfSut + "/users/v1/vn8Wz/email")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Invalid token"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/users/v1/tFJVsVzr4V1Zvf1/password")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Invalid token"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .delete(baseUrlOfSut + "/users/v1/J1E3QEh7")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Invalid token"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/books/v1/NVujTL7EeAvnf")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Invalid token"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"book_title\": \"T\", " + 
                    " \"secret\": \"KQDyIs4hwc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/books/v1")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("Invalid token"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/users/v1/uCVCZSo4a5MU5S")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", containsString("fail"))
                .body("'message'", containsString("User not found"));
        
        expectationHandler.expect(ems);
    }


}
