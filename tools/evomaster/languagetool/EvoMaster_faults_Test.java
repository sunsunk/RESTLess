import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-28T03:34:29.936891Z[Etc/UTC]
 * <br>
 * The generated test suite contains 11 tests
 * <br>
 * Covered targets: 26
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8010";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=lUl8JUw&username=AgaB8qb&apiKey=")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "limit=336&" + 
                    "username=Es57A_3zx&" + 
                    "apiKey=")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=UcrFLEumL&username=wWjswln&apiKey=&dict=")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("text=582m&language=69KD3g&username=&apiKey=4mb4rVGcr&enabledRules=3sLd919aR1JXtkA&disabledRules=bIPutaJ&enabledCategories=LREfTO9ACuwYa3t&disabledCategories=MERDueX&level=default")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("data=W9yHMAX&language=G6Xfx&dicts=poOaQwZjsgQHGOzA&motherTongue=691DlM3Ez&enabledCategories=cNucJ&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(55))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("English"))
                .body("[1].'code'", containsString("en"))
                .body("[1].'longCode'", containsString("en"))
                .body("[2].'name'", containsString("English (US)"))
                .body("[2].'code'", containsString("en"))
                .body("[2].'longCode'", containsString("en-US"))
                .body("[3].'name'", containsString("English (GB)"))
                .body("[3].'code'", containsString("en"))
                .body("[3].'longCode'", containsString("en-GB"))
                .body("[4].'name'", containsString("English (Australian)"))
                .body("[4].'code'", containsString("en"))
                .body("[4].'longCode'", containsString("en-AU"))
                .body("[5].'name'", containsString("English (Canadian)"))
                .body("[5].'code'", containsString("en"))
                .body("[5].'longCode'", containsString("en-CA"))
                .body("[6].'name'", containsString("English (New Zealand)"))
                .body("[6].'code'", containsString("en"))
                .body("[6].'longCode'", containsString("en-NZ"))
                .body("[7].'name'", containsString("English (South African)"))
                .body("[7].'code'", containsString("en"))
                .body("[7].'longCode'", containsString("en-ZA"))
                .body("[8].'name'", containsString("Persian"))
                .body("[8].'code'", containsString("fa"))
                .body("[8].'longCode'", containsString("fa"))
                .body("[9].'name'", containsString("French"))
                .body("[9].'code'", containsString("fr"))
                .body("[9].'longCode'", containsString("fr"))
                .body("[10].'name'", containsString("German"))
                .body("[10].'code'", containsString("de"))
                .body("[10].'longCode'", containsString("de"))
                .body("[11].'name'", containsString("German (Germany)"))
                .body("[11].'code'", containsString("de"))
                .body("[11].'longCode'", containsString("de-DE"))
                .body("[12].'name'", containsString("German (Austria)"))
                .body("[12].'code'", containsString("de"))
                .body("[12].'longCode'", containsString("de-AT"))
                .body("[13].'name'", containsString("German (Swiss)"))
                .body("[13].'code'", containsString("de"))
                .body("[13].'longCode'", containsString("de-CH"))
                .body("[14].'name'", containsString("Simple German"))
                .body("[14].'code'", containsString("de-DE-x-simple-language"))
                .body("[14].'longCode'", containsString("de-DE-x-simple-language"))
                .body("[15].'name'", containsString("Polish"))
                .body("[15].'code'", containsString("pl"))
                .body("[15].'longCode'", containsString("pl-PL"))
                .body("[16].'name'", containsString("Catalan"))
                .body("[16].'code'", containsString("ca"))
                .body("[16].'longCode'", containsString("ca-ES"))
                .body("[17].'name'", containsString("Catalan (Valencian)"))
                .body("[17].'code'", containsString("ca"))
                .body("[17].'longCode'", containsString("ca-ES-valencia"))
                .body("[18].'name'", containsString("Italian"))
                .body("[18].'code'", containsString("it"))
                .body("[18].'longCode'", containsString("it"))
                .body("[19].'name'", containsString("Breton"))
                .body("[19].'code'", containsString("br"))
                .body("[19].'longCode'", containsString("br-FR"))
                .body("[20].'name'", containsString("Dutch"))
                .body("[20].'code'", containsString("nl"))
                .body("[20].'longCode'", containsString("nl"))
                .body("[21].'name'", containsString("Dutch (Belgium)"))
                .body("[21].'code'", containsString("nl"))
                .body("[21].'longCode'", containsString("nl-BE"))
                .body("[22].'name'", containsString("Portuguese"))
                .body("[22].'code'", containsString("pt"))
                .body("[22].'longCode'", containsString("pt"))
                .body("[23].'name'", containsString("Portuguese (Portugal)"))
                .body("[23].'code'", containsString("pt"))
                .body("[23].'longCode'", containsString("pt-PT"))
                .body("[24].'name'", containsString("Portuguese (Brazil)"))
                .body("[24].'code'", containsString("pt"))
                .body("[24].'longCode'", containsString("pt-BR"))
                .body("[25].'name'", containsString("Portuguese (Angola preAO)"))
                .body("[25].'code'", containsString("pt"))
                .body("[25].'longCode'", containsString("pt-AO"))
                .body("[26].'name'", containsString("Portuguese (Moçambique preAO)"))
                .body("[26].'code'", containsString("pt"))
                .body("[26].'longCode'", containsString("pt-MZ"))
                .body("[27].'name'", containsString("Russian"))
                .body("[27].'code'", containsString("ru"))
                .body("[27].'longCode'", containsString("ru-RU"))
                .body("[28].'name'", containsString("Asturian"))
                .body("[28].'code'", containsString("ast"))
                .body("[28].'longCode'", containsString("ast-ES"))
                .body("[29].'name'", containsString("Belarusian"))
                .body("[29].'code'", containsString("be"))
                .body("[29].'longCode'", containsString("be-BY"))
                .body("[30].'name'", containsString("Chinese"))
                .body("[30].'code'", containsString("zh"))
                .body("[30].'longCode'", containsString("zh-CN"))
                .body("[31].'name'", containsString("Danish"))
                .body("[31].'code'", containsString("da"))
                .body("[31].'longCode'", containsString("da-DK"))
                .body("[32].'name'", containsString("Esperanto"))
                .body("[32].'code'", containsString("eo"))
                .body("[32].'longCode'", containsString("eo"))
                .body("[33].'name'", containsString("Irish"))
                .body("[33].'code'", containsString("ga"))
                .body("[33].'longCode'", containsString("ga-IE"))
                .body("[34].'name'", containsString("Galician"))
                .body("[34].'code'", containsString("gl"))
                .body("[34].'longCode'", containsString("gl-ES"))
                .body("[35].'name'", containsString("Greek"))
                .body("[35].'code'", containsString("el"))
                .body("[35].'longCode'", containsString("el-GR"))
                .body("[36].'name'", containsString("Japanese"))
                .body("[36].'code'", containsString("ja"))
                .body("[36].'longCode'", containsString("ja-JP"))
                .body("[37].'name'", containsString("Khmer"))
                .body("[37].'code'", containsString("km"))
                .body("[37].'longCode'", containsString("km-KH"))
                .body("[38].'name'", containsString("Romanian"))
                .body("[38].'code'", containsString("ro"))
                .body("[38].'longCode'", containsString("ro-RO"))
                .body("[39].'name'", containsString("Slovak"))
                .body("[39].'code'", containsString("sk"))
                .body("[39].'longCode'", containsString("sk-SK"))
                .body("[40].'name'", containsString("Slovenian"))
                .body("[40].'code'", containsString("sl"))
                .body("[40].'longCode'", containsString("sl-SI"))
                .body("[41].'name'", containsString("Spanish"))
                .body("[41].'code'", containsString("es"))
                .body("[41].'longCode'", containsString("es"))
                .body("[42].'name'", containsString("Spanish (voseo)"))
                .body("[42].'code'", containsString("es"))
                .body("[42].'longCode'", containsString("es-AR"))
                .body("[43].'name'", containsString("Swedish"))
                .body("[43].'code'", containsString("sv"))
                .body("[43].'longCode'", containsString("sv"))
                .body("[44].'name'", containsString("Tamil"))
                .body("[44].'code'", containsString("ta"))
                .body("[44].'longCode'", containsString("ta-IN"))
                .body("[45].'name'", containsString("Tagalog"))
                .body("[45].'code'", containsString("tl"))
                .body("[45].'longCode'", containsString("tl-PH"))
                .body("[46].'name'", containsString("Ukrainian"))
                .body("[46].'code'", containsString("uk"))
                .body("[46].'longCode'", containsString("uk-UA"))
                .body("[47].'name'", containsString("Dutch"))
                .body("[47].'code'", containsString("nl"))
                .body("[47].'longCode'", containsString("nl-NL"))
                .body("[48].'name'", containsString("Simple German"))
                .body("[48].'code'", containsString("de-DE-x-simple-language"))
                .body("[48].'longCode'", containsString("de-DE-x-simple-language-DE"))
                .body("[49].'name'", containsString("Spanish"))
                .body("[49].'code'", containsString("es"))
                .body("[49].'longCode'", containsString("es-ES"))
                .body("[50].'name'", containsString("Italian"))
                .body("[50].'code'", containsString("it"))
                .body("[50].'longCode'", containsString("it-IT"))
                .body("[51].'name'", containsString("Persian"))
                .body("[51].'code'", containsString("fa"))
                .body("[51].'longCode'", containsString("fa-IR"))
                .body("[52].'name'", containsString("Swedish"))
                .body("[52].'code'", containsString("sv"))
                .body("[52].'longCode'", containsString("sv-SE"))
                .body("[53].'name'", containsString("German"))
                .body("[53].'code'", containsString("de"))
                .body("[53].'longCode'", containsString("de-LU"))
                .body("[54].'name'", containsString("French"))
                .body("[54].'code'", containsString("fr"))
                .body("[54].'longCode'", containsString("fr-FR"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(55))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("English"))
                .body("[1].'code'", containsString("en"))
                .body("[1].'longCode'", containsString("en"))
                .body("[2].'name'", containsString("English (US)"))
                .body("[2].'code'", containsString("en"))
                .body("[2].'longCode'", containsString("en-US"))
                .body("[3].'name'", containsString("English (GB)"))
                .body("[3].'code'", containsString("en"))
                .body("[3].'longCode'", containsString("en-GB"))
                .body("[4].'name'", containsString("English (Australian)"))
                .body("[4].'code'", containsString("en"))
                .body("[4].'longCode'", containsString("en-AU"))
                .body("[5].'name'", containsString("English (Canadian)"))
                .body("[5].'code'", containsString("en"))
                .body("[5].'longCode'", containsString("en-CA"))
                .body("[6].'name'", containsString("English (New Zealand)"))
                .body("[6].'code'", containsString("en"))
                .body("[6].'longCode'", containsString("en-NZ"))
                .body("[7].'name'", containsString("English (South African)"))
                .body("[7].'code'", containsString("en"))
                .body("[7].'longCode'", containsString("en-ZA"))
                .body("[8].'name'", containsString("Persian"))
                .body("[8].'code'", containsString("fa"))
                .body("[8].'longCode'", containsString("fa"))
                .body("[9].'name'", containsString("French"))
                .body("[9].'code'", containsString("fr"))
                .body("[9].'longCode'", containsString("fr"))
                .body("[10].'name'", containsString("German"))
                .body("[10].'code'", containsString("de"))
                .body("[10].'longCode'", containsString("de"))
                .body("[11].'name'", containsString("German (Germany)"))
                .body("[11].'code'", containsString("de"))
                .body("[11].'longCode'", containsString("de-DE"))
                .body("[12].'name'", containsString("German (Austria)"))
                .body("[12].'code'", containsString("de"))
                .body("[12].'longCode'", containsString("de-AT"))
                .body("[13].'name'", containsString("German (Swiss)"))
                .body("[13].'code'", containsString("de"))
                .body("[13].'longCode'", containsString("de-CH"))
                .body("[14].'name'", containsString("Simple German"))
                .body("[14].'code'", containsString("de-DE-x-simple-language"))
                .body("[14].'longCode'", containsString("de-DE-x-simple-language"))
                .body("[15].'name'", containsString("Polish"))
                .body("[15].'code'", containsString("pl"))
                .body("[15].'longCode'", containsString("pl-PL"))
                .body("[16].'name'", containsString("Catalan"))
                .body("[16].'code'", containsString("ca"))
                .body("[16].'longCode'", containsString("ca-ES"))
                .body("[17].'name'", containsString("Catalan (Valencian)"))
                .body("[17].'code'", containsString("ca"))
                .body("[17].'longCode'", containsString("ca-ES-valencia"))
                .body("[18].'name'", containsString("Italian"))
                .body("[18].'code'", containsString("it"))
                .body("[18].'longCode'", containsString("it"))
                .body("[19].'name'", containsString("Breton"))
                .body("[19].'code'", containsString("br"))
                .body("[19].'longCode'", containsString("br-FR"))
                .body("[20].'name'", containsString("Dutch"))
                .body("[20].'code'", containsString("nl"))
                .body("[20].'longCode'", containsString("nl"))
                .body("[21].'name'", containsString("Dutch (Belgium)"))
                .body("[21].'code'", containsString("nl"))
                .body("[21].'longCode'", containsString("nl-BE"))
                .body("[22].'name'", containsString("Portuguese"))
                .body("[22].'code'", containsString("pt"))
                .body("[22].'longCode'", containsString("pt"))
                .body("[23].'name'", containsString("Portuguese (Portugal)"))
                .body("[23].'code'", containsString("pt"))
                .body("[23].'longCode'", containsString("pt-PT"))
                .body("[24].'name'", containsString("Portuguese (Brazil)"))
                .body("[24].'code'", containsString("pt"))
                .body("[24].'longCode'", containsString("pt-BR"))
                .body("[25].'name'", containsString("Portuguese (Angola preAO)"))
                .body("[25].'code'", containsString("pt"))
                .body("[25].'longCode'", containsString("pt-AO"))
                .body("[26].'name'", containsString("Portuguese (Moçambique preAO)"))
                .body("[26].'code'", containsString("pt"))
                .body("[26].'longCode'", containsString("pt-MZ"))
                .body("[27].'name'", containsString("Russian"))
                .body("[27].'code'", containsString("ru"))
                .body("[27].'longCode'", containsString("ru-RU"))
                .body("[28].'name'", containsString("Asturian"))
                .body("[28].'code'", containsString("ast"))
                .body("[28].'longCode'", containsString("ast-ES"))
                .body("[29].'name'", containsString("Belarusian"))
                .body("[29].'code'", containsString("be"))
                .body("[29].'longCode'", containsString("be-BY"))
                .body("[30].'name'", containsString("Chinese"))
                .body("[30].'code'", containsString("zh"))
                .body("[30].'longCode'", containsString("zh-CN"))
                .body("[31].'name'", containsString("Danish"))
                .body("[31].'code'", containsString("da"))
                .body("[31].'longCode'", containsString("da-DK"))
                .body("[32].'name'", containsString("Esperanto"))
                .body("[32].'code'", containsString("eo"))
                .body("[32].'longCode'", containsString("eo"))
                .body("[33].'name'", containsString("Irish"))
                .body("[33].'code'", containsString("ga"))
                .body("[33].'longCode'", containsString("ga-IE"))
                .body("[34].'name'", containsString("Galician"))
                .body("[34].'code'", containsString("gl"))
                .body("[34].'longCode'", containsString("gl-ES"))
                .body("[35].'name'", containsString("Greek"))
                .body("[35].'code'", containsString("el"))
                .body("[35].'longCode'", containsString("el-GR"))
                .body("[36].'name'", containsString("Japanese"))
                .body("[36].'code'", containsString("ja"))
                .body("[36].'longCode'", containsString("ja-JP"))
                .body("[37].'name'", containsString("Khmer"))
                .body("[37].'code'", containsString("km"))
                .body("[37].'longCode'", containsString("km-KH"))
                .body("[38].'name'", containsString("Romanian"))
                .body("[38].'code'", containsString("ro"))
                .body("[38].'longCode'", containsString("ro-RO"))
                .body("[39].'name'", containsString("Slovak"))
                .body("[39].'code'", containsString("sk"))
                .body("[39].'longCode'", containsString("sk-SK"))
                .body("[40].'name'", containsString("Slovenian"))
                .body("[40].'code'", containsString("sl"))
                .body("[40].'longCode'", containsString("sl-SI"))
                .body("[41].'name'", containsString("Spanish"))
                .body("[41].'code'", containsString("es"))
                .body("[41].'longCode'", containsString("es"))
                .body("[42].'name'", containsString("Spanish (voseo)"))
                .body("[42].'code'", containsString("es"))
                .body("[42].'longCode'", containsString("es-AR"))
                .body("[43].'name'", containsString("Swedish"))
                .body("[43].'code'", containsString("sv"))
                .body("[43].'longCode'", containsString("sv"))
                .body("[44].'name'", containsString("Tamil"))
                .body("[44].'code'", containsString("ta"))
                .body("[44].'longCode'", containsString("ta-IN"))
                .body("[45].'name'", containsString("Tagalog"))
                .body("[45].'code'", containsString("tl"))
                .body("[45].'longCode'", containsString("tl-PH"))
                .body("[46].'name'", containsString("Ukrainian"))
                .body("[46].'code'", containsString("uk"))
                .body("[46].'longCode'", containsString("uk-UA"))
                .body("[47].'name'", containsString("Dutch"))
                .body("[47].'code'", containsString("nl"))
                .body("[47].'longCode'", containsString("nl-NL"))
                .body("[48].'name'", containsString("Simple German"))
                .body("[48].'code'", containsString("de-DE-x-simple-language"))
                .body("[48].'longCode'", containsString("de-DE-x-simple-language-DE"))
                .body("[49].'name'", containsString("Spanish"))
                .body("[49].'code'", containsString("es"))
                .body("[49].'longCode'", containsString("es-ES"))
                .body("[50].'name'", containsString("Italian"))
                .body("[50].'code'", containsString("it"))
                .body("[50].'longCode'", containsString("it-IT"))
                .body("[51].'name'", containsString("Persian"))
                .body("[51].'code'", containsString("fa"))
                .body("[51].'longCode'", containsString("fa-IR"))
                .body("[52].'name'", containsString("Swedish"))
                .body("[52].'code'", containsString("sv"))
                .body("[52].'longCode'", containsString("sv-SE"))
                .body("[53].'name'", containsString("German"))
                .body("[53].'code'", containsString("de"))
                .body("[53].'longCode'", containsString("de-LU"))
                .body("[54].'name'", containsString("French"))
                .body("[54].'code'", containsString("fr"))
                .body("[54].'longCode'", containsString("fr-FR"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "offset=162&" + 
                    "username=Br&" + 
                    "apiKey=&" + 
                    "dicts=Yobw")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=hczr&username=jb4TewPQvx&apiKey=ZakZZL0gRwwc")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "offset=594&" + 
                    "limit=921&" + 
                    "username=61JvKCXK9rRbtgr&" + 
                    "apiKey=NdOTzI1uIFcNBbP&" + 
                    "dicts=PtKGEX9mcqxYdzwF")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("text=PVALg88rcWzE0Vl&language=jA&enabledRules=5O4Das5Lb&enabledCategories=Z8yvYEv8lmQ&disabledCategories=YB&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("6.0"))
                .body("'software'.'buildDate'", containsString("2023-03-15 23:18:36 +0000"))
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Japanese"))
                .body("'language'.'code'", containsString("ja-JP"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.76061726))
                .body("'language'.'detectedLanguage'.'source'", containsString(""))
                .body("'matches'.size()", equalTo(0))
                .body("'sentenceRanges'.size()", equalTo(1))
                .body("'sentenceRanges'[0].size()", equalTo(2))
                .body("'sentenceRanges'[0][0]", numberMatches(0.0))
                .body("'sentenceRanges'[0][1]", numberMatches(15.0));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=RwtmX58WGv2Hd&username=IW6IfFRQcuIV6wS&apiKey=PHURE")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_7.extract().statusCode()));
    }
    
    
    @Test
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(55))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("English"))
                .body("[1].'code'", containsString("en"))
                .body("[1].'longCode'", containsString("en"))
                .body("[2].'name'", containsString("English (US)"))
                .body("[2].'code'", containsString("en"))
                .body("[2].'longCode'", containsString("en-US"))
                .body("[3].'name'", containsString("English (GB)"))
                .body("[3].'code'", containsString("en"))
                .body("[3].'longCode'", containsString("en-GB"))
                .body("[4].'name'", containsString("English (Australian)"))
                .body("[4].'code'", containsString("en"))
                .body("[4].'longCode'", containsString("en-AU"))
                .body("[5].'name'", containsString("English (Canadian)"))
                .body("[5].'code'", containsString("en"))
                .body("[5].'longCode'", containsString("en-CA"))
                .body("[6].'name'", containsString("English (New Zealand)"))
                .body("[6].'code'", containsString("en"))
                .body("[6].'longCode'", containsString("en-NZ"))
                .body("[7].'name'", containsString("English (South African)"))
                .body("[7].'code'", containsString("en"))
                .body("[7].'longCode'", containsString("en-ZA"))
                .body("[8].'name'", containsString("Persian"))
                .body("[8].'code'", containsString("fa"))
                .body("[8].'longCode'", containsString("fa"))
                .body("[9].'name'", containsString("French"))
                .body("[9].'code'", containsString("fr"))
                .body("[9].'longCode'", containsString("fr"))
                .body("[10].'name'", containsString("German"))
                .body("[10].'code'", containsString("de"))
                .body("[10].'longCode'", containsString("de"))
                .body("[11].'name'", containsString("German (Germany)"))
                .body("[11].'code'", containsString("de"))
                .body("[11].'longCode'", containsString("de-DE"))
                .body("[12].'name'", containsString("German (Austria)"))
                .body("[12].'code'", containsString("de"))
                .body("[12].'longCode'", containsString("de-AT"))
                .body("[13].'name'", containsString("German (Swiss)"))
                .body("[13].'code'", containsString("de"))
                .body("[13].'longCode'", containsString("de-CH"))
                .body("[14].'name'", containsString("Simple German"))
                .body("[14].'code'", containsString("de-DE-x-simple-language"))
                .body("[14].'longCode'", containsString("de-DE-x-simple-language"))
                .body("[15].'name'", containsString("Polish"))
                .body("[15].'code'", containsString("pl"))
                .body("[15].'longCode'", containsString("pl-PL"))
                .body("[16].'name'", containsString("Catalan"))
                .body("[16].'code'", containsString("ca"))
                .body("[16].'longCode'", containsString("ca-ES"))
                .body("[17].'name'", containsString("Catalan (Valencian)"))
                .body("[17].'code'", containsString("ca"))
                .body("[17].'longCode'", containsString("ca-ES-valencia"))
                .body("[18].'name'", containsString("Italian"))
                .body("[18].'code'", containsString("it"))
                .body("[18].'longCode'", containsString("it"))
                .body("[19].'name'", containsString("Breton"))
                .body("[19].'code'", containsString("br"))
                .body("[19].'longCode'", containsString("br-FR"))
                .body("[20].'name'", containsString("Dutch"))
                .body("[20].'code'", containsString("nl"))
                .body("[20].'longCode'", containsString("nl"))
                .body("[21].'name'", containsString("Dutch (Belgium)"))
                .body("[21].'code'", containsString("nl"))
                .body("[21].'longCode'", containsString("nl-BE"))
                .body("[22].'name'", containsString("Portuguese"))
                .body("[22].'code'", containsString("pt"))
                .body("[22].'longCode'", containsString("pt"))
                .body("[23].'name'", containsString("Portuguese (Portugal)"))
                .body("[23].'code'", containsString("pt"))
                .body("[23].'longCode'", containsString("pt-PT"))
                .body("[24].'name'", containsString("Portuguese (Brazil)"))
                .body("[24].'code'", containsString("pt"))
                .body("[24].'longCode'", containsString("pt-BR"))
                .body("[25].'name'", containsString("Portuguese (Angola preAO)"))
                .body("[25].'code'", containsString("pt"))
                .body("[25].'longCode'", containsString("pt-AO"))
                .body("[26].'name'", containsString("Portuguese (Moçambique preAO)"))
                .body("[26].'code'", containsString("pt"))
                .body("[26].'longCode'", containsString("pt-MZ"))
                .body("[27].'name'", containsString("Russian"))
                .body("[27].'code'", containsString("ru"))
                .body("[27].'longCode'", containsString("ru-RU"))
                .body("[28].'name'", containsString("Asturian"))
                .body("[28].'code'", containsString("ast"))
                .body("[28].'longCode'", containsString("ast-ES"))
                .body("[29].'name'", containsString("Belarusian"))
                .body("[29].'code'", containsString("be"))
                .body("[29].'longCode'", containsString("be-BY"))
                .body("[30].'name'", containsString("Chinese"))
                .body("[30].'code'", containsString("zh"))
                .body("[30].'longCode'", containsString("zh-CN"))
                .body("[31].'name'", containsString("Danish"))
                .body("[31].'code'", containsString("da"))
                .body("[31].'longCode'", containsString("da-DK"))
                .body("[32].'name'", containsString("Esperanto"))
                .body("[32].'code'", containsString("eo"))
                .body("[32].'longCode'", containsString("eo"))
                .body("[33].'name'", containsString("Irish"))
                .body("[33].'code'", containsString("ga"))
                .body("[33].'longCode'", containsString("ga-IE"))
                .body("[34].'name'", containsString("Galician"))
                .body("[34].'code'", containsString("gl"))
                .body("[34].'longCode'", containsString("gl-ES"))
                .body("[35].'name'", containsString("Greek"))
                .body("[35].'code'", containsString("el"))
                .body("[35].'longCode'", containsString("el-GR"))
                .body("[36].'name'", containsString("Japanese"))
                .body("[36].'code'", containsString("ja"))
                .body("[36].'longCode'", containsString("ja-JP"))
                .body("[37].'name'", containsString("Khmer"))
                .body("[37].'code'", containsString("km"))
                .body("[37].'longCode'", containsString("km-KH"))
                .body("[38].'name'", containsString("Romanian"))
                .body("[38].'code'", containsString("ro"))
                .body("[38].'longCode'", containsString("ro-RO"))
                .body("[39].'name'", containsString("Slovak"))
                .body("[39].'code'", containsString("sk"))
                .body("[39].'longCode'", containsString("sk-SK"))
                .body("[40].'name'", containsString("Slovenian"))
                .body("[40].'code'", containsString("sl"))
                .body("[40].'longCode'", containsString("sl-SI"))
                .body("[41].'name'", containsString("Spanish"))
                .body("[41].'code'", containsString("es"))
                .body("[41].'longCode'", containsString("es"))
                .body("[42].'name'", containsString("Spanish (voseo)"))
                .body("[42].'code'", containsString("es"))
                .body("[42].'longCode'", containsString("es-AR"))
                .body("[43].'name'", containsString("Swedish"))
                .body("[43].'code'", containsString("sv"))
                .body("[43].'longCode'", containsString("sv"))
                .body("[44].'name'", containsString("Tamil"))
                .body("[44].'code'", containsString("ta"))
                .body("[44].'longCode'", containsString("ta-IN"))
                .body("[45].'name'", containsString("Tagalog"))
                .body("[45].'code'", containsString("tl"))
                .body("[45].'longCode'", containsString("tl-PH"))
                .body("[46].'name'", containsString("Ukrainian"))
                .body("[46].'code'", containsString("uk"))
                .body("[46].'longCode'", containsString("uk-UA"))
                .body("[47].'name'", containsString("Dutch"))
                .body("[47].'code'", containsString("nl"))
                .body("[47].'longCode'", containsString("nl-NL"))
                .body("[48].'name'", containsString("Simple German"))
                .body("[48].'code'", containsString("de-DE-x-simple-language"))
                .body("[48].'longCode'", containsString("de-DE-x-simple-language-DE"))
                .body("[49].'name'", containsString("Spanish"))
                .body("[49].'code'", containsString("es"))
                .body("[49].'longCode'", containsString("es-ES"))
                .body("[50].'name'", containsString("Italian"))
                .body("[50].'code'", containsString("it"))
                .body("[50].'longCode'", containsString("it-IT"))
                .body("[51].'name'", containsString("Persian"))
                .body("[51].'code'", containsString("fa"))
                .body("[51].'longCode'", containsString("fa-IR"))
                .body("[52].'name'", containsString("Swedish"))
                .body("[52].'code'", containsString("sv"))
                .body("[52].'longCode'", containsString("sv-SE"))
                .body("[53].'name'", containsString("German"))
                .body("[53].'code'", containsString("de"))
                .body("[53].'longCode'", containsString("de-LU"))
                .body("[54].'name'", containsString("French"))
                .body("[54].'code'", containsString("fr"))
                .body("[54].'longCode'", containsString("fr-FR"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("text=vBBrsRZiNOf_s&language=ob0&motherTongue=br_6OnCcL2ZVp&level=default")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=qlWyGKYJeEEUrJF8&username=tK5cfAi6kI&apiKey=1H")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("word=kiVk1&username=9lWwvAM1e55hv&apiKey=JO9pfX1NN45")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "offset=669&" + 
                    "username=1q&" + 
                    "apiKey=aCF46Q1")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("text=BSplYw&language=292F18CrHQD&username=lwQ0WtYHPXh4F0sb&apiKey=CcOjPnhBw5rREu9&dicts=Q6qZcyUtajrWa3U&motherTongue=nlgpIwY0&enabledRules=gH9QB0M7&disabledRules=&disabledCategories=kUahOrrHeXkMoiJw&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(403)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


}
