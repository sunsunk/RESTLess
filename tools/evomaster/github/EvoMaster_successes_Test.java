import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-06T11:52:56.099072Z[Etc/UTC]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 5
 * <br>
 * Used time: 0h 10m 1s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "https://api.github.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", nullValue())
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", nullValue())
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(4.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-03-09T12:33:33Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/repositories?" + 
                    "q=L_fgZHsz&" + 
                    "order=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }


}
