import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-06T11:52:58.887650Z[Etc/UTC]
 * <br>
 * The generated test suite contains 314 tests
 * <br>
 * Covered targets: 1226
 * <br>
 * Used time: 0h 10m 4s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * 
 */
public class EvoMaster_Test {

    
    private static String baseUrlOfSut = "https://api.github.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", nullValue())
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", nullValue())
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(4.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-03-09T12:33:33Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/repositories?" + 
                    "q=L_fgZHsz&" + 
                    "order=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/repos/Ros9WVX/oU21gR0FnSLLt/issues/W1CjJ/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#set-labels-for-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/emojis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'+1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8"))
                .body("'-1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8"))
                .body("'100'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8"))
                .body("'1234'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8"))
                .body("'1st_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f947.png?v8"))
                .body("'2nd_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f948.png?v8"))
                .body("'3rd_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f949.png?v8"))
                .body("'8ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8"))
                .body("'a'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8"))
                .body("'ab'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8"))
                .body("'abacus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ee.png?v8"))
                .body("'abc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8"))
                .body("'abcd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8"))
                .body("'accept'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8"))
                .body("'accessibility'", containsString("https://github.githubassets.com/images/icons/emoji/accessibility.png?v8"))
                .body("'accordion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa97.png?v8"))
                .body("'adhesive_bandage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa79.png?v8"))
                .body("'adult'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1.png?v8"))
                .body("'aerial_tramway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8"))
                .body("'afghanistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1eb.png?v8"))
                .body("'airplane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8"))
                .body("'aland_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fd.png?v8"))
                .body("'alarm_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8"))
                .body("'albania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f1.png?v8"))
                .body("'alembic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2697.png?v8"))
                .body("'algeria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ff.png?v8"))
                .body("'alien'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8"))
                .body("'ambulance'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8"))
                .body("'american_samoa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f8.png?v8"))
                .body("'amphora'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3fa.png?v8"))
                .body("'anatomical_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac0.png?v8"))
                .body("'anchor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8"))
                .body("'andorra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1e9.png?v8"))
                .body("'angel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8"))
                .body("'anger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8"))
                .body("'angola'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f4.png?v8"))
                .body("'angry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8"))
                .body("'anguilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ee.png?v8"))
                .body("'anguished'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8"))
                .body("'ant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8"))
                .body("'antarctica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f6.png?v8"))
                .body("'antigua_barbuda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ec.png?v8"))
                .body("'apple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8"))
                .body("'aquarius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8"))
                .body("'argentina'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f7.png?v8"))
                .body("'aries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8"))
                .body("'armenia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f2.png?v8"))
                .body("'arrow_backward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8"))
                .body("'arrow_double_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8"))
                .body("'arrow_double_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8"))
                .body("'arrow_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8"))
                .body("'arrow_down_small'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8"))
                .body("'arrow_forward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8"))
                .body("'arrow_heading_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8"))
                .body("'arrow_heading_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8"))
                .body("'arrow_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8"))
                .body("'arrow_lower_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8"))
                .body("'arrow_lower_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8"))
                .body("'arrow_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8"))
                .body("'arrow_right_hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8"))
                .body("'arrow_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8"))
                .body("'arrow_up_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8"))
                .body("'arrow_up_small'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8"))
                .body("'arrow_upper_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8"))
                .body("'arrow_upper_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8"))
                .body("'arrows_clockwise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8"))
                .body("'arrows_counterclockwise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8"))
                .body("'art'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8"))
                .body("'articulated_lorry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8"))
                .body("'artificial_satellite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8"))
                .body("'artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3a8.png?v8"))
                .body("'aruba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fc.png?v8"))
                .body("'ascension_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1e8.png?v8"))
                .body("'asterisk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/002a-20e3.png?v8"))
                .body("'astonished'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8"))
                .body("'astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f680.png?v8"))
                .body("'athletic_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45f.png?v8"))
                .body("'atm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8"))
                .body("'atom'", containsString("https://github.githubassets.com/images/icons/emoji/atom.png?v8"))
                .body("'atom_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/269b.png?v8"))
                .body("'australia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fa.png?v8"))
                .body("'austria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f9.png?v8"))
                .body("'auto_rickshaw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fa.png?v8"))
                .body("'avocado'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f951.png?v8"))
                .body("'axe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa93.png?v8"))
                .body("'azerbaijan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ff.png?v8"))
                .body("'b'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8"))
                .body("'baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8"))
                .body("'baby_bottle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8"))
                .body("'baby_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8"))
                .body("'baby_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8"))
                .body("'back'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f519.png?v8"))
                .body("'bacon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f953.png?v8"))
                .body("'badger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a1.png?v8"))
                .body("'badminton'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f8.png?v8"))
                .body("'bagel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96f.png?v8"))
                .body("'baggage_claim'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8"))
                .body("'baguette_bread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f956.png?v8"))
                .body("'bahamas'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f8.png?v8"))
                .body("'bahrain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ed.png?v8"))
                .body("'balance_scale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2696.png?v8"))
                .body("'bald_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b2.png?v8"))
                .body("'bald_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b2.png?v8"))
                .body("'ballet_shoes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa70.png?v8"))
                .body("'balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8"))
                .body("'ballot_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5f3.png?v8"))
                .body("'ballot_box_with_check'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8"))
                .body("'bamboo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8"))
                .body("'banana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8"))
                .body("'bangbang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8"))
                .body("'bangladesh'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e9.png?v8"))
                .body("'banjo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa95.png?v8"))
                .body("'bank'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8"))
                .body("'bar_chart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8"))
                .body("'barbados'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e7.png?v8"))
                .body("'barber'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8"))
                .body("'baseball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8"))
                .body("'basecamp'", containsString("https://github.githubassets.com/images/icons/emoji/basecamp.png?v8"))
                .body("'basecampy'", containsString("https://github.githubassets.com/images/icons/emoji/basecampy.png?v8"))
                .body("'basket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fa.png?v8"))
                .body("'basketball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8"))
                .body("'basketball_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2642.png?v8"))
                .body("'basketball_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2640.png?v8"))
                .body("'bat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f987.png?v8"))
                .body("'bath'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8"))
                .body("'bathtub'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8"))
                .body("'battery'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8"))
                .body("'beach_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d6.png?v8"))
                .body("'bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8"))
                .body("'bearded_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4.png?v8"))
                .body("'beaver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ab.png?v8"))
                .body("'bed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cf.png?v8"))
                .body("'bee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8"))
                .body("'beer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8"))
                .body("'beers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8"))
                .body("'beetle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab2.png?v8"))
                .body("'beginner'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8"))
                .body("'belarus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fe.png?v8"))
                .body("'belgium'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ea.png?v8"))
                .body("'belize'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ff.png?v8"))
                .body("'bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8"))
                .body("'bell_pepper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad1.png?v8"))
                .body("'bellhop_bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ce.png?v8"))
                .body("'benin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ef.png?v8"))
                .body("'bento'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8"))
                .body("'bermuda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f2.png?v8"))
                .body("'beverage_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c3.png?v8"))
                .body("'bhutan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f9.png?v8"))
                .body("'bicyclist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8"))
                .body("'bike'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8"))
                .body("'biking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4-2642.png?v8"))
                .body("'biking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4-2640.png?v8"))
                .body("'bikini'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8"))
                .body("'billed_cap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e2.png?v8"))
                .body("'biohazard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2623.png?v8"))
                .body("'bird'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8"))
                .body("'birthday'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8"))
                .body("'bison'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ac.png?v8"))
                .body("'black_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f408-2b1b.png?v8"))
                .body("'black_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8"))
                .body("'black_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4.png?v8"))
                .body("'black_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a4.png?v8"))
                .body("'black_joker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8"))
                .body("'black_large_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b1b.png?v8"))
                .body("'black_medium_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fe.png?v8"))
                .body("'black_medium_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fc.png?v8"))
                .body("'black_nib'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8"))
                .body("'black_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25aa.png?v8"))
                .body("'black_square_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8"))
                .body("'blond_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2642.png?v8"))
                .body("'blond_haired_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471.png?v8"))
                .body("'blond_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2640.png?v8"))
                .body("'blonde_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2640.png?v8"))
                .body("'blossom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8"))
                .body("'blowfish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8"))
                .body("'blue_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8"))
                .body("'blue_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8"))
                .body("'blue_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8"))
                .body("'blue_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e6.png?v8"))
                .body("'blueberries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad0.png?v8"))
                .body("'blush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8"))
                .body("'boar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8"))
                .body("'boat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8"))
                .body("'bolivia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f4.png?v8"))
                .body("'bomb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8"))
                .body("'bone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b4.png?v8"))
                .body("'book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8"))
                .body("'bookmark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8"))
                .body("'bookmark_tabs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8"))
                .body("'books'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8"))
                .body("'boom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8"))
                .body("'boomerang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa83.png?v8"))
                .body("'boot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8"))
                .body("'bosnia_herzegovina'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e6.png?v8"))
                .body("'botswana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fc.png?v8"))
                .body("'bouncing_ball_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2642.png?v8"))
                .body("'bouncing_ball_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9.png?v8"))
                .body("'bouncing_ball_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2640.png?v8"))
                .body("'bouquet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8"))
                .body("'bouvet_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fb.png?v8"))
                .body("'bow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8"))
                .body("'bow_and_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f9.png?v8"))
                .body("'bowing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647-2642.png?v8"))
                .body("'bowing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647-2640.png?v8"))
                .body("'bowl_with_spoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f963.png?v8"))
                .body("'bowling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8"))
                .body("'bowtie'", containsString("https://github.githubassets.com/images/icons/emoji/bowtie.png?v8"))
                .body("'boxing_glove'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94a.png?v8"))
                .body("'boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8"))
                .body("'brain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e0.png?v8"))
                .body("'brazil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f7.png?v8"))
                .body("'bread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8"))
                .body("'breast_feeding'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f931.png?v8"))
                .body("'bricks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f1.png?v8"))
                .body("'bride_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2640.png?v8"))
                .body("'bridge_at_night'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8"))
                .body("'briefcase'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8"))
                .body("'british_indian_ocean_territory'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f4.png?v8"))
                .body("'british_virgin_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ec.png?v8"))
                .body("'broccoli'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f966.png?v8"))
                .body("'broken_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8"))
                .body("'broom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f9.png?v8"))
                .body("'brown_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e4.png?v8"))
                .body("'brown_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90e.png?v8"))
                .body("'brown_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7eb.png?v8"))
                .body("'brunei'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f3.png?v8"))
                .body("'bubble_tea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cb.png?v8"))
                .body("'bucket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa3.png?v8"))
                .body("'bug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8"))
                .body("'building_construction'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d7.png?v8"))
                .body("'bulb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8"))
                .body("'bulgaria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ec.png?v8"))
                .body("'bullettrain_front'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8"))
                .body("'bullettrain_side'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8"))
                .body("'burkina_faso'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1eb.png?v8"))
                .body("'burrito'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32f.png?v8"))
                .body("'burundi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ee.png?v8"))
                .body("'bus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8"))
                .body("'business_suit_levitating'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f574.png?v8"))
                .body("'busstop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8"))
                .body("'bust_in_silhouette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8"))
                .body("'busts_in_silhouette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8"))
                .body("'butter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c8.png?v8"))
                .body("'butterfly'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98b.png?v8"))
                .body("'cactus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8"))
                .body("'cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8"))
                .body("'calendar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8"))
                .body("'call_me_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f919.png?v8"))
                .body("'calling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8"))
                .body("'cambodia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ed.png?v8"))
                .body("'camel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8"))
                .body("'camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8"))
                .body("'camera_flash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f8.png?v8"))
                .body("'cameroon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f2.png?v8"))
                .body("'camping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d5.png?v8"))
                .body("'canada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e6.png?v8"))
                .body("'canary_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1e8.png?v8"))
                .body("'cancer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8"))
                .body("'candle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f56f.png?v8"))
                .body("'candy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8"))
                .body("'canned_food'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96b.png?v8"))
                .body("'canoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f6.png?v8"))
                .body("'cape_verde'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fb.png?v8"))
                .body("'capital_abcd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8"))
                .body("'capricorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8"))
                .body("'car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8"))
                .body("'card_file_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c3.png?v8"))
                .body("'card_index'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8"))
                .body("'card_index_dividers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c2.png?v8"))
                .body("'caribbean_netherlands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f6.png?v8"))
                .body("'carousel_horse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8"))
                .body("'carpentry_saw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9a.png?v8"))
                .body("'carrot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f955.png?v8"))
                .body("'cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938.png?v8"))
                .body("'cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8"))
                .body("'cat2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8"))
                .body("'cayman_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1fe.png?v8"))
                .body("'cd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8"))
                .body("'central_african_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1eb.png?v8"))
                .body("'ceuta_melilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1e6.png?v8"))
                .body("'chad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e9.png?v8"))
                .body("'chains'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d3.png?v8"))
                .body("'chair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa91.png?v8"))
                .body("'champagne'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37e.png?v8"))
                .body("'chart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8"))
                .body("'chart_with_downwards_trend'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8"))
                .body("'chart_with_upwards_trend'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8"))
                .body("'checkered_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8"))
                .body("'cheese'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c0.png?v8"))
                .body("'cherries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8"))
                .body("'cherry_blossom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8"))
                .body("'chess_pawn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/265f.png?v8"))
                .body("'chestnut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8"))
                .body("'chicken'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8"))
                .body("'child'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d2.png?v8"))
                .body("'children_crossing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8"))
                .body("'chile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f1.png?v8"))
                .body("'chipmunk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png?v8"))
                .body("'chocolate_bar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8"))
                .body("'chopsticks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f962.png?v8"))
                .body("'christmas_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fd.png?v8"))
                .body("'christmas_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8"))
                .body("'church'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8"))
                .body("'cinema'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8"))
                .body("'circus_tent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8"))
                .body("'city_sunrise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8"))
                .body("'city_sunset'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8"))
                .body("'cityscape'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d9.png?v8"))
                .body("'cl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8"))
                .body("'clamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5dc.png?v8"))
                .body("'clap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8"))
                .body("'clapper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8"))
                .body("'classical_building'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3db.png?v8"))
                .body("'climbing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7.png?v8"))
                .body("'climbing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7-2642.png?v8"))
                .body("'climbing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7-2640.png?v8"))
                .body("'clinking_glasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f942.png?v8"))
                .body("'clipboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8"))
                .body("'clipperton_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f5.png?v8"))
                .body("'clock1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8"))
                .body("'clock10'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8"))
                .body("'clock1030'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8"))
                .body("'clock11'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8"))
                .body("'clock1130'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8"))
                .body("'clock12'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8"))
                .body("'clock1230'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8"))
                .body("'clock130'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8"))
                .body("'clock2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8"))
                .body("'clock230'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8"))
                .body("'clock3'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8"))
                .body("'clock330'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8"))
                .body("'clock4'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8"))
                .body("'clock430'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8"))
                .body("'clock5'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8"))
                .body("'clock530'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8"))
                .body("'clock6'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8"))
                .body("'clock630'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8"))
                .body("'clock7'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8"))
                .body("'clock730'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8"))
                .body("'clock8'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8"))
                .body("'clock830'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8"))
                .body("'clock9'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8"))
                .body("'clock930'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8"))
                .body("'closed_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8"))
                .body("'closed_lock_with_key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8"))
                .body("'closed_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8"))
                .body("'cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8"))
                .body("'cloud_with_lightning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f329.png?v8"))
                .body("'cloud_with_lightning_and_rain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c8.png?v8"))
                .body("'cloud_with_rain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f327.png?v8"))
                .body("'cloud_with_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f328.png?v8"))
                .body("'clown_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f921.png?v8"))
                .body("'clubs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8"))
                .body("'cn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8"))
                .body("'coat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e5.png?v8"))
                .body("'cockroach'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab3.png?v8"))
                .body("'cocktail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8"))
                .body("'coconut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f965.png?v8"))
                .body("'cocos_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e8.png?v8"))
                .body("'coffee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8"))
                .body("'coffin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26b0.png?v8"))
                .body("'coin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa99.png?v8"))
                .body("'cold_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f976.png?v8"))
                .body("'cold_sweat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8"))
                .body("'collision'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8"))
                .body("'colombia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f4.png?v8"))
                .body("'comet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2604.png?v8"))
                .body("'comoros'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f2.png?v8"))
                .body("'compass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ed.png?v8"))
                .body("'computer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8"))
                .body("'computer_mouse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5b1.png?v8"))
                .body("'confetti_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8"))
                .body("'confounded'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8"))
                .body("'confused'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8"))
                .body("'congo_brazzaville'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ec.png?v8"))
                .body("'congo_kinshasa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e9.png?v8"))
                .body("'congratulations'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8"))
                .body("'construction'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8"))
                .body("'construction_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8"))
                .body("'construction_worker_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477-2642.png?v8"))
                .body("'construction_worker_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477-2640.png?v8"))
                .body("'control_knobs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39b.png?v8"))
                .body("'convenience_store'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8"))
                .body("'cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f373.png?v8"))
                .body("'cook_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f0.png?v8"))
                .body("'cookie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8"))
                .body("'cool'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8"))
                .body("'cop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8"))
                .body("'copyright'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8"))
                .body("'corn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8"))
                .body("'costa_rica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f7.png?v8"))
                .body("'cote_divoire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ee.png?v8"))
                .body("'couch_and_lamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cb.png?v8"))
                .body("'couple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8"))
                .body("'couple_with_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8"))
                .body("'couple_with_heart_man_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2764-1f468.png?v8"))
                .body("'couple_with_heart_woman_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f468.png?v8"))
                .body("'couple_with_heart_woman_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f469.png?v8"))
                .body("'couplekiss'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8"))
                .body("'couplekiss_man_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2764-1f48b-1f468.png?v8"))
                .body("'couplekiss_man_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8"))
                .body("'couplekiss_woman_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f469.png?v8"))
                .body("'cow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8"))
                .body("'cow2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8"))
                .body("'cowboy_hat_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f920.png?v8"))
                .body("'crab'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f980.png?v8"))
                .body("'crayon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58d.png?v8"))
                .body("'credit_card'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8"))
                .body("'crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f319.png?v8"))
                .body("'cricket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f997.png?v8"))
                .body("'cricket_game'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cf.png?v8"))
                .body("'croatia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f7.png?v8"))
                .body("'crocodile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8"))
                .body("'croissant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f950.png?v8"))
                .body("'crossed_fingers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91e.png?v8"))
                .body("'crossed_flags'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8"))
                .body("'crossed_swords'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2694.png?v8"))
                .body("'crown'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8"))
                .body("'cry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8"))
                .body("'crying_cat_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8"))
                .body("'crystal_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8"))
                .body("'cuba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fa.png?v8"))
                .body("'cucumber'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f952.png?v8"))
                .body("'cup_with_straw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f964.png?v8"))
                .body("'cupcake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c1.png?v8"))
                .body("'cupid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8"))
                .body("'curacao'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fc.png?v8"))
                .body("'curling_stone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94c.png?v8"))
                .body("'curly_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b1.png?v8"))
                .body("'curly_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b1.png?v8"))
                .body("'curly_loop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8"))
                .body("'currency_exchange'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8"))
                .body("'curry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8"))
                .body("'cursing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92c.png?v8"))
                .body("'custard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8"))
                .body("'customs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8"))
                .body("'cut_of_meat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f969.png?v8"))
                .body("'cyclone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8"))
                .body("'cyprus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fe.png?v8"))
                .body("'czech_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ff.png?v8"))
                .body("'dagger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e1.png?v8"))
                .body("'dancer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8"))
                .body("'dancers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8"))
                .body("'dancing_men'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f-2642.png?v8"))
                .body("'dancing_women'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f-2640.png?v8"))
                .body("'dango'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8"))
                .body("'dark_sunglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f576.png?v8"))
                .body("'dart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8"))
                .body("'dash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8"))
                .body("'date'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8"))
                .body("'de'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8"))
                .body("'deaf_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf-2642.png?v8"))
                .body("'deaf_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf.png?v8"))
                .body("'deaf_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf-2640.png?v8"))
                .body("'deciduous_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8"))
                .body("'deer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98c.png?v8"))
                .body("'denmark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f0.png?v8"))
                .body("'department_store'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8"))
                .body("'dependabot'", containsString("https://github.githubassets.com/images/icons/emoji/dependabot.png?v8"))
                .body("'derelict_house'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3da.png?v8"))
                .body("'desert'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3dc.png?v8"))
                .body("'desert_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3dd.png?v8"))
                .body("'desktop_computer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png?v8"))
                .body("'detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575.png?v8"))
                .body("'diamond_shape_with_a_dot_inside'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8"))
                .body("'diamonds'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8"))
                .body("'diego_garcia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ec.png?v8"))
                .body("'disappointed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8"))
                .body("'disappointed_relieved'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8"))
                .body("'disguised_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f978.png?v8"))
                .body("'diving_mask'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93f.png?v8"))
                .body("'diya_lamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa94.png?v8"))
                .body("'dizzy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8"))
                .body("'dizzy_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8"))
                .body("'djibouti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ef.png?v8"))
                .body("'dna'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ec.png?v8"))
                .body("'do_not_litter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8"))
                .body("'dodo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a4.png?v8"))
                .body("'dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8"))
                .body("'dog2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8"))
                .body("'dollar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8"))
                .body("'dolls'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8"))
                .body("'dolphin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8"))
                .body("'dominica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f2.png?v8"))
                .body("'dominican_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f4.png?v8"))
                .body("'door'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8"))
                .body("'doughnut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8"))
                .body("'dove'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54a.png?v8"))
                .body("'dragon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8"))
                .body("'dragon_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8"))
                .body("'dress'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8"))
                .body("'dromedary_camel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8"))
                .body("'drooling_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f924.png?v8"))
                .body("'drop_of_blood'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa78.png?v8"))
                .body("'droplet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8"))
                .body("'drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f941.png?v8"))
                .body("'duck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f986.png?v8"))
                .body("'dumpling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95f.png?v8"))
                .body("'dvd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8"))
                .body("'e-mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e7.png?v8"))
                .body("'eagle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f985.png?v8"))
                .body("'ear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8"))
                .body("'ear_of_rice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8"))
                .body("'ear_with_hearing_aid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bb.png?v8"))
                .body("'earth_africa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8"))
                .body("'earth_americas'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8"))
                .body("'earth_asia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8"))
                .body("'ecuador'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1e8.png?v8"))
                .body("'egg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8"))
                .body("'eggplant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8"))
                .body("'egypt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ec.png?v8"))
                .body("'eight'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8"))
                .body("'eight_pointed_black_star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8"))
                .body("'eight_spoked_asterisk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8"))
                .body("'eject_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23cf.png?v8"))
                .body("'el_salvador'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fb.png?v8"))
                .body("'electric_plug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8"))
                .body("'electron'", containsString("https://github.githubassets.com/images/icons/emoji/electron.png?v8"))
                .body("'elephant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8"))
                .body("'elevator'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d7.png?v8"))
                .body("'elf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd.png?v8"))
                .body("'elf_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd-2642.png?v8"))
                .body("'elf_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd-2640.png?v8"))
                .body("'email'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e7.png?v8"))
                .body("'end'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8"))
                .body("'england'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0065-e006e-e0067-e007f.png?v8"))
                .body("'envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8"))
                .body("'envelope_with_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e9.png?v8"))
                .body("'equatorial_guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f6.png?v8"))
                .body("'eritrea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f7.png?v8"))
                .body("'es'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8"))
                .body("'estonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ea.png?v8"))
                .body("'ethiopia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f9.png?v8"))
                .body("'eu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1fa.png?v8"))
                .body("'euro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8"))
                .body("'european_castle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8"))
                .body("'european_post_office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8"))
                .body("'european_union'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1fa.png?v8"))
                .body("'evergreen_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8"))
                .body("'exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8"))
                .body("'exploding_head'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92f.png?v8"))
                .body("'expressionless'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8"))
                .body("'eye'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f441.png?v8"))
                .body("'eye_speech_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f441-1f5e8.png?v8"))
                .body("'eyeglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8"))
                .body("'eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8"))
                .body("'face_exhaling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62e-1f4a8.png?v8"))
                .body("'face_in_clouds'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f636-1f32b.png?v8"))
                .body("'face_with_head_bandage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f915.png?v8"))
                .body("'face_with_spiral_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f635-1f4ab.png?v8"))
                .body("'face_with_thermometer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f912.png?v8"))
                .body("'facepalm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926.png?v8"))
                .body("'facepunch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'factory'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8"))
                .body("'factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3ed.png?v8"))
                .body("'fairy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da.png?v8"))
                .body("'fairy_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da-2642.png?v8"))
                .body("'fairy_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da-2640.png?v8"))
                .body("'falafel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c6.png?v8"))
                .body("'falkland_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f0.png?v8"))
                .body("'fallen_leaf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8"))
                .body("'family'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8"))
                .body("'family_man_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f466.png?v8"))
                .body("'family_man_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f466-1f466.png?v8"))
                .body("'family_man_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467.png?v8"))
                .body("'family_man_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467-1f466.png?v8"))
                .body("'family_man_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467-1f467.png?v8"))
                .body("'family_man_man_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f466.png?v8"))
                .body("'family_man_man_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f466-1f466.png?v8"))
                .body("'family_man_man_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467.png?v8"))
                .body("'family_man_man_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467-1f466.png?v8"))
                .body("'family_man_man_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467-1f467.png?v8"))
                .body("'family_man_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f466.png?v8"))
                .body("'family_man_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f466-1f466.png?v8"))
                .body("'family_man_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467.png?v8"))
                .body("'family_man_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467-1f466.png?v8"))
                .body("'family_man_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467-1f467.png?v8"))
                .body("'family_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f466.png?v8"))
                .body("'family_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f466-1f466.png?v8"))
                .body("'family_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467.png?v8"))
                .body("'family_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467-1f466.png?v8"))
                .body("'family_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467-1f467.png?v8"))
                .body("'family_woman_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f466.png?v8"))
                .body("'family_woman_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f466-1f466.png?v8"))
                .body("'family_woman_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467.png?v8"))
                .body("'family_woman_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467-1f466.png?v8"))
                .body("'family_woman_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467-1f467.png?v8"))
                .body("'farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f33e.png?v8"))
                .body("'faroe_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f4.png?v8"))
                .body("'fast_forward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8"))
                .body("'fax'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8"))
                .body("'fearful'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8"))
                .body("'feather'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab6.png?v8"))
                .body("'feelsgood'", containsString("https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8"))
                .body("'feet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8"))
                .body("'female_detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575-2640.png?v8"))
                .body("'female_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2640.png?v8"))
                .body("'ferris_wheel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8"))
                .body("'ferry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f4.png?v8"))
                .body("'field_hockey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d1.png?v8"))
                .body("'fiji'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1ef.png?v8"))
                .body("'file_cabinet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c4.png?v8"))
                .body("'file_folder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8"))
                .body("'film_projector'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fd.png?v8"))
                .body("'film_strip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39e.png?v8"))
                .body("'finland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1ee.png?v8"))
                .body("'finnadie'", containsString("https://github.githubassets.com/images/icons/emoji/finnadie.png?v8"))
                .body("'fire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8"))
                .body("'fire_engine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8"))
                .body("'fire_extinguisher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ef.png?v8"))
                .body("'firecracker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e8.png?v8"))
                .body("'firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f692.png?v8"))
                .body("'fireworks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8"))
                .body("'first_quarter_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8"))
                .body("'first_quarter_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8"))
                .body("'fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8"))
                .body("'fish_cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8"))
                .body("'fishing_pole_and_fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8"))
                .body("'fishsticks'", containsString("https://github.githubassets.com/images/icons/emoji/fishsticks.png?v8"))
                .body("'fist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8"))
                .body("'fist_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91b.png?v8"))
                .body("'fist_oncoming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'fist_raised'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8"))
                .body("'fist_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91c.png?v8"))
                .body("'five'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8"))
                .body("'flags'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8"))
                .body("'flamingo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a9.png?v8"))
                .body("'flashlight'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8"))
                .body("'flat_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97f.png?v8"))
                .body("'flatbread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad3.png?v8"))
                .body("'fleur_de_lis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/269c.png?v8"))
                .body("'flight_arrival'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ec.png?v8"))
                .body("'flight_departure'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6eb.png?v8"))
                .body("'flipper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8"))
                .body("'floppy_disk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8"))
                .body("'flower_playing_cards'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8"))
                .body("'flushed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8"))
                .body("'fly'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab0.png?v8"))
                .body("'flying_disc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94f.png?v8"))
                .body("'flying_saucer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f8.png?v8"))
                .body("'fog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32b.png?v8"))
                .body("'foggy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8"))
                .body("'fondue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad5.png?v8"))
                .body("'foot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b6.png?v8"))
                .body("'football'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8"))
                .body("'footprints'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f463.png?v8"))
                .body("'fork_and_knife'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8"))
                .body("'fortune_cookie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f960.png?v8"))
                .body("'fountain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8"))
                .body("'fountain_pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58b.png?v8"))
                .body("'four'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8"))
                .body("'four_leaf_clover'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8"))
                .body("'fox_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98a.png?v8"))
                .body("'fr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8"))
                .body("'framed_picture'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png?v8"))
                .body("'free'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8"))
                .body("'french_guiana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1eb.png?v8"))
                .body("'french_polynesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1eb.png?v8"))
                .body("'french_southern_territories'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1eb.png?v8"))
                .body("'fried_egg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f373.png?v8"))
                .body("'fried_shrimp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8"))
                .body("'fries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8"))
                .body("'frog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8"))
                .body("'frowning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8"))
                .body("'frowning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2639.png?v8"))
                .body("'frowning_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d-2642.png?v8"))
                .body("'frowning_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d.png?v8"))
                .body("'frowning_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d-2640.png?v8"))
                .body("'fu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8"))
                .body("'fuelpump'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8"))
                .body("'full_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8"))
                .body("'full_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8"))
                .body("'funeral_urn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26b1.png?v8"))
                .body("'gabon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e6.png?v8"))
                .body("'gambia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f2.png?v8"))
                .body("'game_die'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8"))
                .body("'garlic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c4.png?v8"))
                .body("'gb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8"))
                .body("'gear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2699.png?v8"))
                .body("'gem'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8"))
                .body("'gemini'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8"))
                .body("'genie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de.png?v8"))
                .body("'genie_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de-2642.png?v8"))
                .body("'genie_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de-2640.png?v8"))
                .body("'georgia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ea.png?v8"))
                .body("'ghana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ed.png?v8"))
                .body("'ghost'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8"))
                .body("'gibraltar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ee.png?v8"))
                .body("'gift'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8"))
                .body("'gift_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8"))
                .body("'giraffe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f992.png?v8"))
                .body("'girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8"))
                .body("'globe_with_meridians'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8"))
                .body("'gloves'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e4.png?v8"))
                .body("'goal_net'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f945.png?v8"))
                .body("'goat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8"))
                .body("'goberserk'", containsString("https://github.githubassets.com/images/icons/emoji/goberserk.png?v8"))
                .body("'godmode'", containsString("https://github.githubassets.com/images/icons/emoji/godmode.png?v8"))
                .body("'goggles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97d.png?v8"))
                .body("'golf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8"))
                .body("'golfing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc.png?v8"))
                .body("'golfing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc-2642.png?v8"))
                .body("'golfing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc-2640.png?v8"))
                .body("'gorilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98d.png?v8"))
                .body("'grapes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8"))
                .body("'greece'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f7.png?v8"))
                .body("'green_apple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8"))
                .body("'green_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8"))
                .body("'green_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png?v8"))
                .body("'green_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8"))
                .body("'green_salad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f957.png?v8"))
                .body("'green_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e9.png?v8"))
                .body("'greenland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f1.png?v8"))
                .body("'grenada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e9.png?v8"))
                .body("'grey_exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8"))
                .body("'grey_question'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8"))
                .body("'grimacing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8"))
                .body("'grin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8"))
                .body("'grinning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8"))
                .body("'guadeloupe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f5.png?v8"))
                .body("'guam'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fa.png?v8"))
                .body("'guard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482.png?v8"))
                .body("'guardsman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8"))
                .body("'guardswoman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482-2640.png?v8"))
                .body("'guatemala'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f9.png?v8"))
                .body("'guernsey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ec.png?v8"))
                .body("'guide_dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ae.png?v8"))
                .body("'guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f3.png?v8"))
                .body("'guinea_bissau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fc.png?v8"))
                .body("'guitar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8"))
                .body("'gun'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8"))
                .body("'guyana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fe.png?v8"))
                .body("'haircut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8"))
                .body("'haircut_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487-2642.png?v8"))
                .body("'haircut_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487-2640.png?v8"))
                .body("'haiti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f9.png?v8"))
                .body("'hamburger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8"))
                .body("'hammer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8"))
                .body("'hammer_and_pick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2692.png?v8"))
                .body("'hammer_and_wrench'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8"))
                .body("'hamster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8"))
                .body("'hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8"))
                .body("'hand_over_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92d.png?v8"))
                .body("'handbag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8"))
                .body("'handball_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e.png?v8"))
                .body("'handshake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91d.png?v8"))
                .body("'hankey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'hash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8"))
                .body("'hatched_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8"))
                .body("'hatching_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8"))
                .body("'headphones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8"))
                .body("'headstone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa6.png?v8"))
                .body("'health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2695.png?v8"))
                .body("'hear_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8"))
                .body("'heard_mcdonald_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f2.png?v8"))
                .body("'heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8"))
                .body("'heart_decoration'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8"))
                .body("'heart_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8"))
                .body("'heart_eyes_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8"))
                .body("'heart_on_fire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764-1f525.png?v8"))
                .body("'heartbeat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8"))
                .body("'heartpulse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8"))
                .body("'hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8"))
                .body("'heavy_check_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8"))
                .body("'heavy_division_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8"))
                .body("'heavy_dollar_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8"))
                .body("'heavy_exclamation_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8"))
                .body("'heavy_heart_exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2763.png?v8"))
                .body("'heavy_minus_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8"))
                .body("'heavy_multiplication_x'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8"))
                .body("'heavy_plus_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8"))
                .body("'hedgehog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f994.png?v8"))
                .body("'helicopter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8"))
                .body("'herb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8"))
                .body("'hibiscus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8"))
                .body("'high_brightness'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8"))
                .body("'high_heel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8"))
                .body("'hiking_boot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97e.png?v8"))
                .body("'hindu_temple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d5.png?v8"))
                .body("'hippopotamus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99b.png?v8"))
                .body("'hocho'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8"))
                .body("'hole'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f573.png?v8"))
                .body("'honduras'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f3.png?v8"))
                .body("'honey_pot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8"))
                .body("'honeybee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8"))
                .body("'hong_kong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f0.png?v8"))
                .body("'hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9d.png?v8"))
                .body("'horse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8"))
                .body("'horse_racing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8"))
                .body("'hospital'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8"))
                .body("'hot_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f975.png?v8"))
                .body("'hot_pepper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f336.png?v8"))
                .body("'hotdog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32d.png?v8"))
                .body("'hotel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8"))
                .body("'hotsprings'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8"))
                .body("'hourglass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8"))
                .body("'hourglass_flowing_sand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8"))
                .body("'house'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8"))
                .body("'house_with_garden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8"))
                .body("'houses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d8.png?v8"))
                .body("'hugs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f917.png?v8"))
                .body("'hungary'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1fa.png?v8"))
                .body("'hurtrealbad'", containsString("https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8"))
                .body("'hushed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8"))
                .body("'hut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d6.png?v8"))
                .body("'ice_cream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8"))
                .body("'ice_cube'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ca.png?v8"))
                .body("'ice_hockey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d2.png?v8"))
                .body("'ice_skate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f8.png?v8"))
                .body("'icecream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8"))
                .body("'iceland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f8.png?v8"))
                .body("'ideograph_advantage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8"))
                .body("'imp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8"))
                .body("'inbox_tray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8"))
                .body("'incoming_envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8"))
                .body("'india'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f3.png?v8"))
                .body("'indonesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1e9.png?v8"))
                .body("'infinity'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267e.png?v8"))
                .body("'information_desk_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8"))
                .body("'information_source'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8"))
                .body("'innocent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8"))
                .body("'interrobang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8"))
                .body("'iphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8"))
                .body("'iran'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f7.png?v8"))
                .body("'iraq'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f6.png?v8"))
                .body("'ireland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1ea.png?v8"))
                .body("'isle_of_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f2.png?v8"))
                .body("'israel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f1.png?v8"))
                .body("'it'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8"))
                .body("'izakaya_lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8"))
                .body("'jack_o_lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8"))
                .body("'jamaica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f2.png?v8"))
                .body("'japan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8"))
                .body("'japanese_castle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8"))
                .body("'japanese_goblin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8"))
                .body("'japanese_ogre'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8"))
                .body("'jeans'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8"))
                .body("'jersey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1ea.png?v8"))
                .body("'jigsaw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e9.png?v8"))
                .body("'jordan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f4.png?v8"))
                .body("'joy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8"))
                .body("'joy_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8"))
                .body("'joystick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f579.png?v8"))
                .body("'jp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8"))
                .body("'judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2696.png?v8"))
                .body("'juggling_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939.png?v8"))
                .body("'kaaba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54b.png?v8"))
                .body("'kangaroo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f998.png?v8"))
                .body("'kazakhstan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ff.png?v8"))
                .body("'kenya'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ea.png?v8"))
                .body("'key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8"))
                .body("'keyboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2328.png?v8"))
                .body("'keycap_ten'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8"))
                .body("'kick_scooter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f4.png?v8"))
                .body("'kimono'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8"))
                .body("'kiribati'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ee.png?v8"))
                .body("'kiss'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8"))
                .body("'kissing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8"))
                .body("'kissing_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8"))
                .body("'kissing_closed_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8"))
                .body("'kissing_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8"))
                .body("'kissing_smiling_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8"))
                .body("'kite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa81.png?v8"))
                .body("'kiwi_fruit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95d.png?v8"))
                .body("'kneeling_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce-2642.png?v8"))
                .body("'kneeling_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce.png?v8"))
                .body("'kneeling_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce-2640.png?v8"))
                .body("'knife'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8"))
                .body("'knot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa2.png?v8"))
                .body("'koala'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8"))
                .body("'koko'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8"))
                .body("'kosovo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fd-1f1f0.png?v8"))
                .body("'kr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8"))
                .body("'kuwait'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1fc.png?v8"))
                .body("'kyrgyzstan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ec.png?v8"))
                .body("'lab_coat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97c.png?v8"))
                .body("'label'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f7.png?v8"))
                .body("'lacrosse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94d.png?v8"))
                .body("'ladder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9c.png?v8"))
                .body("'lady_beetle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8"))
                .body("'lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8"))
                .body("'laos'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e6.png?v8"))
                .body("'large_blue_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8"))
                .body("'large_blue_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8"))
                .body("'large_orange_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8"))
                .body("'last_quarter_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8"))
                .body("'last_quarter_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8"))
                .body("'latin_cross'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/271d.png?v8"))
                .body("'latvia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fb.png?v8"))
                .body("'laughing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8"))
                .body("'leafy_green'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96c.png?v8"))
                .body("'leaves'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8"))
                .body("'lebanon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e7.png?v8"))
                .body("'ledger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8"))
                .body("'left_luggage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8"))
                .body("'left_right_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8"))
                .body("'left_speech_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e8.png?v8"))
                .body("'leftwards_arrow_with_hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8"))
                .body("'leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b5.png?v8"))
                .body("'lemon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8"))
                .body("'leo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8"))
                .body("'leopard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8"))
                .body("'lesotho'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f8.png?v8"))
                .body("'level_slider'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39a.png?v8"))
                .body("'liberia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f7.png?v8"))
                .body("'libra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8"))
                .body("'libya'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fe.png?v8"))
                .body("'liechtenstein'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1ee.png?v8"))
                .body("'light_rail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8"))
                .body("'link'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8"))
                .body("'lion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8"))
                .body("'lips'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8"))
                .body("'lipstick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8"))
                .body("'lithuania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f9.png?v8"))
                .body("'lizard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98e.png?v8"))
                .body("'llama'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f999.png?v8"))
                .body("'lobster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99e.png?v8"))
                .body("'lock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8"))
                .body("'lock_with_ink_pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8"))
                .body("'lollipop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8"))
                .body("'long_drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa98.png?v8"))
                .body("'loop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8"))
                .body("'lotion_bottle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f4.png?v8"))
                .body("'lotus_position'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8.png?v8"))
                .body("'lotus_position_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8-2642.png?v8"))
                .body("'lotus_position_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8-2640.png?v8"))
                .body("'loud_sound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50a.png?v8"))
                .body("'loudspeaker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8"))
                .body("'love_hotel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8"))
                .body("'love_letter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8"))
                .body("'love_you_gesture'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91f.png?v8"))
                .body("'low_brightness'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8"))
                .body("'luggage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f3.png?v8"))
                .body("'lungs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac1.png?v8"))
                .body("'luxembourg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fa.png?v8"))
                .body("'lying_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f925.png?v8"))
                .body("'m'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8"))
                .body("'macau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f4.png?v8"))
                .body("'macedonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f0.png?v8"))
                .body("'madagascar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ec.png?v8"))
                .body("'mag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8"))
                .body("'mag_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8"))
                .body("'mage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9.png?v8"))
                .body("'mage_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9-2642.png?v8"))
                .body("'mage_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9-2640.png?v8"))
                .body("'magic_wand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa84.png?v8"))
                .body("'magnet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f2.png?v8"))
                .body("'mahjong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8"))
                .body("'mailbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8"))
                .body("'mailbox_closed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8"))
                .body("'mailbox_with_mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8"))
                .body("'mailbox_with_no_mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8"))
                .body("'malawi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fc.png?v8"))
                .body("'malaysia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fe.png?v8"))
                .body("'maldives'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fb.png?v8"))
                .body("'male_detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575-2642.png?v8"))
                .body("'male_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2642.png?v8"))
                .body("'mali'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f1.png?v8"))
                .body("'malta'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f9.png?v8"))
                .body("'mammoth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a3.png?v8"))
                .body("'man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8"))
                .body("'man_artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3a8.png?v8"))
                .body("'man_astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f680.png?v8"))
                .body("'man_beard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4-2642.png?v8"))
                .body("'man_cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938-2642.png?v8"))
                .body("'man_cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f373.png?v8"))
                .body("'man_dancing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f57a.png?v8"))
                .body("'man_facepalming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926-2642.png?v8"))
                .body("'man_factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3ed.png?v8"))
                .body("'man_farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f33e.png?v8"))
                .body("'man_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f37c.png?v8"))
                .body("'man_firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f692.png?v8"))
                .body("'man_health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2695.png?v8"))
                .body("'man_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9bd.png?v8"))
                .body("'man_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9bc.png?v8"))
                .body("'man_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935-2642.png?v8"))
                .body("'man_judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2696.png?v8"))
                .body("'man_juggling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939-2642.png?v8"))
                .body("'man_mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f527.png?v8"))
                .body("'man_office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bc.png?v8"))
                .body("'man_pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2708.png?v8"))
                .body("'man_playing_handball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e-2642.png?v8"))
                .body("'man_playing_water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d-2642.png?v8"))
                .body("'man_scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f52c.png?v8"))
                .body("'man_shrugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937-2642.png?v8"))
                .body("'man_singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3a4.png?v8"))
                .body("'man_student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f393.png?v8"))
                .body("'man_teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3eb.png?v8"))
                .body("'man_technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bb.png?v8"))
                .body("'man_with_gua_pi_mao'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8"))
                .body("'man_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9af.png?v8"))
                .body("'man_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8"))
                .body("'man_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2642.png?v8"))
                .body("'mandarin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'mango'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96d.png?v8"))
                .body("'mans_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8"))
                .body("'mantelpiece_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f570.png?v8"))
                .body("'manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bd.png?v8"))
                .body("'maple_leaf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8"))
                .body("'marshall_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ed.png?v8"))
                .body("'martial_arts_uniform'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94b.png?v8"))
                .body("'martinique'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f6.png?v8"))
                .body("'mask'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8"))
                .body("'massage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8"))
                .body("'massage_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486-2642.png?v8"))
                .body("'massage_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486-2640.png?v8"))
                .body("'mate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c9.png?v8"))
                .body("'mauritania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f7.png?v8"))
                .body("'mauritius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fa.png?v8"))
                .body("'mayotte'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fe-1f1f9.png?v8"))
                .body("'meat_on_bone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8"))
                .body("'mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f527.png?v8"))
                .body("'mechanical_arm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9be.png?v8"))
                .body("'mechanical_leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bf.png?v8"))
                .body("'medal_military'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f396.png?v8"))
                .body("'medal_sports'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png?v8"))
                .body("'medical_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2695.png?v8"))
                .body("'mega'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8"))
                .body("'melon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8"))
                .body("'memo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8"))
                .body("'men_wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c-2642.png?v8"))
                .body("'mending_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764-1fa79.png?v8"))
                .body("'menorah'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54e.png?v8"))
                .body("'mens'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8"))
                .body("'mermaid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc-2640.png?v8"))
                .body("'merman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc-2642.png?v8"))
                .body("'merperson'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc.png?v8"))
                .body("'metal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8"))
                .body("'metro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8"))
                .body("'mexico'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fd.png?v8"))
                .body("'microbe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a0.png?v8"))
                .body("'micronesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f2.png?v8"))
                .body("'microphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8"))
                .body("'microscope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8"))
                .body("'middle_finger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8"))
                .body("'military_helmet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa96.png?v8"))
                .body("'milk_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95b.png?v8"))
                .body("'milky_way'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8"))
                .body("'minibus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8"))
                .body("'minidisc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8"))
                .body("'mirror'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9e.png?v8"))
                .body("'mobile_phone_off'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8"))
                .body("'moldova'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e9.png?v8"))
                .body("'monaco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e8.png?v8"))
                .body("'money_mouth_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f911.png?v8"))
                .body("'money_with_wings'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8"))
                .body("'moneybag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8"))
                .body("'mongolia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f3.png?v8"))
                .body("'monkey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8"))
                .body("'monkey_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8"))
                .body("'monocle_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d0.png?v8"))
                .body("'monorail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8"))
                .body("'montenegro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ea.png?v8"))
                .body("'montserrat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f8.png?v8"))
                .body("'moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8"))
                .body("'moon_cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96e.png?v8"))
                .body("'morocco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e6.png?v8"))
                .body("'mortar_board'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8"))
                .body("'mosque'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54c.png?v8"))
                .body("'mosquito'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99f.png?v8"))
                .body("'motor_boat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e5.png?v8"))
                .body("'motor_scooter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f5.png?v8"))
                .body("'motorcycle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cd.png?v8"))
                .body("'motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bc.png?v8"))
                .body("'motorway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e3.png?v8"))
                .body("'mount_fuji'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8"))
                .body("'mountain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f0.png?v8"))
                .body("'mountain_bicyclist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8"))
                .body("'mountain_biking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5-2642.png?v8"))
                .body("'mountain_biking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5-2640.png?v8"))
                .body("'mountain_cableway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8"))
                .body("'mountain_railway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8"))
                .body("'mountain_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d4.png?v8"))
                .body("'mouse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8"))
                .body("'mouse2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8"))
                .body("'mouse_trap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa4.png?v8"))
                .body("'movie_camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8"))
                .body("'moyai'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8"))
                .body("'mozambique'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ff.png?v8"))
                .body("'mrs_claus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f936.png?v8"))
                .body("'muscle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8"))
                .body("'mushroom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8"))
                .body("'musical_keyboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8"))
                .body("'musical_note'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8"))
                .body("'musical_score'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8"))
                .body("'mute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8"))
                .body("'mx_claus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f384.png?v8"))
                .body("'myanmar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f2.png?v8"))
                .body("'nail_care'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8"))
                .body("'name_badge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8"))
                .body("'namibia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1e6.png?v8"))
                .body("'national_park'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3de.png?v8"))
                .body("'nauru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f7.png?v8"))
                .body("'nauseated_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f922.png?v8"))
                .body("'nazar_amulet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ff.png?v8"))
                .body("'neckbeard'", containsString("https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8"))
                .body("'necktie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8"))
                .body("'negative_squared_cross_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8"))
                .body("'nepal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f5.png?v8"))
                .body("'nerd_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f913.png?v8"))
                .body("'nesting_dolls'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa86.png?v8"))
                .body("'netherlands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f1.png?v8"))
                .body("'neutral_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8"))
                .body("'new'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8"))
                .body("'new_caledonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1e8.png?v8"))
                .body("'new_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8"))
                .body("'new_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8"))
                .body("'new_zealand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ff.png?v8"))
                .body("'newspaper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8"))
                .body("'newspaper_roll'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5de.png?v8"))
                .body("'next_track_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8"))
                .body("'ng'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8"))
                .body("'ng_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2642.png?v8"))
                .body("'ng_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2640.png?v8"))
                .body("'nicaragua'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ee.png?v8"))
                .body("'niger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ea.png?v8"))
                .body("'nigeria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ec.png?v8"))
                .body("'night_with_stars'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f303.png?v8"))
                .body("'nine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8"))
                .body("'ninja'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f977.png?v8"))
                .body("'niue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1fa.png?v8"))
                .body("'no_bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8"))
                .body("'no_bicycles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8"))
                .body("'no_entry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8"))
                .body("'no_entry_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8"))
                .body("'no_good'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8"))
                .body("'no_good_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2642.png?v8"))
                .body("'no_good_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2640.png?v8"))
                .body("'no_mobile_phones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8"))
                .body("'no_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8"))
                .body("'no_pedestrians'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8"))
                .body("'no_smoking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8"))
                .body("'non-potable_water'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b1.png?v8"))
                .body("'norfolk_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1eb.png?v8"))
                .body("'north_korea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f5.png?v8"))
                .body("'northern_mariana_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f5.png?v8"))
                .body("'norway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f4.png?v8"))
                .body("'nose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8"))
                .body("'notebook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8"))
                .body("'notebook_with_decorative_cover'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8"))
                .body("'notes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8"))
                .body("'nut_and_bolt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8"))
                .body("'o'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8"))
                .body("'o2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8"))
                .body("'ocean'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8"))
                .body("'octocat'", containsString("https://github.githubassets.com/images/icons/emoji/octocat.png?v8"))
                .body("'octopus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8"))
                .body("'oden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8"))
                .body("'office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8"))
                .body("'office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f4bc.png?v8"))
                .body("'oil_drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e2.png?v8"))
                .body("'ok'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8"))
                .body("'ok_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8"))
                .body("'ok_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646-2642.png?v8"))
                .body("'ok_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646.png?v8"))
                .body("'ok_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8"))
                .body("'old_key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5dd.png?v8"))
                .body("'older_adult'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d3.png?v8"))
                .body("'older_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8"))
                .body("'older_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8"))
                .body("'olive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad2.png?v8"))
                .body("'om'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f549.png?v8"))
                .body("'oman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f4-1f1f2.png?v8"))
                .body("'on'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8"))
                .body("'oncoming_automobile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8"))
                .body("'oncoming_bus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8"))
                .body("'oncoming_police_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8"))
                .body("'oncoming_taxi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8"))
                .body("'one'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8"))
                .body("'one_piece_swimsuit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa71.png?v8"))
                .body("'onion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c5.png?v8"))
                .body("'open_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8"))
                .body("'open_file_folder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8"))
                .body("'open_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8"))
                .body("'open_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8"))
                .body("'open_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2602.png?v8"))
                .body("'ophiuchus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8"))
                .body("'orange'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'orange_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8"))
                .body("'orange_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e0.png?v8"))
                .body("'orange_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e1.png?v8"))
                .body("'orange_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e7.png?v8"))
                .body("'orangutan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a7.png?v8"))
                .body("'orthodox_cross'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2626.png?v8"))
                .body("'otter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a6.png?v8"))
                .body("'outbox_tray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8"))
                .body("'owl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f989.png?v8"))
                .body("'ox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8"))
                .body("'oyster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9aa.png?v8"))
                .body("'package'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8"))
                .body("'page_facing_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8"))
                .body("'page_with_curl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8"))
                .body("'pager'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8"))
                .body("'paintbrush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58c.png?v8"))
                .body("'pakistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f0.png?v8"))
                .body("'palau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1fc.png?v8"))
                .body("'palestinian_territories'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f8.png?v8"))
                .body("'palm_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8"))
                .body("'palms_up_together'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f932.png?v8"))
                .body("'panama'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1e6.png?v8"))
                .body("'pancakes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95e.png?v8"))
                .body("'panda_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8"))
                .body("'paperclip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8"))
                .body("'paperclips'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f587.png?v8"))
                .body("'papua_new_guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ec.png?v8"))
                .body("'parachute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa82.png?v8"))
                .body("'paraguay'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1fe.png?v8"))
                .body("'parasol_on_ground'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f1.png?v8"))
                .body("'parking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8"))
                .body("'parrot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99c.png?v8"))
                .body("'part_alternation_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8"))
                .body("'partly_sunny'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8"))
                .body("'partying_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f973.png?v8"))
                .body("'passenger_ship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f3.png?v8"))
                .body("'passport_control'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8"))
                .body("'pause_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f8.png?v8"))
                .body("'paw_prints'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8"))
                .body("'peace_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262e.png?v8"))
                .body("'peach'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8"))
                .body("'peacock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99a.png?v8"))
                .body("'peanuts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95c.png?v8"))
                .body("'pear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8"))
                .body("'pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58a.png?v8"))
                .body("'pencil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8"))
                .body("'pencil2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8"))
                .body("'penguin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8"))
                .body("'pensive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8"))
                .body("'people_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f91d-1f9d1.png?v8"))
                .body("'people_hugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac2.png?v8"))
                .body("'performing_arts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8"))
                .body("'persevere'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8"))
                .body("'person_bald'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b2.png?v8"))
                .body("'person_curly_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b1.png?v8"))
                .body("'person_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f37c.png?v8"))
                .body("'person_fencing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93a.png?v8"))
                .body("'person_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9bd.png?v8"))
                .body("'person_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9bc.png?v8"))
                .body("'person_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935.png?v8"))
                .body("'person_red_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b0.png?v8"))
                .body("'person_white_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b3.png?v8"))
                .body("'person_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9af.png?v8"))
                .body("'person_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473.png?v8"))
                .body("'person_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8"))
                .body("'peru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ea.png?v8"))
                .body("'petri_dish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9eb.png?v8"))
                .body("'philippines'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ed.png?v8"))
                .body("'phone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8"))
                .body("'pick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26cf.png?v8"))
                .body("'pickup_truck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fb.png?v8"))
                .body("'pie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f967.png?v8"))
                .body("'pig'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8"))
                .body("'pig2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8"))
                .body("'pig_nose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8"))
                .body("'pill'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8"))
                .body("'pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2708.png?v8"))
                .body("'pinata'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa85.png?v8"))
                .body("'pinched_fingers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90c.png?v8"))
                .body("'pinching_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90f.png?v8"))
                .body("'pineapple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8"))
                .body("'ping_pong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d3.png?v8"))
                .body("'pirate_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-2620.png?v8"))
                .body("'pisces'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8"))
                .body("'pitcairn_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f3.png?v8"))
                .body("'pizza'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8"))
                .body("'placard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa7.png?v8"))
                .body("'place_of_worship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d0.png?v8"))
                .body("'plate_with_cutlery'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37d.png?v8"))
                .body("'play_or_pause_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ef.png?v8"))
                .body("'pleading_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97a.png?v8"))
                .body("'plunger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa0.png?v8"))
                .body("'point_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8"))
                .body("'point_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8"))
                .body("'point_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8"))
                .body("'point_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8"))
                .body("'point_up_2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8"))
                .body("'poland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f1.png?v8"))
                .body("'polar_bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43b-2744.png?v8"))
                .body("'police_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8"))
                .body("'police_officer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8"))
                .body("'policeman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e-2642.png?v8"))
                .body("'policewoman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e-2640.png?v8"))
                .body("'poodle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8"))
                .body("'poop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'popcorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37f.png?v8"))
                .body("'portugal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f9.png?v8"))
                .body("'post_office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8"))
                .body("'postal_horn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8"))
                .body("'postbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8"))
                .body("'potable_water'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8"))
                .body("'potato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f954.png?v8"))
                .body("'potted_plant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab4.png?v8"))
                .body("'pouch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8"))
                .body("'poultry_leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8"))
                .body("'pound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8"))
                .body("'pout'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8"))
                .body("'pouting_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8"))
                .body("'pouting_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e.png?v8"))
                .body("'pouting_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e-2642.png?v8"))
                .body("'pouting_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e-2640.png?v8"))
                .body("'pray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8"))
                .body("'prayer_beads'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ff.png?v8"))
                .body("'pregnant_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f930.png?v8"))
                .body("'pretzel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f968.png?v8"))
                .body("'previous_track_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ee.png?v8"))
                .body("'prince'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f934.png?v8"))
                .body("'princess'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8"))
                .body("'printer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a8.png?v8"))
                .body("'probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9af.png?v8"))
                .body("'puerto_rico'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f7.png?v8"))
                .body("'punch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'purple_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e3.png?v8"))
                .body("'purple_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8"))
                .body("'purple_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7ea.png?v8"))
                .body("'purse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8"))
                .body("'pushpin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8"))
                .body("'put_litter_in_its_place'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8"))
                .body("'qatar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f6-1f1e6.png?v8"))
                .body("'question'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8"))
                .body("'rabbit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8"))
                .body("'rabbit2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8"))
                .body("'raccoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99d.png?v8"))
                .body("'racehorse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8"))
                .body("'racing_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ce.png?v8"))
                .body("'radio'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8"))
                .body("'radio_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8"))
                .body("'radioactive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8"))
                .body("'rage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8"))
                .body("'rage1'", containsString("https://github.githubassets.com/images/icons/emoji/rage1.png?v8"))
                .body("'rage2'", containsString("https://github.githubassets.com/images/icons/emoji/rage2.png?v8"))
                .body("'rage3'", containsString("https://github.githubassets.com/images/icons/emoji/rage3.png?v8"))
                .body("'rage4'", containsString("https://github.githubassets.com/images/icons/emoji/rage4.png?v8"))
                .body("'railway_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8"))
                .body("'railway_track'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e4.png?v8"))
                .body("'rainbow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8"))
                .body("'rainbow_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3-1f308.png?v8"))
                .body("'raised_back_of_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91a.png?v8"))
                .body("'raised_eyebrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f928.png?v8"))
                .body("'raised_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8"))
                .body("'raised_hand_with_fingers_splayed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f590.png?v8"))
                .body("'raised_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8"))
                .body("'raising_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8"))
                .body("'raising_hand_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2642.png?v8"))
                .body("'raising_hand_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png?v8"))
                .body("'ram'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8"))
                .body("'ramen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8"))
                .body("'rat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8"))
                .body("'razor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa92.png?v8"))
                .body("'receipt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fe.png?v8"))
                .body("'record_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23fa.png?v8"))
                .body("'recycle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8"))
                .body("'red_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8"))
                .body("'red_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8"))
                .body("'red_envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e7.png?v8"))
                .body("'red_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b0.png?v8"))
                .body("'red_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b0.png?v8"))
                .body("'red_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e5.png?v8"))
                .body("'registered'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8"))
                .body("'relaxed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8"))
                .body("'relieved'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8"))
                .body("'reminder_ribbon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f397.png?v8"))
                .body("'repeat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8"))
                .body("'repeat_one'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8"))
                .body("'rescue_worker_helmet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d1.png?v8"))
                .body("'restroom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8"))
                .body("'reunion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1ea.png?v8"))
                .body("'revolving_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8"))
                .body("'rewind'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8"))
                .body("'rhinoceros'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98f.png?v8"))
                .body("'ribbon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8"))
                .body("'rice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8"))
                .body("'rice_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8"))
                .body("'rice_cracker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8"))
                .body("'rice_scene'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8"))
                .body("'right_anger_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5ef.png?v8"))
                .body("'ring'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8"))
                .body("'ringed_planet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa90.png?v8"))
                .body("'robot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f916.png?v8"))
                .body("'rock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa8.png?v8"))
                .body("'rocket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8"))
                .body("'rofl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8"))
                .body("'roll_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f644.png?v8"))
                .body("'roll_of_paper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fb.png?v8"))
                .body("'roller_coaster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8"))
                .body("'roller_skate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fc.png?v8"))
                .body("'romania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1f4.png?v8"))
                .body("'rooster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8"))
                .body("'rose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8"))
                .body("'rosette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f5.png?v8"))
                .body("'rotating_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8"))
                .body("'round_pushpin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8"))
                .body("'rowboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8"))
                .body("'rowing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3-2642.png?v8"))
                .body("'rowing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3-2640.png?v8"))
                .body("'ru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8"))
                .body("'rugby_football'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8"))
                .body("'runner'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8"))
                .body("'running'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8"))
                .body("'running_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3-2642.png?v8"))
                .body("'running_shirt_with_sash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8"))
                .body("'running_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3-2640.png?v8"))
                .body("'rwanda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fc.png?v8"))
                .body("'sa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8"))
                .body("'safety_pin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f7.png?v8"))
                .body("'safety_vest'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ba.png?v8"))
                .body("'sagittarius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8"))
                .body("'sailboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8"))
                .body("'sake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8"))
                .body("'salt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c2.png?v8"))
                .body("'samoa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fc-1f1f8.png?v8"))
                .body("'san_marino'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f2.png?v8"))
                .body("'sandal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8"))
                .body("'sandwich'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96a.png?v8"))
                .body("'santa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8"))
                .body("'sao_tome_principe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f9.png?v8"))
                .body("'sari'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97b.png?v8"))
                .body("'sassy_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8"))
                .body("'sassy_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8"))
                .body("'satellite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8"))
                .body("'satisfied'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8"))
                .body("'saudi_arabia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e6.png?v8"))
                .body("'sauna_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6-2642.png?v8"))
                .body("'sauna_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6.png?v8"))
                .body("'sauna_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6-2640.png?v8"))
                .body("'sauropod'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f995.png?v8"))
                .body("'saxophone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8"))
                .body("'scarf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e3.png?v8"))
                .body("'school'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8"))
                .body("'school_satchel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8"))
                .body("'scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f52c.png?v8"))
                .body("'scissors'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8"))
                .body("'scorpion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f982.png?v8"))
                .body("'scorpius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8"))
                .body("'scotland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0073-e0063-e0074-e007f.png?v8"))
                .body("'scream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8"))
                .body("'scream_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8"))
                .body("'screwdriver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9b.png?v8"))
                .body("'scroll'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8"))
                .body("'seal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ad.png?v8"))
                .body("'seat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8"))
                .body("'secret'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8"))
                .body("'see_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8"))
                .body("'seedling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8"))
                .body("'selfie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f933.png?v8"))
                .body("'senegal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f3.png?v8"))
                .body("'serbia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1f8.png?v8"))
                .body("'service_dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f415-1f9ba.png?v8"))
                .body("'seven'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8"))
                .body("'sewing_needle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa1.png?v8"))
                .body("'seychelles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e8.png?v8"))
                .body("'shallow_pan_of_food'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f958.png?v8"))
                .body("'shamrock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2618.png?v8"))
                .body("'shark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f988.png?v8"))
                .body("'shaved_ice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8"))
                .body("'sheep'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8"))
                .body("'shell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8"))
                .body("'shield'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e1.png?v8"))
                .body("'shinto_shrine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26e9.png?v8"))
                .body("'ship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8"))
                .body("'shipit'", containsString("https://github.githubassets.com/images/icons/emoji/shipit.png?v8"))
                .body("'shirt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8"))
                .body("'shit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8"))
                .body("'shopping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cd.png?v8"))
                .body("'shopping_cart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d2.png?v8"))
                .body("'shorts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa73.png?v8"))
                .body("'shower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8"))
                .body("'shrimp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f990.png?v8"))
                .body("'shrug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937.png?v8"))
                .body("'shushing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92b.png?v8"))
                .body("'sierra_leone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f1.png?v8"))
                .body("'signal_strength'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8"))
                .body("'singapore'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ec.png?v8"))
                .body("'singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3a4.png?v8"))
                .body("'sint_maarten'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fd.png?v8"))
                .body("'six'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8"))
                .body("'six_pointed_star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8"))
                .body("'skateboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f9.png?v8"))
                .body("'ski'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8"))
                .body("'skier'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f7.png?v8"))
                .body("'skull'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8"))
                .body("'skull_and_crossbones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2620.png?v8"))
                .body("'skunk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a8.png?v8"))
                .body("'sled'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f7.png?v8"))
                .body("'sleeping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8"))
                .body("'sleeping_bed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cc.png?v8"))
                .body("'sleepy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8"))
                .body("'slightly_frowning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f641.png?v8"))
                .body("'slightly_smiling_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8"))
                .body("'slot_machine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8"))
                .body("'sloth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a5.png?v8"))
                .body("'slovakia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f0.png?v8"))
                .body("'slovenia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ee.png?v8"))
                .body("'small_airplane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e9.png?v8"))
                .body("'small_blue_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8"))
                .body("'small_orange_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8"))
                .body("'small_red_triangle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8"))
                .body("'small_red_triangle_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8"))
                .body("'smile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8"))
                .body("'smile_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8"))
                .body("'smiley'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8"))
                .body("'smiley_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8"))
                .body("'smiling_face_with_tear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f972.png?v8"))
                .body("'smiling_face_with_three_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f970.png?v8"))
                .body("'smiling_imp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8"))
                .body("'smirk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8"))
                .body("'smirk_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8"))
                .body("'smoking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8"))
                .body("'snail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8"))
                .body("'snake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8"))
                .body("'sneezing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f927.png?v8"))
                .body("'snowboarder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8"))
                .body("'snowflake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8"))
                .body("'snowman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8"))
                .body("'snowman_with_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2603.png?v8"))
                .body("'soap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fc.png?v8"))
                .body("'sob'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8"))
                .body("'soccer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8"))
                .body("'socks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e6.png?v8"))
                .body("'softball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94e.png?v8"))
                .body("'solomon_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e7.png?v8"))
                .body("'somalia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f4.png?v8"))
                .body("'soon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8"))
                .body("'sos'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8"))
                .body("'sound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8"))
                .body("'south_africa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1e6.png?v8"))
                .body("'south_georgia_south_sandwich_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f8.png?v8"))
                .body("'south_sudan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f8.png?v8"))
                .body("'space_invader'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8"))
                .body("'spades'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8"))
                .body("'spaghetti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8"))
                .body("'sparkle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2747.png?v8"))
                .body("'sparkler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8"))
                .body("'sparkles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8"))
                .body("'sparkling_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8"))
                .body("'speak_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8"))
                .body("'speaker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8"))
                .body("'speaking_head'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e3.png?v8"))
                .body("'speech_balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8"))
                .body("'speedboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8"))
                .body("'spider'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f577.png?v8"))
                .body("'spider_web'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f578.png?v8"))
                .body("'spiral_calendar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d3.png?v8"))
                .body("'spiral_notepad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d2.png?v8"))
                .body("'sponge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fd.png?v8"))
                .body("'spoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f944.png?v8"))
                .body("'squid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f991.png?v8"))
                .body("'sri_lanka'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f0.png?v8"))
                .body("'st_barthelemy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f1.png?v8"))
                .body("'st_helena'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ed.png?v8"))
                .body("'st_kitts_nevis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f3.png?v8"))
                .body("'st_lucia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e8.png?v8"))
                .body("'st_martin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1eb.png?v8"))
                .body("'st_pierre_miquelon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f2.png?v8"))
                .body("'st_vincent_grenadines'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1e8.png?v8"))
                .body("'stadium'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3df.png?v8"))
                .body("'standing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd-2642.png?v8"))
                .body("'standing_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd.png?v8"))
                .body("'standing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd-2640.png?v8"))
                .body("'star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8"))
                .body("'star2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8"))
                .body("'star_and_crescent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262a.png?v8"))
                .body("'star_of_david'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2721.png?v8"))
                .body("'star_struck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f929.png?v8"))
                .body("'stars'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8"))
                .body("'station'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8"))
                .body("'statue_of_liberty'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8"))
                .body("'steam_locomotive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8"))
                .body("'stethoscope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa7a.png?v8"))
                .body("'stew'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8"))
                .body("'stop_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f9.png?v8"))
                .body("'stop_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d1.png?v8"))
                .body("'stopwatch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f1.png?v8"))
                .body("'straight_ruler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8"))
                .body("'strawberry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8"))
                .body("'stuck_out_tongue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8"))
                .body("'stuck_out_tongue_closed_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8"))
                .body("'stuck_out_tongue_winking_eye'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8"))
                .body("'student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f393.png?v8"))
                .body("'studio_microphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f399.png?v8"))
                .body("'stuffed_flatbread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f959.png?v8"))
                .body("'sudan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e9.png?v8"))
                .body("'sun_behind_large_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f325.png?v8"))
                .body("'sun_behind_rain_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f326.png?v8"))
                .body("'sun_behind_small_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f324.png?v8"))
                .body("'sun_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8"))
                .body("'sunflower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8"))
                .body("'sunglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8"))
                .body("'sunny'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8"))
                .body("'sunrise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8"))
                .body("'sunrise_over_mountains'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8"))
                .body("'superhero'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8.png?v8"))
                .body("'superhero_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8-2642.png?v8"))
                .body("'superhero_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8-2640.png?v8"))
                .body("'supervillain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9.png?v8"))
                .body("'supervillain_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9-2642.png?v8"))
                .body("'supervillain_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9-2640.png?v8"))
                .body("'surfer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8"))
                .body("'surfing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4-2642.png?v8"))
                .body("'surfing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4-2640.png?v8"))
                .body("'suriname'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f7.png?v8"))
                .body("'sushi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8"))
                .body("'suspect'", containsString("https://github.githubassets.com/images/icons/emoji/suspect.png?v8"))
                .body("'suspension_railway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8"))
                .body("'svalbard_jan_mayen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ef.png?v8"))
                .body("'swan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a2.png?v8"))
                .body("'swaziland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ff.png?v8"))
                .body("'sweat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8"))
                .body("'sweat_drops'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8"))
                .body("'sweat_smile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8"))
                .body("'sweden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ea.png?v8"))
                .body("'sweet_potato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8"))
                .body("'swim_brief'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa72.png?v8"))
                .body("'swimmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8"))
                .body("'swimming_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca-2642.png?v8"))
                .body("'swimming_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca-2640.png?v8"))
                .body("'switzerland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ed.png?v8"))
                .body("'symbols'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8"))
                .body("'synagogue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54d.png?v8"))
                .body("'syria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fe.png?v8"))
                .body("'syringe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8"))
                .body("'t-rex'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f996.png?v8"))
                .body("'taco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32e.png?v8"))
                .body("'tada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8"))
                .body("'taiwan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1fc.png?v8"))
                .body("'tajikistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ef.png?v8"))
                .body("'takeout_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f961.png?v8"))
                .body("'tamale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad4.png?v8"))
                .body("'tanabata_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8"))
                .body("'tangerine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'tanzania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ff.png?v8"))
                .body("'taurus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8"))
                .body("'taxi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8"))
                .body("'tea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8"))
                .body("'teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3eb.png?v8"))
                .body("'teapot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad6.png?v8"))
                .body("'technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f4bb.png?v8"))
                .body("'teddy_bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f8.png?v8"))
                .body("'telephone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8"))
                .body("'telephone_receiver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8"))
                .body("'telescope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8"))
                .body("'tennis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8"))
                .body("'tent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8"))
                .body("'test_tube'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ea.png?v8"))
                .body("'thailand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ed.png?v8"))
                .body("'thermometer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f321.png?v8"))
                .body("'thinking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8"))
                .body("'thong_sandal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa74.png?v8"))
                .body("'thought_balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8"))
                .body("'thread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f5.png?v8"))
                .body("'three'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8"))
                .body("'thumbsdown'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8"))
                .body("'thumbsup'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8"))
                .body("'ticket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8"))
                .body("'tickets'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39f.png?v8"))
                .body("'tiger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8"))
                .body("'tiger2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8"))
                .body("'timer_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f2.png?v8"))
                .body("'timor_leste'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f1.png?v8"))
                .body("'tipping_hand_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8"))
                .body("'tipping_hand_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8"))
                .body("'tipping_hand_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8"))
                .body("'tired_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8"))
                .body("'tm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8"))
                .body("'togo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ec.png?v8"))
                .body("'toilet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8"))
                .body("'tokelau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f0.png?v8"))
                .body("'tokyo_tower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8"))
                .body("'tomato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8"))
                .body("'tonga'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f4.png?v8"))
                .body("'tongue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8"))
                .body("'toolbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f0.png?v8"))
                .body("'tooth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b7.png?v8"))
                .body("'toothbrush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa5.png?v8"))
                .body("'top'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8"))
                .body("'tophat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8"))
                .body("'tornado'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32a.png?v8"))
                .body("'tr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f7.png?v8"))
                .body("'trackball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5b2.png?v8"))
                .body("'tractor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8"))
                .body("'traffic_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8"))
                .body("'train'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8"))
                .body("'train2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8"))
                .body("'tram'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8"))
                .body("'transgender_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3-26a7.png?v8"))
                .body("'transgender_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a7.png?v8"))
                .body("'triangular_flag_on_post'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8"))
                .body("'triangular_ruler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8"))
                .body("'trident'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8"))
                .body("'trinidad_tobago'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f9.png?v8"))
                .body("'tristan_da_cunha'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e6.png?v8"))
                .body("'triumph'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8"))
                .body("'trolleybus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8"))
                .body("'trollface'", containsString("https://github.githubassets.com/images/icons/emoji/trollface.png?v8"))
                .body("'trophy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8"))
                .body("'tropical_drink'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8"))
                .body("'tropical_fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8"))
                .body("'truck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8"))
                .body("'trumpet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8"))
                .body("'tshirt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8"))
                .body("'tulip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8"))
                .body("'tumbler_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f943.png?v8"))
                .body("'tunisia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f3.png?v8"))
                .body("'turkey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f983.png?v8"))
                .body("'turkmenistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f2.png?v8"))
                .body("'turks_caicos_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e8.png?v8"))
                .body("'turtle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8"))
                .body("'tuvalu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1fb.png?v8"))
                .body("'tv'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8"))
                .body("'twisted_rightwards_arrows'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8"))
                .body("'two'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8"))
                .body("'two_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8"))
                .body("'two_men_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8"))
                .body("'two_women_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8"))
                .body("'u5272'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8"))
                .body("'u5408'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8"))
                .body("'u55b6'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8"))
                .body("'u6307'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8"))
                .body("'u6708'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8"))
                .body("'u6709'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8"))
                .body("'u6e80'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8"))
                .body("'u7121'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8"))
                .body("'u7533'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8"))
                .body("'u7981'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8"))
                .body("'u7a7a'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8"))
                .body("'uganda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1ec.png?v8"))
                .body("'uk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8"))
                .body("'ukraine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1e6.png?v8"))
                .body("'umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8"))
                .body("'unamused'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8"))
                .body("'underage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8"))
                .body("'unicorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f984.png?v8"))
                .body("'united_arab_emirates'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ea.png?v8"))
                .body("'united_nations'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f3.png?v8"))
                .body("'unlock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8"))
                .body("'up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8"))
                .body("'upside_down_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f643.png?v8"))
                .body("'uruguay'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1fe.png?v8"))
                .body("'us'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8"))
                .body("'us_outlying_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f2.png?v8"))
                .body("'us_virgin_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ee.png?v8"))
                .body("'uzbekistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1ff.png?v8"))
                .body("'v'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8"))
                .body("'vampire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db.png?v8"))
                .body("'vampire_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db-2642.png?v8"))
                .body("'vampire_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db-2640.png?v8"))
                .body("'vanuatu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1fa.png?v8"))
                .body("'vatican_city'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1e6.png?v8"))
                .body("'venezuela'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ea.png?v8"))
                .body("'vertical_traffic_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8"))
                .body("'vhs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8"))
                .body("'vibration_mode'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8"))
                .body("'video_camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8"))
                .body("'video_game'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8"))
                .body("'vietnam'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1f3.png?v8"))
                .body("'violin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8"))
                .body("'virgo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8"))
                .body("'volcano'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8"))
                .body("'volleyball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d0.png?v8"))
                .body("'vomiting_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92e.png?v8"))
                .body("'vs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8"))
                .body("'vulcan_salute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f596.png?v8"))
                .body("'waffle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c7.png?v8"))
                .body("'wales'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0077-e006c-e0073-e007f.png?v8"))
                .body("'walking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8"))
                .body("'walking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6-2642.png?v8"))
                .body("'walking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6-2640.png?v8"))
                .body("'wallis_futuna'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fc-1f1eb.png?v8"))
                .body("'waning_crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8"))
                .body("'waning_gibbous_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8"))
                .body("'warning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8"))
                .body("'wastebasket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d1.png?v8"))
                .body("'watch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8"))
                .body("'water_buffalo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8"))
                .body("'water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d.png?v8"))
                .body("'watermelon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8"))
                .body("'wave'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8"))
                .body("'wavy_dash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8"))
                .body("'waxing_crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8"))
                .body("'waxing_gibbous_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8"))
                .body("'wc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8"))
                .body("'weary'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8"))
                .body("'wedding'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8"))
                .body("'weight_lifting'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb.png?v8"))
                .body("'weight_lifting_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb-2642.png?v8"))
                .body("'weight_lifting_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb-2640.png?v8"))
                .body("'western_sahara'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ed.png?v8"))
                .body("'whale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8"))
                .body("'whale2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8"))
                .body("'wheel_of_dharma'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2638.png?v8"))
                .body("'wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8"))
                .body("'white_check_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8"))
                .body("'white_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8"))
                .body("'white_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3.png?v8"))
                .body("'white_flower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8"))
                .body("'white_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b3.png?v8"))
                .body("'white_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b3.png?v8"))
                .body("'white_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90d.png?v8"))
                .body("'white_large_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b1c.png?v8"))
                .body("'white_medium_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fd.png?v8"))
                .body("'white_medium_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fb.png?v8"))
                .body("'white_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25ab.png?v8"))
                .body("'white_square_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8"))
                .body("'wilted_flower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f940.png?v8"))
                .body("'wind_chime'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8"))
                .body("'wind_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32c.png?v8"))
                .body("'window'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9f.png?v8"))
                .body("'wine_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8"))
                .body("'wink'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8"))
                .body("'wolf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8"))
                .body("'woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8"))
                .body("'woman_artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3a8.png?v8"))
                .body("'woman_astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f680.png?v8"))
                .body("'woman_beard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4-2640.png?v8"))
                .body("'woman_cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938-2640.png?v8"))
                .body("'woman_cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f373.png?v8"))
                .body("'woman_dancing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8"))
                .body("'woman_facepalming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926-2640.png?v8"))
                .body("'woman_factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3ed.png?v8"))
                .body("'woman_farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f33e.png?v8"))
                .body("'woman_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f37c.png?v8"))
                .body("'woman_firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f692.png?v8"))
                .body("'woman_health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2695.png?v8"))
                .body("'woman_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9bd.png?v8"))
                .body("'woman_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9bc.png?v8"))
                .body("'woman_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935-2640.png?v8"))
                .body("'woman_judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2696.png?v8"))
                .body("'woman_juggling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939-2640.png?v8"))
                .body("'woman_mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f527.png?v8"))
                .body("'woman_office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bc.png?v8"))
                .body("'woman_pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2708.png?v8"))
                .body("'woman_playing_handball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e-2640.png?v8"))
                .body("'woman_playing_water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d-2640.png?v8"))
                .body("'woman_scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f52c.png?v8"))
                .body("'woman_shrugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937-2640.png?v8"))
                .body("'woman_singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3a4.png?v8"))
                .body("'woman_student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f393.png?v8"))
                .body("'woman_teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3eb.png?v8"))
                .body("'woman_technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bb.png?v8"))
                .body("'woman_with_headscarf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d5.png?v8"))
                .body("'woman_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9af.png?v8"))
                .body("'woman_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473-2640.png?v8"))
                .body("'woman_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2640.png?v8"))
                .body("'womans_clothes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8"))
                .body("'womans_hat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8"))
                .body("'women_wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c-2640.png?v8"))
                .body("'womens'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8"))
                .body("'wood'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab5.png?v8"))
                .body("'woozy_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f974.png?v8"))
                .body("'world_map'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fa.png?v8"))
                .body("'worm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab1.png?v8"))
                .body("'worried'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8"))
                .body("'wrench'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8"))
                .body("'wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c.png?v8"))
                .body("'writing_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270d.png?v8"))
                .body("'x'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8"))
                .body("'yarn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f6.png?v8"))
                .body("'yawning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f971.png?v8"))
                .body("'yellow_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png?v8"))
                .body("'yellow_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8"))
                .body("'yellow_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e8.png?v8"))
                .body("'yemen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fe-1f1ea.png?v8"))
                .body("'yen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8"))
                .body("'yin_yang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262f.png?v8"))
                .body("'yo_yo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa80.png?v8"))
                .body("'yum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8"))
                .body("'zambia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1f2.png?v8"))
                .body("'zany_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92a.png?v8"))
                .body("'zap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8"))
                .body("'zebra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f993.png?v8"))
                .body("'zero'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8"))
                .body("'zimbabwe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1fc.png?v8"))
                .body("'zipper_mouth_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f910.png?v8"))
                .body("'zombie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df.png?v8"))
                .body("'zombie_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df-2642.png?v8"))
                .body("'zombie_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df-2640.png?v8"))
                .body("'zzz'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/L9Huj2/actions/permissions/organizations/QIVlJ95nu5BOZ3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/organizations?since=124")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'login'", containsString("collectiveidea"))
                .body("[0].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjEyOA=="))
                .body("[0].'url'", containsString("https://api.github.com/orgs/collectiveidea"))
                .body("[0].'repos_url'", containsString("https://api.github.com/orgs/collectiveidea/repos"))
                .body("[0].'events_url'", containsString("https://api.github.com/orgs/collectiveidea/events"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/orgs/collectiveidea/hooks"))
                .body("[0].'issues_url'", containsString("https://api.github.com/orgs/collectiveidea/issues"))
                .body("[0].'members_url'", containsString("https://api.github.com/orgs/collectiveidea/members{/member}"))
                .body("[0].'public_members_url'", containsString("https://api.github.com/orgs/collectiveidea/public_members{/member}"))
                .body("[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/128?v=4"))
                .body("[0].'description'", containsString("We build software to solve real problems."))
                .body("[1].'login'", containsString("ogc"))
                .body("[1].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjE0NA=="))
                .body("[1].'url'", containsString("https://api.github.com/orgs/ogc"))
                .body("[1].'repos_url'", containsString("https://api.github.com/orgs/ogc/repos"))
                .body("[1].'events_url'", containsString("https://api.github.com/orgs/ogc/events"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/orgs/ogc/hooks"))
                .body("[1].'issues_url'", containsString("https://api.github.com/orgs/ogc/issues"))
                .body("[1].'members_url'", containsString("https://api.github.com/orgs/ogc/members{/member}"))
                .body("[1].'public_members_url'", containsString("https://api.github.com/orgs/ogc/public_members{/member}"))
                .body("[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/144?v=4"))
                .body("[1].'description'", containsString(""))
                .body("[2].'login'", containsString("sevenwire"))
                .body("[2].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjE1MA=="))
                .body("[2].'url'", containsString("https://api.github.com/orgs/sevenwire"))
                .body("[2].'repos_url'", containsString("https://api.github.com/orgs/sevenwire/repos"))
                .body("[2].'events_url'", containsString("https://api.github.com/orgs/sevenwire/events"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/orgs/sevenwire/hooks"))
                .body("[2].'issues_url'", containsString("https://api.github.com/orgs/sevenwire/issues"))
                .body("[2].'members_url'", containsString("https://api.github.com/orgs/sevenwire/members{/member}"))
                .body("[2].'public_members_url'", containsString("https://api.github.com/orgs/sevenwire/public_members{/member}"))
                .body("[2].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/150?v=4"))
                .body("[2].'description'", containsString(""))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'node_id'", containsString("MDEwOlJlcG9zaXRvcnkx"))
                .body("[0].'name'", containsString("grit"))
                .body("[0].'full_name'", containsString("mojombo/grit"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("mojombo"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjE="))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/1?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/mojombo"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/mojombo"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/mojombo/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/mojombo/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/mojombo/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/mojombo/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/mojombo/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/mojombo/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/mojombo/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/mojombo/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/mojombo/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/mojombo/grit"))
                .body("[0].'description'", containsString("**Grit is no longer maintained. Check out libgit2/rugged.** Grit gives you object oriented read/write access to Git repositories via Ruby."))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/mojombo/grit"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/mojombo/grit/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/mojombo/grit/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/mojombo/grit/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/mojombo/grit/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/mojombo/grit/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/mojombo/grit/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/mojombo/grit/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/mojombo/grit/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/mojombo/grit/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/mojombo/grit/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/mojombo/grit/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/mojombo/grit/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/mojombo/grit/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/mojombo/grit/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/mojombo/grit/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/mojombo/grit/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/mojombo/grit/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/mojombo/grit/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/mojombo/grit/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/mojombo/grit/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/mojombo/grit/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/mojombo/grit/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/mojombo/grit/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/mojombo/grit/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/mojombo/grit/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/mojombo/grit/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/mojombo/grit/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/mojombo/grit/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/mojombo/grit/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/mojombo/grit/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/mojombo/grit/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/mojombo/grit/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/mojombo/grit/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/mojombo/grit/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/mojombo/grit/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/mojombo/grit/deployments"))
                .body("[1].'node_id'", containsString("MDEwOlJlcG9zaXRvcnkyNg=="))
                .body("[1].'name'", containsString("merb-core"))
                .body("[1].'full_name'", containsString("wycats/merb-core"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("wycats"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ="))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/4?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/wycats"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/wycats"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/wycats/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/wycats/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/wycats/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/wycats/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/wycats/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/wycats/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/wycats/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/wycats/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/wycats/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/wycats/merb-core"))
                .body("[1].'description'", containsString("Merb Core: All you need. None you don't."))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/wycats/merb-core"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/wycats/merb-core/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/wycats/merb-core/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/wycats/merb-core/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/wycats/merb-core/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/wycats/merb-core/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/wycats/merb-core/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/wycats/merb-core/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/wycats/merb-core/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/wycats/merb-core/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/wycats/merb-core/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/wycats/merb-core/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/wycats/merb-core/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/wycats/merb-core/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/wycats/merb-core/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/wycats/merb-core/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/wycats/merb-core/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/wycats/merb-core/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/wycats/merb-core/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/wycats/merb-core/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/wycats/merb-core/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/wycats/merb-core/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/wycats/merb-core/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/wycats/merb-core/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/wycats/merb-core/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/wycats/merb-core/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/wycats/merb-core/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/wycats/merb-core/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/wycats/merb-core/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/wycats/merb-core/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/wycats/merb-core/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/wycats/merb-core/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/wycats/merb-core/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/wycats/merb-core/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/wycats/merb-core/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/wycats/merb-core/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/wycats/merb-core/deployments"))
                .body("[2].'node_id'", containsString("MDEwOlJlcG9zaXRvcnkyNw=="))
                .body("[2].'name'", containsString("rubinius"))
                .body("[2].'full_name'", containsString("rubinius/rubinius"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("rubinius"))
                .body("[2].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjMxNzc0Nw=="))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/317747?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/rubinius"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/rubinius"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/rubinius/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/rubinius/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/rubinius/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/rubinius/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/rubinius/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/rubinius/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/rubinius/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/rubinius/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/rubinius/received_events"))
                .body("[2].'owner'.'type'", containsString("Organization"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/rubinius/rubinius"))
                .body("[2].'description'", containsString("The Rubinius Language Platform"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/rubinius/rubinius"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/rubinius/rubinius/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/rubinius/rubinius/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/rubinius/rubinius/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/rubinius/rubinius/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/rubinius/rubinius/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/rubinius/rubinius/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/rubinius/rubinius/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/rubinius/rubinius/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/rubinius/rubinius/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/rubinius/rubinius/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/rubinius/rubinius/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/rubinius/rubinius/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/rubinius/rubinius/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/rubinius/rubinius/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/rubinius/rubinius/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/rubinius/rubinius/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/rubinius/rubinius/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/rubinius/rubinius/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/rubinius/rubinius/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/rubinius/rubinius/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/rubinius/rubinius/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/rubinius/rubinius/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/rubinius/rubinius/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/rubinius/rubinius/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/rubinius/rubinius/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/rubinius/rubinius/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/rubinius/rubinius/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/rubinius/rubinius/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/rubinius/rubinius/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/rubinius/rubinius/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/rubinius/rubinius/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/rubinius/rubinius/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/rubinius/rubinius/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/rubinius/rubinius/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/rubinius/rubinius/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/rubinius/rubinius/deployments"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/U/packages/maven/ywFnV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/D_6/SlFxciFjTbQHN/actions/runs/CaAxAKSjGraI/cancel")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"github_owned_allowed\": true, " + 
                    " \"verified_allowed\": true, " + 
                    " \"patterns_allowed\": [ " + 
                    " \"xBGW_WIOT1tFE\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/9PpeL6IMHblGq_KM/n9Uekih44gLomCqm/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/labels?" + 
                    "repository_id=348&" + 
                    "q=h4G&" + 
                    "sort=updated")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/search#search-labels"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/xxpO2QtwGtQVbqkn/9itRiFWucD/pulls/q/merge")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations?per_page=278")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/issues?" + 
                    "state=all&" + 
                    "sort=comments&" + 
                    "orgs=true&" + 
                    "owned=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/738/discussions/WXu/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/user/memberships/orgs/MAA")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/e/0x/releases/Fp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/subscriptions")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'node_id'", containsString("R_kgDOHV7fxQ"))
                .body("[0].'name'", containsString("Cajviewer-crash"))
                .body("[0].'full_name'", containsString("painsAgains/Cajviewer-crash"))
                .body("[0].'private'", equalTo(true))
                .body("[0].'owner'.'login'", containsString("painsAgains"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'description'", containsString("find  crashs in cajviewer "))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/deployments"))
                .body("[0].'created_at'", containsString("2022-05-16T08:58:01Z"))
                .body("[0].'updated_at'", containsString("2022-05-20T03:07:07Z"))
                .body("[0].'pushed_at'", containsString("2022-05-16T09:04:43Z"))
                .body("[0].'git_url'", containsString("git://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:painsAgains/Cajviewer-crash.git"))
                .body("[0].'clone_url'", containsString("https://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'svn_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1340.0))
                .body("[0].'stargazers_count'", numberMatches(0.0))
                .body("[0].'watchers_count'", numberMatches(0.0))
                .body("[0].'language'", nullValue())
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(false))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(0.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(0.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("private"))
                .body("[0].'forks'", numberMatches(0.0))
                .body("[0].'open_issues'", numberMatches(0.0))
                .body("[0].'watchers'", numberMatches(0.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(true))
                .body("[0].'permissions'.'maintain'", equalTo(true))
                .body("[0].'permissions'.'push'", equalTo(true))
                .body("[0].'permissions'.'triage'", equalTo(true))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIV78aQ"))
                .body("[1].'name'", containsString("hack"))
                .body("[1].'full_name'", containsString("painsAgains/hack"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("painsAgains"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'description'", containsString("hack_js"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/painsAgains/hack"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/painsAgains/hack/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/painsAgains/hack/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/hack/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/painsAgains/hack/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/hack/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/painsAgains/hack/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/hack/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/painsAgains/hack/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/hack/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/painsAgains/hack/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/hack/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/hack/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/painsAgains/hack/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/painsAgains/hack/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/painsAgains/hack/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/painsAgains/hack/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/painsAgains/hack/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/hack/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/hack/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/hack/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/hack/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/painsAgains/hack/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/painsAgains/hack/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/hack/deployments"))
                .body("[1].'created_at'", containsString("2022-10-31T09:24:23Z"))
                .body("[1].'updated_at'", containsString("2022-10-31T09:38:12Z"))
                .body("[1].'pushed_at'", containsString("2022-11-01T02:14:43Z"))
                .body("[1].'git_url'", containsString("git://github.com/painsAgains/hack.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:painsAgains/hack.git"))
                .body("[1].'clone_url'", containsString("https://github.com/painsAgains/hack.git"))
                .body("[1].'svn_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'homepage'", nullValue())
                .body("[1].'size'", numberMatches(20835.0))
                .body("[1].'stargazers_count'", numberMatches(0.0))
                .body("[1].'watchers_count'", numberMatches(0.0))
                .body("[1].'language'", containsString("JavaScript"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(0.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(0.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(0))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(0.0))
                .body("[1].'open_issues'", numberMatches(0.0))
                .body("[1].'watchers'", numberMatches(0.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(true))
                .body("[1].'permissions'.'maintain'", equalTo(true))
                .body("[1].'permissions'.'push'", equalTo(true))
                .body("[1].'permissions'.'triage'", equalTo(true))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOIaDp1Q"))
                .body("[2].'name'", containsString("my_script"))
                .body("[2].'full_name'", containsString("painsAgains/my_script"))
                .body("[2].'private'", equalTo(true))
                .body("[2].'owner'.'login'", containsString("painsAgains"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'description'", containsString("实验脚本"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/painsAgains/my_script"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/painsAgains/my_script/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/my_script/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/painsAgains/my_script/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/painsAgains/my_script/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/my_script/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/painsAgains/my_script/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/painsAgains/my_script/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/painsAgains/my_script/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/painsAgains/my_script/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/my_script/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/my_script/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/my_script/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/my_script/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/painsAgains/my_script/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/painsAgains/my_script/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/deployments"))
                .body("[2].'created_at'", containsString("2022-11-10T07:33:53Z"))
                .body("[2].'updated_at'", containsString("2022-11-15T09:36:46Z"))
                .body("[2].'pushed_at'", containsString("2023-03-02T03:33:01Z"))
                .body("[2].'git_url'", containsString("git://github.com/painsAgains/my_script.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:painsAgains/my_script.git"))
                .body("[2].'clone_url'", containsString("https://github.com/painsAgains/my_script.git"))
                .body("[2].'svn_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'homepage'", nullValue())
                .body("[2].'size'", numberMatches(931.0))
                .body("[2].'stargazers_count'", numberMatches(0.0))
                .body("[2].'watchers_count'", numberMatches(0.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(false))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(0.0))
                .body("[2].'license'", nullValue())
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("private"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(0.0))
                .body("[2].'watchers'", numberMatches(0.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(true))
                .body("[2].'permissions'.'maintain'", equalTo(true))
                .body("[2].'permissions'.'push'", equalTo(true))
                .body("[2].'permissions'.'triage'", equalTo(true))
                .body("[2].'permissions'.'pull'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/Iu0AtTriUuYQ/team-sync/groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/installations/571/repositories/ULxRJPI6XGg9JN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/Fs/keys")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/c77lg7KZtp_65uV/oyEL0_PyKsR62Z/releases/assets/RBvf9Gu8hXT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-release-asset"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/287/discussions/Pu1HkM8f7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/kqz0ARVA4uHS/bL/issues/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"twitter_username\": \"g09rHjCJPEWZ\", " + 
                    " \"name\": \"\", " + 
                    " \"description\": \"r4NSMZ3sPNp\", " + 
                    " \"members_can_create_repositories\": true, " + 
                    " \"members_can_create_private_repositories\": true, " + 
                    " \"members_can_create_public_repositories\": false, " + 
                    " \"members_allowed_repository_creation_type\": \"none\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/76amGtzt79aWppsw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409, 415, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/B/z0HFkF/notifications")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'type'", containsString("DeleteEvent"))
                .body("[0].'actor'.'login'", containsString("lazovicff"))
                .body("[0].'actor'.'display_login'", containsString("lazovicff"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/lazovicff"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/20224251?"))
                .body("[0].'repo'.'name'", containsString("eigen-trust/website"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/eigen-trust/website"))
                .body("[0].'payload'.'ref'", containsString("master"))
                .body("[0].'payload'.'ref_type'", containsString("branch"))
                .body("[0].'payload'.'pusher_type'", containsString("user"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:38:58Z"))
                .body("[0].'org'.'login'", containsString("eigen-trust"))
                .body("[0].'org'.'gravatar_id'", containsString(""))
                .body("[0].'org'.'url'", containsString("https://api.github.com/orgs/eigen-trust"))
                .body("[0].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/113924007?"))
                .body("[1].'type'", containsString("PushEvent"))
                .body("[1].'actor'.'login'", containsString("DJm00n"))
                .body("[1].'actor'.'display_login'", containsString("DJm00n"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/DJm00n"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/1285934?"))
                .body("[1].'repo'.'name'", containsString("DJm00n/RawInputDemo"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/DJm00n/RawInputDemo"))
                .body("[1].'payload'.'repository_id'", numberMatches(2.80855435E8))
                .body("[1].'payload'.'push_id'", numberMatches(1.3211190463E10))
                .body("[1].'payload'.'size'", numberMatches(1.0))
                .body("[1].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[1].'payload'.'ref'", containsString("refs/heads/master"))
                .body("[1].'payload'.'head'", containsString("fe9e9a2e78df108aabaa110652e22614d5d46cb0"))
                .body("[1].'payload'.'before'", containsString("b1d8459c71a8f93699cb12b8352a7df387cc4f66"))
                .body("[1].'payload'.'commits'.size()", equalTo(1))
                .body("[1].'payload'.'commits'[0].'sha'", containsString("fe9e9a2e78df108aabaa110652e22614d5d46cb0"))
                .body("[1].'payload'.'commits'[0].'author'.'email'", containsString("dimitriy.ryazantcev@gmail.com"))
                .body("[1].'payload'.'commits'[0].'author'.'name'", containsString("Dimitriy Ryazantcev"))
                .body("[1].'payload'.'commits'[0].'message'", containsString("Return Win32-style mapping for NumLock and Pause keys in GetUsagesToScanCodes()"))
                .body("[1].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[1].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/DJm00n/RawInputDemo/commits/fe9e9a2e78df108aabaa110652e22614d5d46cb0"))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:38:58Z"))
                .body("[2].'type'", containsString("PushEvent"))
                .body("[2].'actor'.'login'", containsString("weblocs"))
                .body("[2].'actor'.'display_login'", containsString("weblocs"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/weblocs"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/24304077?"))
                .body("[2].'repo'.'name'", containsString("weblocs/shopify"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/weblocs/shopify"))
                .body("[2].'payload'.'repository_id'", numberMatches(6.23467341E8))
                .body("[2].'payload'.'push_id'", numberMatches(1.3211190473E10))
                .body("[2].'payload'.'size'", numberMatches(1.0))
                .body("[2].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[2].'payload'.'ref'", containsString("refs/heads/main"))
                .body("[2].'payload'.'head'", containsString("1d11a08e682cd18b72cdf71bd6da89f0e37bb7ca"))
                .body("[2].'payload'.'before'", containsString("5191b9f335ce06cdd27f98987e39b89c1cf860b7"))
                .body("[2].'payload'.'commits'.size()", equalTo(1))
                .body("[2].'payload'.'commits'[0].'sha'", containsString("1d11a08e682cd18b72cdf71bd6da89f0e37bb7ca"))
                .body("[2].'payload'.'commits'[0].'author'.'email'", containsString("kocielam@gmail.com"))
                .body("[2].'payload'.'commits'[0].'author'.'name'", containsString("Maciej Kociela"))
                .body("[2].'payload'.'commits'[0].'message'", containsString("update assets/778b4f0d-fa46-4801-9469-6b7aeaeb31dc-Social icon.svg"))
                .body("[2].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[2].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/weblocs/shopify/commits/1d11a08e682cd18b72cdf71bd6da89f0e37bb7ca"))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:38:58Z"))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/2sFKE7HpjFQeQIHO/Ewb/branches/Em9yvPpC1R7R/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/Wge7DIBDvD/audit-log")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/emails?per_page=298")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'email'", containsString("1293098289@qq.com"))
                .body("[0].'primary'", equalTo(true))
                .body("[0].'verified'", equalTo(true))
                .body("[0].'visibility'", containsString("private"))
                .body("[1].'email'", containsString("49607803+painsAgains@users.noreply.github.com"))
                .body("[1].'primary'", equalTo(false))
                .body("[1].'verified'", equalTo(true))
                .body("[1].'visibility'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/EqmWBJx/jWTm8E/actions/workflows/ZpXTjz0Oum8RO/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/D5252jky_2NFL2A/Q/issues?" + 
                    "milestone=vmHvqOfGG0Ztb_y1&" + 
                    "assignee=FUURia1F3qK&" + 
                    "mentioned=0UBXmP&" + 
                    "sort=created")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-repository-issues"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/plans/451/accounts")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_sha\": \"Fc1\", " + 
                    " \"ref\": \"ZTHiutUx\", " + 
                    " \"sarif\": \"s_L\", " + 
                    " \"checkout_uri\": \"h75aiY3BPkE\", " + 
                    " \"started_at\": \"2001-06-15\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/jCmPPwv/s_L/code-scanning/sarifs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#upload-an-analysis-as-sarif-data"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/F281yk/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/commits?" + 
                    "q=i4pTMGfYonsjLc&" + 
                    "order=asc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/0x7/LIJxNe_ZClB/generate")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Tu8Anjm3Qn/TGkqVaGjazDYiSTk/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-labels-for-a-repository"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/glwYq/keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-public-keys-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/issues?" + 
                    "q=7R8rRjScMFqR&" + 
                    "sort=EVOMASTER&" + 
                    "order=asc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/labels?" + 
                    "repository_id=971&" + 
                    "q=3y5aDZoYI1DDT&" + 
                    "sort=created&" + 
                    "order=asc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/search#search-labels"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/N91ta4wGITkg/teams/SoYj5vvil/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/1etuUJW/5WTJjB8/actions/workflows/lCV2f3/disable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/Qo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("qo"))
                .body("'node_id'", containsString("MDQ6VXNlcjcyOTgyNzI3"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/72982727?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/qo"))
                .body("'html_url'", containsString("https://github.com/qo"))
                .body("'followers_url'", containsString("https://api.github.com/users/qo/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/qo/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/qo/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/qo/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/qo/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/qo/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/qo/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/qo/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/qo/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", nullValue())
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", nullValue())
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(10.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(1.0))
                .body("'following'", numberMatches(4.0))
                .body("'created_at'", containsString("2020-10-16T13:44:14Z"))
                .body("'updated_at'", containsString("2023-03-24T18:32:57Z"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"lock_repositories\": false, " + 
                    " \"exclude_attachments\": true, " + 
                    " \"exclude\": [ " + 
                    " \"repositories\", " + 
                    " \"EVOMASTER\", " + 
                    " \"EVOMASTER\" " + 
                    " ], " + 
                    " \"repositories\": [ " + 
                    " \"RXvg\", " + 
                    " \"ghzk0BM2ekv\", " + 
                    " \"6tmQiQLid\", " + 
                    " \"PfY_MLuGpQcp\", " + 
                    " \"bFB4Vtvs1\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/user/migrations")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nEVOMASTER is not a member of [\"repositories\"].\nEVOMASTER is not a member of [\"repositories\"]."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#start-a-user-migration"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"PrAxx\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/378/discussions/PrAxx/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/oVusr4/shNztnZCb1Nlfi2m/hooks/gH6225Ebs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/B62Q6x0ATfPFAw3M/events/public")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-events-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events?per_page=162")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'type'", containsString("PushEvent"))
                .body("[0].'actor'.'login'", containsString("blackcandy-54"))
                .body("[0].'actor'.'display_login'", containsString("blackcandy-54"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/blackcandy-54"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/122829729?"))
                .body("[0].'repo'.'name'", containsString("blackcandy-54/autox"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/blackcandy-54/autox"))
                .body("[0].'payload'.'repository_id'", numberMatches(6.22130645E8))
                .body("[0].'payload'.'push_id'", numberMatches(1.3211281826E10))
                .body("[0].'payload'.'size'", numberMatches(1.0))
                .body("[0].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[0].'payload'.'ref'", containsString("refs/heads/main"))
                .body("[0].'payload'.'head'", containsString("9f53fad0a137351258479b3d25055644ab53a85f"))
                .body("[0].'payload'.'before'", containsString("344e5478a199e9a764457537000911621fd359de"))
                .body("[0].'payload'.'commits'.size()", equalTo(1))
                .body("[0].'payload'.'commits'[0].'sha'", containsString("9f53fad0a137351258479b3d25055644ab53a85f"))
                .body("[0].'payload'.'commits'[0].'author'.'email'", containsString("122829729+blackcandy-54@users.noreply.github.com"))
                .body("[0].'payload'.'commits'[0].'author'.'name'", containsString("Black candy"))
                .body("[0].'payload'.'commits'[0].'message'", containsString("Update docker-compose.yaml"))
                .body("[0].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[0].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/blackcandy-54/autox/commits/9f53fad0a137351258479b3d25055644ab53a85f"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:47:53Z"))
                .body("[1].'type'", containsString("PushEvent"))
                .body("[1].'actor'.'login'", containsString("sweetswift"))
                .body("[1].'actor'.'display_login'", containsString("sweetswift"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/sweetswift"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/114715441?"))
                .body("[1].'repo'.'name'", containsString("sweetswift/navigation"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/sweetswift/navigation"))
                .body("[1].'payload'.'repository_id'", numberMatches(6.23988933E8))
                .body("[1].'payload'.'push_id'", numberMatches(1.3211281885E10))
                .body("[1].'payload'.'size'", numberMatches(2.0))
                .body("[1].'payload'.'distinct_size'", numberMatches(2.0))
                .body("[1].'payload'.'ref'", containsString("refs/heads/main"))
                .body("[1].'payload'.'head'", containsString("815cffbf4c94b90c46524ae8e253a02b769e2b44"))
                .body("[1].'payload'.'before'", containsString("7623e7f1e353890c2fc7dfb8d63e1588bdc7e10b"))
                .body("[1].'payload'.'commits'.size()", equalTo(2))
                .body("[1].'payload'.'commits'[0].'sha'", containsString("bb0d4fdb82c1ce0446fd0d079fa5589d667bf88f"))
                .body("[1].'payload'.'commits'[0].'author'.'email'", containsString("ios.lllccww@gmail.com"))
                .body("[1].'payload'.'commits'[0].'author'.'name'", containsString("LeeChungWoo"))
                .body("[1].'payload'.'commits'[0].'message'", containsString("Add: push 코드 작성"))
                .body("[1].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[1].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/sweetswift/navigation/commits/bb0d4fdb82c1ce0446fd0d079fa5589d667bf88f"))
                .body("[1].'payload'.'commits'[1].'sha'", containsString("815cffbf4c94b90c46524ae8e253a02b769e2b44"))
                .body("[1].'payload'.'commits'[1].'author'.'email'", containsString("ios.lllccww@gmail.com"))
                .body("[1].'payload'.'commits'[1].'author'.'name'", containsString("LeeChungWoo"))
                .body("[1].'payload'.'commits'[1].'message'", containsString("Add: push,pop Argument 사용해보기"))
                .body("[1].'payload'.'commits'[1].'distinct'", equalTo(true))
                .body("[1].'payload'.'commits'[1].'url'", containsString("https://api.github.com/repos/sweetswift/navigation/commits/815cffbf4c94b90c46524ae8e253a02b769e2b44"))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:47:53Z"))
                .body("[2].'type'", containsString("PushEvent"))
                .body("[2].'actor'.'login'", containsString("M1ch4U"))
                .body("[2].'actor'.'display_login'", containsString("M1ch4U"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/M1ch4U"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/14005789?"))
                .body("[2].'repo'.'name'", containsString("M1ch4U/hello-world"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/M1ch4U/hello-world"))
                .body("[2].'payload'.'repository_id'", numberMatches(1.47625791E8))
                .body("[2].'payload'.'push_id'", numberMatches(1.3211281869E10))
                .body("[2].'payload'.'size'", numberMatches(3.0))
                .body("[2].'payload'.'distinct_size'", numberMatches(2.0))
                .body("[2].'payload'.'ref'", containsString("refs/heads/master"))
                .body("[2].'payload'.'head'", containsString("84d39eab2e4abeed1b1cf39e824584d358072166"))
                .body("[2].'payload'.'before'", containsString("42124ad06e2723bc45ad55138a995280e656736c"))
                .body("[2].'payload'.'commits'.size()", equalTo(3))
                .body("[2].'payload'.'commits'[0].'sha'", containsString("8730ba180c64f451f135dd051118ea53fdcfb1a3"))
                .body("[2].'payload'.'commits'[0].'author'.'email'", containsString("pietka.michau@gmail.com"))
                .body("[2].'payload'.'commits'[0].'author'.'name'", containsString("M1ch4U"))
                .body("[2].'payload'.'commits'[0].'message'", containsString("Update README.md\n\nnew first change."))
                .body("[2].'payload'.'commits'[0].'distinct'", equalTo(false))
                .body("[2].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/M1ch4U/hello-world/commits/8730ba180c64f451f135dd051118ea53fdcfb1a3"))
                .body("[2].'payload'.'commits'[1].'sha'", containsString("e76b55a447490a3f0a49e73f187771178fffd741"))
                .body("[2].'payload'.'commits'[1].'author'.'email'", containsString("pietka.michau@gmail.com"))
                .body("[2].'payload'.'commits'[1].'author'.'name'", containsString("Michał Piętka"))
                .body("[2].'payload'.'commits'[1].'message'", containsString("Merge remote-tracking branch 'remotes/origin/readme-edits'"))
                .body("[2].'payload'.'commits'[1].'distinct'", equalTo(true))
                .body("[2].'payload'.'commits'[1].'url'", containsString("https://api.github.com/repos/M1ch4U/hello-world/commits/e76b55a447490a3f0a49e73f187771178fffd741"))
                .body("[2].'payload'.'commits'[2].'sha'", containsString("84d39eab2e4abeed1b1cf39e824584d358072166"))
                .body("[2].'payload'.'commits'[2].'author'.'email'", containsString("pietka.michau@gmail.com"))
                .body("[2].'payload'.'commits'[2].'author'.'name'", containsString("Michał Piętka"))
                .body("[2].'payload'.'commits'[2].'message'", containsString("Merge branch 'master' of https://github.com/M1ch4U/hello-world"))
                .body("[2].'payload'.'commits'[2].'distinct'", equalTo(true))
                .body("[2].'payload'.'commits'[2].'url'", containsString("https://api.github.com/repos/M1ch4U/hello-world/commits/84d39eab2e4abeed1b1cf39e824584d358072166"))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:47:53Z"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/U8pZEjG/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gitignore/templates")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(127))
                .body("", hasItems("Actionscript", "Ada", "Agda", "Android", "AppEngine", "AppceleratorTitanium", "ArchLinuxPackages", "Autotools", "C", "C++", "CFWheels", "CMake", "CUDA", "CakePHP", "ChefCookbook", "Clojure", "CodeIgniter", "CommonLisp", "Composer", "Concrete5", "Coq", "CraftCMS", "D", "DM", "Dart", "Delphi", "Drupal", "EPiServer", "Eagle", "Elisp", "Elixir", "Elm", "Erlang", "ExpressionEngine", "ExtJs", "Fancy", "Finale", "ForceDotCom", "Fortran", "FuelPHP", "GWT", "GitBook", "Go", "Godot", "Gradle", "Grails", "Haskell", "IGORPro", "Idris", "JENKINS_HOME", "Java", "Jboss", "Jekyll", "Joomla", "Julia", "KiCAD", "Kohana", "Kotlin", "LabVIEW", "Laravel", "Leiningen", "LemonStand", "Lilypond", "Lithium", "Lua", "Magento", "Maven", "Mercury", "MetaProgrammingSystem", "Nim", "Node", "OCaml", "Objective-C", "Opa", "OracleForms", "Packer", "Perl", "Perl6", "Phalcon", "PlayFramework", "Plone", "Prestashop", "Processing", "PureScript", "Python", "Qooxdoo", "Qt", "R", "ROS", "Rails", "RhodesRhomobile", "Ruby", "Rust", "SCons", "Sass", "Scala", "Scheme", "Scrivener", "Sdcc", "SeamGen", "SketchUp", "Smalltalk", "SugarCRM", "Swift", "Symfony", "SymphonyCMS", "TeX", "Terraform", "Textpattern", "TurboGears2", "Typo3", "Umbraco", "Unity", "UnrealEngine", "VVVV", "VisualStudio", "Waf", "WordPress", "Xojo", "Yeoman", "Yii", "ZendFramework", "Zephir", "gcov", "nanoc", "opencart", "stella"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"laugh\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/MOdoyhgl/j_asid/comments/KYqWdHheWu9ewbNy/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 415, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"EHeLxAt\", " + 
                    " \"iK1z\", " + 
                    " \"QKoardlCjdwoS\", " + 
                    " \"4OM\", " + 
                    " \"mMckJcEKkNAEe5O7\" " + 
                    " ], " + 
                    " \"Operations\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/organizations/bhBYE5RLJdBDtfK/Users/LaAO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/k8yC_6fx3opU2o/migrations/j29RD/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/feeds")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'timeline_url'", containsString("https://github.com/timeline"))
                .body("'user_url'", containsString("https://github.com/{user}"))
                .body("'repository_discussions_url'", containsString("https://github.com/{user}/{repo}/discussions"))
                .body("'repository_discussions_category_url'", containsString("https://github.com/{user}/{repo}/discussions/categories/{category}"))
                .body("'current_user_public_url'", containsString("https://github.com/painsAgains"))
                .body("'current_user_url'", containsString("https://github.com/painsAgains.private.atom?token=AL2PI6ZROE3LM3UM2AB4IW6CHPSC2"))
                .body("'current_user_actor_url'", containsString("https://github.com/painsAgains.private.actor.atom?token=AL2PI64M4M6QX7B2SGJJZIGCHPSC2"))
                .body("'current_user_organization_url'", containsString(""))
                .body("'current_user_organization_urls'.size()", equalTo(0))
                .body("'security_advisories_url'", containsString("https://github.com/security-advisories"))
                .body("'_links'.'timeline'.'href'", containsString("https://github.com/timeline"))
                .body("'_links'.'timeline'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'user'.'href'", containsString("https://github.com/{user}"))
                .body("'_links'.'user'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'repository_discussions'.'href'", containsString("https://github.com/{user}/{repo}/discussions"))
                .body("'_links'.'repository_discussions'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'repository_discussions_category'.'href'", containsString("https://github.com/{user}/{repo}/discussions/categories/{category}"))
                .body("'_links'.'repository_discussions_category'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'current_user_public'.'href'", containsString("https://github.com/painsAgains"))
                .body("'_links'.'current_user_public'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'current_user'.'href'", containsString("https://github.com/painsAgains.private.atom?token=AL2PI6ZROE3LM3UM2AB4IW6CHPSC2"))
                .body("'_links'.'current_user'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'current_user_actor'.'href'", containsString("https://github.com/painsAgains.private.actor.atom?token=AL2PI64M4M6QX7B2SGJJZIGCHPSC2"))
                .body("'_links'.'current_user_actor'.'type'", containsString("application/atom+xml"))
                .body("'_links'.'current_user_organization'.'href'", containsString(""))
                .body("'_links'.'current_user_organization'.'type'", containsString(""))
                .body("'_links'.'current_user_organizations'.size()", equalTo(0))
                .body("'_links'.'security_advisories'.'href'", containsString("https://github.com/security-advisories"))
                .body("'_links'.'security_advisories'.'type'", containsString("application/atom+xml"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("timeline_url", "user_url", "_links")));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/72lbEGYxUyiNubA/1/actions/workflows/Idy6Wml_vy3/disable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/G/blocks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/iYgl/XI7r6fu38NHWBy/hooks/A7L/pings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#ping-a-repository-webhook"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/F2pkA/followers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-followers-of-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"eixjfAlYZd1o0Gv5\", " + 
                    " \"details_url\": \"1\", " + 
                    " \"external_id\": \"iCQvVDRuiFV1\", " + 
                    " \"started_at\": \"xo\", " + 
                    " \"status\": \"EVOMASTER\", " + 
                    " \"output\": { " + 
                    " \"summary\": \"Bn7bgx03z\", " + 
                    " \"images\": [ " + 
                    " { " + 
                    " \"alt\": \"h_5W\", " + 
                    " \"image_url\": \"YA0y_dhLh\", " + 
                    " \"caption\": \"gjS\" " + 
                    " }, " + 
                    " { " + 
                    " \"alt\": \"teln0JuNKcZQ7v44\", " + 
                    " \"image_url\": \"M2QalZz_pTlcA\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/s3KeN8pr2a2u/UvecCqvdsV5LJ0Q/check-runs/oStSDejA9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/issues?" + 
                    "state=all&" + 
                    "sort=updated")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"github_owned_allowed\": false, " + 
                    " \"verified_allowed\": true, " + 
                    " \"patterns_allowed\": [ " + 
                    " \"6\", " + 
                    " \"r\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/1dAI7tJ5sao5523a/faLIYfA/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/dugQVry/GzVnvag0FMl/git/refs/IXm6X")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nFor 'links/2/schema', nil is not an object."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#update-a-reference"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"xfniIupSWxfW\" " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/nnpM77w/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-an-organization-project"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/9cPWF/iCLYi4r/commits/R/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#create-a-commit-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/LylfIVbwqnfZc/tokens/JAoZprjod")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/issues?" + 
                    "q=ZDRcMKDyt1Fv7Xzu&" + 
                    "sort=created&" + 
                    "order=desc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/266/repos/ps/6Th9V0pz5z32")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/e7ramnI/subscriptions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/QfPuwZmex/a61Bbrcc_kEJK9rP/branches/UFWNTg1/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#list-teams-with-access-to-the-protected-branch"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/emojis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'+1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8"))
                .body("'-1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8"))
                .body("'100'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8"))
                .body("'1234'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8"))
                .body("'1st_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f947.png?v8"))
                .body("'2nd_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f948.png?v8"))
                .body("'3rd_place_medal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f949.png?v8"))
                .body("'8ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8"))
                .body("'a'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8"))
                .body("'ab'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8"))
                .body("'abacus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ee.png?v8"))
                .body("'abc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8"))
                .body("'abcd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8"))
                .body("'accept'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8"))
                .body("'accessibility'", containsString("https://github.githubassets.com/images/icons/emoji/accessibility.png?v8"))
                .body("'accordion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa97.png?v8"))
                .body("'adhesive_bandage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa79.png?v8"))
                .body("'adult'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1.png?v8"))
                .body("'aerial_tramway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8"))
                .body("'afghanistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1eb.png?v8"))
                .body("'airplane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8"))
                .body("'aland_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fd.png?v8"))
                .body("'alarm_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8"))
                .body("'albania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f1.png?v8"))
                .body("'alembic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2697.png?v8"))
                .body("'algeria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ff.png?v8"))
                .body("'alien'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8"))
                .body("'ambulance'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8"))
                .body("'american_samoa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f8.png?v8"))
                .body("'amphora'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3fa.png?v8"))
                .body("'anatomical_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac0.png?v8"))
                .body("'anchor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8"))
                .body("'andorra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1e9.png?v8"))
                .body("'angel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8"))
                .body("'anger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8"))
                .body("'angola'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f4.png?v8"))
                .body("'angry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8"))
                .body("'anguilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ee.png?v8"))
                .body("'anguished'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8"))
                .body("'ant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8"))
                .body("'antarctica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f6.png?v8"))
                .body("'antigua_barbuda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ec.png?v8"))
                .body("'apple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8"))
                .body("'aquarius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8"))
                .body("'argentina'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f7.png?v8"))
                .body("'aries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8"))
                .body("'armenia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f2.png?v8"))
                .body("'arrow_backward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8"))
                .body("'arrow_double_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8"))
                .body("'arrow_double_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8"))
                .body("'arrow_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8"))
                .body("'arrow_down_small'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8"))
                .body("'arrow_forward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8"))
                .body("'arrow_heading_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8"))
                .body("'arrow_heading_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8"))
                .body("'arrow_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8"))
                .body("'arrow_lower_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8"))
                .body("'arrow_lower_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8"))
                .body("'arrow_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8"))
                .body("'arrow_right_hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8"))
                .body("'arrow_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8"))
                .body("'arrow_up_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8"))
                .body("'arrow_up_small'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8"))
                .body("'arrow_upper_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8"))
                .body("'arrow_upper_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8"))
                .body("'arrows_clockwise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8"))
                .body("'arrows_counterclockwise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8"))
                .body("'art'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8"))
                .body("'articulated_lorry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8"))
                .body("'artificial_satellite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8"))
                .body("'artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3a8.png?v8"))
                .body("'aruba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fc.png?v8"))
                .body("'ascension_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1e8.png?v8"))
                .body("'asterisk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/002a-20e3.png?v8"))
                .body("'astonished'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8"))
                .body("'astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f680.png?v8"))
                .body("'athletic_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45f.png?v8"))
                .body("'atm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8"))
                .body("'atom'", containsString("https://github.githubassets.com/images/icons/emoji/atom.png?v8"))
                .body("'atom_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/269b.png?v8"))
                .body("'australia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1fa.png?v8"))
                .body("'austria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1f9.png?v8"))
                .body("'auto_rickshaw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fa.png?v8"))
                .body("'avocado'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f951.png?v8"))
                .body("'axe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa93.png?v8"))
                .body("'azerbaijan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ff.png?v8"))
                .body("'b'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8"))
                .body("'baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8"))
                .body("'baby_bottle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8"))
                .body("'baby_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8"))
                .body("'baby_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8"))
                .body("'back'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f519.png?v8"))
                .body("'bacon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f953.png?v8"))
                .body("'badger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a1.png?v8"))
                .body("'badminton'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f8.png?v8"))
                .body("'bagel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96f.png?v8"))
                .body("'baggage_claim'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8"))
                .body("'baguette_bread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f956.png?v8"))
                .body("'bahamas'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f8.png?v8"))
                .body("'bahrain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ed.png?v8"))
                .body("'balance_scale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2696.png?v8"))
                .body("'bald_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b2.png?v8"))
                .body("'bald_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b2.png?v8"))
                .body("'ballet_shoes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa70.png?v8"))
                .body("'balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8"))
                .body("'ballot_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5f3.png?v8"))
                .body("'ballot_box_with_check'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8"))
                .body("'bamboo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8"))
                .body("'banana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8"))
                .body("'bangbang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8"))
                .body("'bangladesh'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e9.png?v8"))
                .body("'banjo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa95.png?v8"))
                .body("'bank'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8"))
                .body("'bar_chart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8"))
                .body("'barbados'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e7.png?v8"))
                .body("'barber'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8"))
                .body("'baseball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8"))
                .body("'basecamp'", containsString("https://github.githubassets.com/images/icons/emoji/basecamp.png?v8"))
                .body("'basecampy'", containsString("https://github.githubassets.com/images/icons/emoji/basecampy.png?v8"))
                .body("'basket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fa.png?v8"))
                .body("'basketball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8"))
                .body("'basketball_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2642.png?v8"))
                .body("'basketball_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2640.png?v8"))
                .body("'bat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f987.png?v8"))
                .body("'bath'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8"))
                .body("'bathtub'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8"))
                .body("'battery'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8"))
                .body("'beach_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d6.png?v8"))
                .body("'bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8"))
                .body("'bearded_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4.png?v8"))
                .body("'beaver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ab.png?v8"))
                .body("'bed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cf.png?v8"))
                .body("'bee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8"))
                .body("'beer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8"))
                .body("'beers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8"))
                .body("'beetle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab2.png?v8"))
                .body("'beginner'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8"))
                .body("'belarus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fe.png?v8"))
                .body("'belgium'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ea.png?v8"))
                .body("'belize'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ff.png?v8"))
                .body("'bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8"))
                .body("'bell_pepper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad1.png?v8"))
                .body("'bellhop_bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ce.png?v8"))
                .body("'benin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ef.png?v8"))
                .body("'bento'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8"))
                .body("'bermuda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f2.png?v8"))
                .body("'beverage_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c3.png?v8"))
                .body("'bhutan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f9.png?v8"))
                .body("'bicyclist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8"))
                .body("'bike'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8"))
                .body("'biking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4-2642.png?v8"))
                .body("'biking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b4-2640.png?v8"))
                .body("'bikini'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8"))
                .body("'billed_cap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e2.png?v8"))
                .body("'biohazard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2623.png?v8"))
                .body("'bird'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8"))
                .body("'birthday'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8"))
                .body("'bison'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ac.png?v8"))
                .body("'black_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f408-2b1b.png?v8"))
                .body("'black_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8"))
                .body("'black_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4.png?v8"))
                .body("'black_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a4.png?v8"))
                .body("'black_joker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8"))
                .body("'black_large_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b1b.png?v8"))
                .body("'black_medium_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fe.png?v8"))
                .body("'black_medium_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fc.png?v8"))
                .body("'black_nib'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8"))
                .body("'black_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25aa.png?v8"))
                .body("'black_square_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8"))
                .body("'blond_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2642.png?v8"))
                .body("'blond_haired_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471.png?v8"))
                .body("'blond_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2640.png?v8"))
                .body("'blonde_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f471-2640.png?v8"))
                .body("'blossom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8"))
                .body("'blowfish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8"))
                .body("'blue_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8"))
                .body("'blue_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8"))
                .body("'blue_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8"))
                .body("'blue_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e6.png?v8"))
                .body("'blueberries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad0.png?v8"))
                .body("'blush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8"))
                .body("'boar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8"))
                .body("'boat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8"))
                .body("'bolivia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f4.png?v8"))
                .body("'bomb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8"))
                .body("'bone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b4.png?v8"))
                .body("'book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8"))
                .body("'bookmark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8"))
                .body("'bookmark_tabs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8"))
                .body("'books'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8"))
                .body("'boom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8"))
                .body("'boomerang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa83.png?v8"))
                .body("'boot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8"))
                .body("'bosnia_herzegovina'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1e6.png?v8"))
                .body("'botswana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fc.png?v8"))
                .body("'bouncing_ball_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2642.png?v8"))
                .body("'bouncing_ball_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9.png?v8"))
                .body("'bouncing_ball_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f9-2640.png?v8"))
                .body("'bouquet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8"))
                .body("'bouvet_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1fb.png?v8"))
                .body("'bow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8"))
                .body("'bow_and_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f9.png?v8"))
                .body("'bowing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647-2642.png?v8"))
                .body("'bowing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f647-2640.png?v8"))
                .body("'bowl_with_spoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f963.png?v8"))
                .body("'bowling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8"))
                .body("'bowtie'", containsString("https://github.githubassets.com/images/icons/emoji/bowtie.png?v8"))
                .body("'boxing_glove'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94a.png?v8"))
                .body("'boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8"))
                .body("'brain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e0.png?v8"))
                .body("'brazil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f7.png?v8"))
                .body("'bread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8"))
                .body("'breast_feeding'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f931.png?v8"))
                .body("'bricks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f1.png?v8"))
                .body("'bride_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2640.png?v8"))
                .body("'bridge_at_night'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8"))
                .body("'briefcase'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8"))
                .body("'british_indian_ocean_territory'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f4.png?v8"))
                .body("'british_virgin_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ec.png?v8"))
                .body("'broccoli'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f966.png?v8"))
                .body("'broken_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8"))
                .body("'broom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f9.png?v8"))
                .body("'brown_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e4.png?v8"))
                .body("'brown_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90e.png?v8"))
                .body("'brown_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7eb.png?v8"))
                .body("'brunei'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f3.png?v8"))
                .body("'bubble_tea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cb.png?v8"))
                .body("'bucket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa3.png?v8"))
                .body("'bug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8"))
                .body("'building_construction'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d7.png?v8"))
                .body("'bulb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8"))
                .body("'bulgaria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ec.png?v8"))
                .body("'bullettrain_front'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8"))
                .body("'bullettrain_side'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8"))
                .body("'burkina_faso'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1eb.png?v8"))
                .body("'burrito'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32f.png?v8"))
                .body("'burundi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1ee.png?v8"))
                .body("'bus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8"))
                .body("'business_suit_levitating'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f574.png?v8"))
                .body("'busstop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8"))
                .body("'bust_in_silhouette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8"))
                .body("'busts_in_silhouette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8"))
                .body("'butter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c8.png?v8"))
                .body("'butterfly'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98b.png?v8"))
                .body("'cactus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8"))
                .body("'cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8"))
                .body("'calendar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8"))
                .body("'call_me_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f919.png?v8"))
                .body("'calling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8"))
                .body("'cambodia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ed.png?v8"))
                .body("'camel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8"))
                .body("'camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8"))
                .body("'camera_flash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f8.png?v8"))
                .body("'cameroon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f2.png?v8"))
                .body("'camping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d5.png?v8"))
                .body("'canada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e6.png?v8"))
                .body("'canary_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1e8.png?v8"))
                .body("'cancer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8"))
                .body("'candle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f56f.png?v8"))
                .body("'candy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8"))
                .body("'canned_food'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96b.png?v8"))
                .body("'canoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f6.png?v8"))
                .body("'cape_verde'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fb.png?v8"))
                .body("'capital_abcd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8"))
                .body("'capricorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8"))
                .body("'car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8"))
                .body("'card_file_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c3.png?v8"))
                .body("'card_index'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8"))
                .body("'card_index_dividers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c2.png?v8"))
                .body("'caribbean_netherlands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f6.png?v8"))
                .body("'carousel_horse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8"))
                .body("'carpentry_saw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9a.png?v8"))
                .body("'carrot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f955.png?v8"))
                .body("'cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938.png?v8"))
                .body("'cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8"))
                .body("'cat2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8"))
                .body("'cayman_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1fe.png?v8"))
                .body("'cd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8"))
                .body("'central_african_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1eb.png?v8"))
                .body("'ceuta_melilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1e6.png?v8"))
                .body("'chad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e9.png?v8"))
                .body("'chains'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d3.png?v8"))
                .body("'chair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa91.png?v8"))
                .body("'champagne'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37e.png?v8"))
                .body("'chart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8"))
                .body("'chart_with_downwards_trend'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8"))
                .body("'chart_with_upwards_trend'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8"))
                .body("'checkered_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8"))
                .body("'cheese'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c0.png?v8"))
                .body("'cherries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8"))
                .body("'cherry_blossom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8"))
                .body("'chess_pawn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/265f.png?v8"))
                .body("'chestnut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8"))
                .body("'chicken'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8"))
                .body("'child'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d2.png?v8"))
                .body("'children_crossing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8"))
                .body("'chile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f1.png?v8"))
                .body("'chipmunk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png?v8"))
                .body("'chocolate_bar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8"))
                .body("'chopsticks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f962.png?v8"))
                .body("'christmas_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fd.png?v8"))
                .body("'christmas_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8"))
                .body("'church'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8"))
                .body("'cinema'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8"))
                .body("'circus_tent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8"))
                .body("'city_sunrise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8"))
                .body("'city_sunset'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8"))
                .body("'cityscape'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d9.png?v8"))
                .body("'cl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8"))
                .body("'clamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5dc.png?v8"))
                .body("'clap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8"))
                .body("'clapper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8"))
                .body("'classical_building'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3db.png?v8"))
                .body("'climbing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7.png?v8"))
                .body("'climbing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7-2642.png?v8"))
                .body("'climbing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d7-2640.png?v8"))
                .body("'clinking_glasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f942.png?v8"))
                .body("'clipboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8"))
                .body("'clipperton_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f5.png?v8"))
                .body("'clock1'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8"))
                .body("'clock10'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8"))
                .body("'clock1030'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8"))
                .body("'clock11'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8"))
                .body("'clock1130'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8"))
                .body("'clock12'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8"))
                .body("'clock1230'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8"))
                .body("'clock130'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8"))
                .body("'clock2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8"))
                .body("'clock230'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8"))
                .body("'clock3'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8"))
                .body("'clock330'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8"))
                .body("'clock4'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8"))
                .body("'clock430'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8"))
                .body("'clock5'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8"))
                .body("'clock530'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8"))
                .body("'clock6'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8"))
                .body("'clock630'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8"))
                .body("'clock7'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8"))
                .body("'clock730'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8"))
                .body("'clock8'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8"))
                .body("'clock830'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8"))
                .body("'clock9'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8"))
                .body("'clock930'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8"))
                .body("'closed_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8"))
                .body("'closed_lock_with_key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8"))
                .body("'closed_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8"))
                .body("'cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8"))
                .body("'cloud_with_lightning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f329.png?v8"))
                .body("'cloud_with_lightning_and_rain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c8.png?v8"))
                .body("'cloud_with_rain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f327.png?v8"))
                .body("'cloud_with_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f328.png?v8"))
                .body("'clown_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f921.png?v8"))
                .body("'clubs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8"))
                .body("'cn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8"))
                .body("'coat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e5.png?v8"))
                .body("'cockroach'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab3.png?v8"))
                .body("'cocktail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8"))
                .body("'coconut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f965.png?v8"))
                .body("'cocos_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e8.png?v8"))
                .body("'coffee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8"))
                .body("'coffin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26b0.png?v8"))
                .body("'coin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa99.png?v8"))
                .body("'cold_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f976.png?v8"))
                .body("'cold_sweat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8"))
                .body("'collision'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8"))
                .body("'colombia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f4.png?v8"))
                .body("'comet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2604.png?v8"))
                .body("'comoros'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f2.png?v8"))
                .body("'compass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ed.png?v8"))
                .body("'computer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8"))
                .body("'computer_mouse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5b1.png?v8"))
                .body("'confetti_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8"))
                .body("'confounded'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8"))
                .body("'confused'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8"))
                .body("'congo_brazzaville'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ec.png?v8"))
                .body("'congo_kinshasa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1e9.png?v8"))
                .body("'congratulations'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8"))
                .body("'construction'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8"))
                .body("'construction_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8"))
                .body("'construction_worker_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477-2642.png?v8"))
                .body("'construction_worker_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f477-2640.png?v8"))
                .body("'control_knobs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39b.png?v8"))
                .body("'convenience_store'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8"))
                .body("'cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f373.png?v8"))
                .body("'cook_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f0.png?v8"))
                .body("'cookie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8"))
                .body("'cool'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8"))
                .body("'cop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8"))
                .body("'copyright'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8"))
                .body("'corn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8"))
                .body("'costa_rica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f7.png?v8"))
                .body("'cote_divoire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ee.png?v8"))
                .body("'couch_and_lamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cb.png?v8"))
                .body("'couple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8"))
                .body("'couple_with_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8"))
                .body("'couple_with_heart_man_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2764-1f468.png?v8"))
                .body("'couple_with_heart_woman_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f468.png?v8"))
                .body("'couple_with_heart_woman_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f469.png?v8"))
                .body("'couplekiss'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8"))
                .body("'couplekiss_man_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2764-1f48b-1f468.png?v8"))
                .body("'couplekiss_man_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8"))
                .body("'couplekiss_woman_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f469.png?v8"))
                .body("'cow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8"))
                .body("'cow2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8"))
                .body("'cowboy_hat_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f920.png?v8"))
                .body("'crab'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f980.png?v8"))
                .body("'crayon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58d.png?v8"))
                .body("'credit_card'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8"))
                .body("'crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f319.png?v8"))
                .body("'cricket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f997.png?v8"))
                .body("'cricket_game'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cf.png?v8"))
                .body("'croatia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f7.png?v8"))
                .body("'crocodile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8"))
                .body("'croissant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f950.png?v8"))
                .body("'crossed_fingers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91e.png?v8"))
                .body("'crossed_flags'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8"))
                .body("'crossed_swords'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2694.png?v8"))
                .body("'crown'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8"))
                .body("'cry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8"))
                .body("'crying_cat_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8"))
                .body("'crystal_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8"))
                .body("'cuba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fa.png?v8"))
                .body("'cucumber'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f952.png?v8"))
                .body("'cup_with_straw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f964.png?v8"))
                .body("'cupcake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c1.png?v8"))
                .body("'cupid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8"))
                .body("'curacao'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fc.png?v8"))
                .body("'curling_stone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94c.png?v8"))
                .body("'curly_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b1.png?v8"))
                .body("'curly_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b1.png?v8"))
                .body("'curly_loop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8"))
                .body("'currency_exchange'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8"))
                .body("'curry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8"))
                .body("'cursing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92c.png?v8"))
                .body("'custard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8"))
                .body("'customs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8"))
                .body("'cut_of_meat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f969.png?v8"))
                .body("'cyclone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8"))
                .body("'cyprus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1fe.png?v8"))
                .body("'czech_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ff.png?v8"))
                .body("'dagger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e1.png?v8"))
                .body("'dancer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8"))
                .body("'dancers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8"))
                .body("'dancing_men'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f-2642.png?v8"))
                .body("'dancing_women'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46f-2640.png?v8"))
                .body("'dango'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8"))
                .body("'dark_sunglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f576.png?v8"))
                .body("'dart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8"))
                .body("'dash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8"))
                .body("'date'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8"))
                .body("'de'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8"))
                .body("'deaf_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf-2642.png?v8"))
                .body("'deaf_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf.png?v8"))
                .body("'deaf_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cf-2640.png?v8"))
                .body("'deciduous_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8"))
                .body("'deer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98c.png?v8"))
                .body("'denmark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f0.png?v8"))
                .body("'department_store'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8"))
                .body("'dependabot'", containsString("https://github.githubassets.com/images/icons/emoji/dependabot.png?v8"))
                .body("'derelict_house'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3da.png?v8"))
                .body("'desert'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3dc.png?v8"))
                .body("'desert_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3dd.png?v8"))
                .body("'desktop_computer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png?v8"))
                .body("'detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575.png?v8"))
                .body("'diamond_shape_with_a_dot_inside'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8"))
                .body("'diamonds'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8"))
                .body("'diego_garcia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ec.png?v8"))
                .body("'disappointed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8"))
                .body("'disappointed_relieved'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8"))
                .body("'disguised_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f978.png?v8"))
                .body("'diving_mask'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93f.png?v8"))
                .body("'diya_lamp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa94.png?v8"))
                .body("'dizzy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8"))
                .body("'dizzy_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8"))
                .body("'djibouti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ef.png?v8"))
                .body("'dna'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ec.png?v8"))
                .body("'do_not_litter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8"))
                .body("'dodo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a4.png?v8"))
                .body("'dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8"))
                .body("'dog2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8"))
                .body("'dollar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8"))
                .body("'dolls'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8"))
                .body("'dolphin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8"))
                .body("'dominica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f2.png?v8"))
                .body("'dominican_republic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1f4.png?v8"))
                .body("'door'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8"))
                .body("'doughnut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8"))
                .body("'dove'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54a.png?v8"))
                .body("'dragon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8"))
                .body("'dragon_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8"))
                .body("'dress'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8"))
                .body("'dromedary_camel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8"))
                .body("'drooling_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f924.png?v8"))
                .body("'drop_of_blood'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa78.png?v8"))
                .body("'droplet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8"))
                .body("'drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f941.png?v8"))
                .body("'duck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f986.png?v8"))
                .body("'dumpling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95f.png?v8"))
                .body("'dvd'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8"))
                .body("'e-mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e7.png?v8"))
                .body("'eagle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f985.png?v8"))
                .body("'ear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8"))
                .body("'ear_of_rice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8"))
                .body("'ear_with_hearing_aid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bb.png?v8"))
                .body("'earth_africa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8"))
                .body("'earth_americas'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8"))
                .body("'earth_asia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8"))
                .body("'ecuador'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1e8.png?v8"))
                .body("'egg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8"))
                .body("'eggplant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8"))
                .body("'egypt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ec.png?v8"))
                .body("'eight'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8"))
                .body("'eight_pointed_black_star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8"))
                .body("'eight_spoked_asterisk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8"))
                .body("'eject_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23cf.png?v8"))
                .body("'el_salvador'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fb.png?v8"))
                .body("'electric_plug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8"))
                .body("'electron'", containsString("https://github.githubassets.com/images/icons/emoji/electron.png?v8"))
                .body("'elephant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8"))
                .body("'elevator'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d7.png?v8"))
                .body("'elf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd.png?v8"))
                .body("'elf_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd-2642.png?v8"))
                .body("'elf_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dd-2640.png?v8"))
                .body("'email'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e7.png?v8"))
                .body("'end'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8"))
                .body("'england'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0065-e006e-e0067-e007f.png?v8"))
                .body("'envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8"))
                .body("'envelope_with_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e9.png?v8"))
                .body("'equatorial_guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f6.png?v8"))
                .body("'eritrea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f7.png?v8"))
                .body("'es'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8"))
                .body("'estonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ea.png?v8"))
                .body("'ethiopia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f9.png?v8"))
                .body("'eu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1fa.png?v8"))
                .body("'euro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8"))
                .body("'european_castle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8"))
                .body("'european_post_office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8"))
                .body("'european_union'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1fa.png?v8"))
                .body("'evergreen_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8"))
                .body("'exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8"))
                .body("'exploding_head'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92f.png?v8"))
                .body("'expressionless'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8"))
                .body("'eye'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f441.png?v8"))
                .body("'eye_speech_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f441-1f5e8.png?v8"))
                .body("'eyeglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8"))
                .body("'eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8"))
                .body("'face_exhaling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62e-1f4a8.png?v8"))
                .body("'face_in_clouds'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f636-1f32b.png?v8"))
                .body("'face_with_head_bandage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f915.png?v8"))
                .body("'face_with_spiral_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f635-1f4ab.png?v8"))
                .body("'face_with_thermometer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f912.png?v8"))
                .body("'facepalm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926.png?v8"))
                .body("'facepunch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'factory'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8"))
                .body("'factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3ed.png?v8"))
                .body("'fairy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da.png?v8"))
                .body("'fairy_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da-2642.png?v8"))
                .body("'fairy_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9da-2640.png?v8"))
                .body("'falafel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c6.png?v8"))
                .body("'falkland_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f0.png?v8"))
                .body("'fallen_leaf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8"))
                .body("'family'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8"))
                .body("'family_man_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f466.png?v8"))
                .body("'family_man_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f466-1f466.png?v8"))
                .body("'family_man_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467.png?v8"))
                .body("'family_man_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467-1f466.png?v8"))
                .body("'family_man_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f467-1f467.png?v8"))
                .body("'family_man_man_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f466.png?v8"))
                .body("'family_man_man_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f466-1f466.png?v8"))
                .body("'family_man_man_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467.png?v8"))
                .body("'family_man_man_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467-1f466.png?v8"))
                .body("'family_man_man_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f468-1f467-1f467.png?v8"))
                .body("'family_man_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f466.png?v8"))
                .body("'family_man_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f466-1f466.png?v8"))
                .body("'family_man_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467.png?v8"))
                .body("'family_man_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467-1f466.png?v8"))
                .body("'family_man_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f469-1f467-1f467.png?v8"))
                .body("'family_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f466.png?v8"))
                .body("'family_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f466-1f466.png?v8"))
                .body("'family_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467.png?v8"))
                .body("'family_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467-1f466.png?v8"))
                .body("'family_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f467-1f467.png?v8"))
                .body("'family_woman_woman_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f466.png?v8"))
                .body("'family_woman_woman_boy_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f466-1f466.png?v8"))
                .body("'family_woman_woman_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467.png?v8"))
                .body("'family_woman_woman_girl_boy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467-1f466.png?v8"))
                .body("'family_woman_woman_girl_girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f469-1f467-1f467.png?v8"))
                .body("'farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f33e.png?v8"))
                .body("'faroe_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f4.png?v8"))
                .body("'fast_forward'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8"))
                .body("'fax'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8"))
                .body("'fearful'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8"))
                .body("'feather'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab6.png?v8"))
                .body("'feelsgood'", containsString("https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8"))
                .body("'feet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8"))
                .body("'female_detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575-2640.png?v8"))
                .body("'female_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2640.png?v8"))
                .body("'ferris_wheel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8"))
                .body("'ferry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f4.png?v8"))
                .body("'field_hockey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d1.png?v8"))
                .body("'fiji'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1ef.png?v8"))
                .body("'file_cabinet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5c4.png?v8"))
                .body("'file_folder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8"))
                .body("'film_projector'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fd.png?v8"))
                .body("'film_strip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39e.png?v8"))
                .body("'finland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1ee.png?v8"))
                .body("'finnadie'", containsString("https://github.githubassets.com/images/icons/emoji/finnadie.png?v8"))
                .body("'fire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8"))
                .body("'fire_engine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8"))
                .body("'fire_extinguisher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ef.png?v8"))
                .body("'firecracker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e8.png?v8"))
                .body("'firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f692.png?v8"))
                .body("'fireworks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8"))
                .body("'first_quarter_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8"))
                .body("'first_quarter_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8"))
                .body("'fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8"))
                .body("'fish_cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8"))
                .body("'fishing_pole_and_fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8"))
                .body("'fishsticks'", containsString("https://github.githubassets.com/images/icons/emoji/fishsticks.png?v8"))
                .body("'fist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8"))
                .body("'fist_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91b.png?v8"))
                .body("'fist_oncoming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'fist_raised'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8"))
                .body("'fist_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91c.png?v8"))
                .body("'five'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8"))
                .body("'flags'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8"))
                .body("'flamingo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a9.png?v8"))
                .body("'flashlight'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8"))
                .body("'flat_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97f.png?v8"))
                .body("'flatbread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad3.png?v8"))
                .body("'fleur_de_lis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/269c.png?v8"))
                .body("'flight_arrival'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ec.png?v8"))
                .body("'flight_departure'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6eb.png?v8"))
                .body("'flipper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8"))
                .body("'floppy_disk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8"))
                .body("'flower_playing_cards'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8"))
                .body("'flushed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8"))
                .body("'fly'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab0.png?v8"))
                .body("'flying_disc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94f.png?v8"))
                .body("'flying_saucer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f8.png?v8"))
                .body("'fog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32b.png?v8"))
                .body("'foggy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8"))
                .body("'fondue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad5.png?v8"))
                .body("'foot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b6.png?v8"))
                .body("'football'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8"))
                .body("'footprints'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f463.png?v8"))
                .body("'fork_and_knife'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8"))
                .body("'fortune_cookie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f960.png?v8"))
                .body("'fountain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8"))
                .body("'fountain_pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58b.png?v8"))
                .body("'four'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8"))
                .body("'four_leaf_clover'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8"))
                .body("'fox_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98a.png?v8"))
                .body("'fr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8"))
                .body("'framed_picture'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png?v8"))
                .body("'free'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8"))
                .body("'french_guiana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1eb.png?v8"))
                .body("'french_polynesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1eb.png?v8"))
                .body("'french_southern_territories'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1eb.png?v8"))
                .body("'fried_egg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f373.png?v8"))
                .body("'fried_shrimp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8"))
                .body("'fries'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8"))
                .body("'frog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8"))
                .body("'frowning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8"))
                .body("'frowning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2639.png?v8"))
                .body("'frowning_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d-2642.png?v8"))
                .body("'frowning_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d.png?v8"))
                .body("'frowning_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64d-2640.png?v8"))
                .body("'fu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8"))
                .body("'fuelpump'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8"))
                .body("'full_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8"))
                .body("'full_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8"))
                .body("'funeral_urn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26b1.png?v8"))
                .body("'gabon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e6.png?v8"))
                .body("'gambia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f2.png?v8"))
                .body("'game_die'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8"))
                .body("'garlic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c4.png?v8"))
                .body("'gb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8"))
                .body("'gear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2699.png?v8"))
                .body("'gem'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8"))
                .body("'gemini'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8"))
                .body("'genie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de.png?v8"))
                .body("'genie_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de-2642.png?v8"))
                .body("'genie_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9de-2640.png?v8"))
                .body("'georgia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ea.png?v8"))
                .body("'ghana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ed.png?v8"))
                .body("'ghost'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8"))
                .body("'gibraltar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ee.png?v8"))
                .body("'gift'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8"))
                .body("'gift_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8"))
                .body("'giraffe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f992.png?v8"))
                .body("'girl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8"))
                .body("'globe_with_meridians'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8"))
                .body("'gloves'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e4.png?v8"))
                .body("'goal_net'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f945.png?v8"))
                .body("'goat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8"))
                .body("'goberserk'", containsString("https://github.githubassets.com/images/icons/emoji/goberserk.png?v8"))
                .body("'godmode'", containsString("https://github.githubassets.com/images/icons/emoji/godmode.png?v8"))
                .body("'goggles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97d.png?v8"))
                .body("'golf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8"))
                .body("'golfing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc.png?v8"))
                .body("'golfing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc-2642.png?v8"))
                .body("'golfing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cc-2640.png?v8"))
                .body("'gorilla'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98d.png?v8"))
                .body("'grapes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8"))
                .body("'greece'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f7.png?v8"))
                .body("'green_apple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8"))
                .body("'green_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8"))
                .body("'green_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png?v8"))
                .body("'green_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8"))
                .body("'green_salad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f957.png?v8"))
                .body("'green_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e9.png?v8"))
                .body("'greenland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f1.png?v8"))
                .body("'grenada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e9.png?v8"))
                .body("'grey_exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8"))
                .body("'grey_question'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8"))
                .body("'grimacing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8"))
                .body("'grin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8"))
                .body("'grinning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8"))
                .body("'guadeloupe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f5.png?v8"))
                .body("'guam'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fa.png?v8"))
                .body("'guard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482.png?v8"))
                .body("'guardsman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8"))
                .body("'guardswoman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f482-2640.png?v8"))
                .body("'guatemala'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f9.png?v8"))
                .body("'guernsey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1ec.png?v8"))
                .body("'guide_dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ae.png?v8"))
                .body("'guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f3.png?v8"))
                .body("'guinea_bissau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fc.png?v8"))
                .body("'guitar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8"))
                .body("'gun'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8"))
                .body("'guyana'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1fe.png?v8"))
                .body("'haircut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8"))
                .body("'haircut_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487-2642.png?v8"))
                .body("'haircut_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f487-2640.png?v8"))
                .body("'haiti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f9.png?v8"))
                .body("'hamburger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8"))
                .body("'hammer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8"))
                .body("'hammer_and_pick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2692.png?v8"))
                .body("'hammer_and_wrench'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8"))
                .body("'hamster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8"))
                .body("'hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8"))
                .body("'hand_over_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92d.png?v8"))
                .body("'handbag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8"))
                .body("'handball_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e.png?v8"))
                .body("'handshake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91d.png?v8"))
                .body("'hankey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'hash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8"))
                .body("'hatched_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8"))
                .body("'hatching_chick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8"))
                .body("'headphones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8"))
                .body("'headstone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa6.png?v8"))
                .body("'health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2695.png?v8"))
                .body("'hear_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8"))
                .body("'heard_mcdonald_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f2.png?v8"))
                .body("'heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8"))
                .body("'heart_decoration'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8"))
                .body("'heart_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8"))
                .body("'heart_eyes_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8"))
                .body("'heart_on_fire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764-1f525.png?v8"))
                .body("'heartbeat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8"))
                .body("'heartpulse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8"))
                .body("'hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8"))
                .body("'heavy_check_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8"))
                .body("'heavy_division_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8"))
                .body("'heavy_dollar_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8"))
                .body("'heavy_exclamation_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8"))
                .body("'heavy_heart_exclamation'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2763.png?v8"))
                .body("'heavy_minus_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8"))
                .body("'heavy_multiplication_x'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8"))
                .body("'heavy_plus_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8"))
                .body("'hedgehog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f994.png?v8"))
                .body("'helicopter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8"))
                .body("'herb'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8"))
                .body("'hibiscus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8"))
                .body("'high_brightness'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8"))
                .body("'high_heel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8"))
                .body("'hiking_boot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97e.png?v8"))
                .body("'hindu_temple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d5.png?v8"))
                .body("'hippopotamus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99b.png?v8"))
                .body("'hocho'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8"))
                .body("'hole'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f573.png?v8"))
                .body("'honduras'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f3.png?v8"))
                .body("'honey_pot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8"))
                .body("'honeybee'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8"))
                .body("'hong_kong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1f0.png?v8"))
                .body("'hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9d.png?v8"))
                .body("'horse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8"))
                .body("'horse_racing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8"))
                .body("'hospital'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8"))
                .body("'hot_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f975.png?v8"))
                .body("'hot_pepper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f336.png?v8"))
                .body("'hotdog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32d.png?v8"))
                .body("'hotel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8"))
                .body("'hotsprings'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8"))
                .body("'hourglass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8"))
                .body("'hourglass_flowing_sand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8"))
                .body("'house'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8"))
                .body("'house_with_garden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8"))
                .body("'houses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d8.png?v8"))
                .body("'hugs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f917.png?v8"))
                .body("'hungary'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ed-1f1fa.png?v8"))
                .body("'hurtrealbad'", containsString("https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8"))
                .body("'hushed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8"))
                .body("'hut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d6.png?v8"))
                .body("'ice_cream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8"))
                .body("'ice_cube'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ca.png?v8"))
                .body("'ice_hockey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d2.png?v8"))
                .body("'ice_skate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f8.png?v8"))
                .body("'icecream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8"))
                .body("'iceland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f8.png?v8"))
                .body("'ideograph_advantage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8"))
                .body("'imp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8"))
                .body("'inbox_tray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8"))
                .body("'incoming_envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8"))
                .body("'india'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f3.png?v8"))
                .body("'indonesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1e9.png?v8"))
                .body("'infinity'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267e.png?v8"))
                .body("'information_desk_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8"))
                .body("'information_source'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8"))
                .body("'innocent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8"))
                .body("'interrobang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8"))
                .body("'iphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8"))
                .body("'iran'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f7.png?v8"))
                .body("'iraq'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f6.png?v8"))
                .body("'ireland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1ea.png?v8"))
                .body("'isle_of_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f2.png?v8"))
                .body("'israel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f1.png?v8"))
                .body("'it'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8"))
                .body("'izakaya_lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8"))
                .body("'jack_o_lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8"))
                .body("'jamaica'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f2.png?v8"))
                .body("'japan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8"))
                .body("'japanese_castle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8"))
                .body("'japanese_goblin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8"))
                .body("'japanese_ogre'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8"))
                .body("'jeans'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8"))
                .body("'jersey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1ea.png?v8"))
                .body("'jigsaw'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e9.png?v8"))
                .body("'jordan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f4.png?v8"))
                .body("'joy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8"))
                .body("'joy_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8"))
                .body("'joystick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f579.png?v8"))
                .body("'jp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8"))
                .body("'judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2696.png?v8"))
                .body("'juggling_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939.png?v8"))
                .body("'kaaba'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54b.png?v8"))
                .body("'kangaroo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f998.png?v8"))
                .body("'kazakhstan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ff.png?v8"))
                .body("'kenya'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ea.png?v8"))
                .body("'key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8"))
                .body("'keyboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2328.png?v8"))
                .body("'keycap_ten'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8"))
                .body("'kick_scooter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f4.png?v8"))
                .body("'kimono'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8"))
                .body("'kiribati'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ee.png?v8"))
                .body("'kiss'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8"))
                .body("'kissing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8"))
                .body("'kissing_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8"))
                .body("'kissing_closed_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8"))
                .body("'kissing_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8"))
                .body("'kissing_smiling_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8"))
                .body("'kite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa81.png?v8"))
                .body("'kiwi_fruit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95d.png?v8"))
                .body("'kneeling_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce-2642.png?v8"))
                .body("'kneeling_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce.png?v8"))
                .body("'kneeling_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ce-2640.png?v8"))
                .body("'knife'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8"))
                .body("'knot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa2.png?v8"))
                .body("'koala'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8"))
                .body("'koko'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8"))
                .body("'kosovo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fd-1f1f0.png?v8"))
                .body("'kr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8"))
                .body("'kuwait'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1fc.png?v8"))
                .body("'kyrgyzstan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1ec.png?v8"))
                .body("'lab_coat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97c.png?v8"))
                .body("'label'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f7.png?v8"))
                .body("'lacrosse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94d.png?v8"))
                .body("'ladder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9c.png?v8"))
                .body("'lady_beetle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8"))
                .body("'lantern'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8"))
                .body("'laos'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e6.png?v8"))
                .body("'large_blue_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8"))
                .body("'large_blue_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8"))
                .body("'large_orange_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8"))
                .body("'last_quarter_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8"))
                .body("'last_quarter_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8"))
                .body("'latin_cross'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/271d.png?v8"))
                .body("'latvia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fb.png?v8"))
                .body("'laughing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8"))
                .body("'leafy_green'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96c.png?v8"))
                .body("'leaves'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8"))
                .body("'lebanon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e7.png?v8"))
                .body("'ledger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8"))
                .body("'left_luggage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8"))
                .body("'left_right_arrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8"))
                .body("'left_speech_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e8.png?v8"))
                .body("'leftwards_arrow_with_hook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8"))
                .body("'leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b5.png?v8"))
                .body("'lemon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8"))
                .body("'leo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8"))
                .body("'leopard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8"))
                .body("'lesotho'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f8.png?v8"))
                .body("'level_slider'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39a.png?v8"))
                .body("'liberia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f7.png?v8"))
                .body("'libra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8"))
                .body("'libya'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fe.png?v8"))
                .body("'liechtenstein'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1ee.png?v8"))
                .body("'light_rail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8"))
                .body("'link'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8"))
                .body("'lion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8"))
                .body("'lips'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8"))
                .body("'lipstick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8"))
                .body("'lithuania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f9.png?v8"))
                .body("'lizard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98e.png?v8"))
                .body("'llama'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f999.png?v8"))
                .body("'lobster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99e.png?v8"))
                .body("'lock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8"))
                .body("'lock_with_ink_pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8"))
                .body("'lollipop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8"))
                .body("'long_drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa98.png?v8"))
                .body("'loop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8"))
                .body("'lotion_bottle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f4.png?v8"))
                .body("'lotus_position'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8.png?v8"))
                .body("'lotus_position_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8-2642.png?v8"))
                .body("'lotus_position_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d8-2640.png?v8"))
                .body("'loud_sound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50a.png?v8"))
                .body("'loudspeaker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8"))
                .body("'love_hotel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8"))
                .body("'love_letter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8"))
                .body("'love_you_gesture'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91f.png?v8"))
                .body("'low_brightness'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8"))
                .body("'luggage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f3.png?v8"))
                .body("'lungs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac1.png?v8"))
                .body("'luxembourg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1fa.png?v8"))
                .body("'lying_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f925.png?v8"))
                .body("'m'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8"))
                .body("'macau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f4.png?v8"))
                .body("'macedonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f0.png?v8"))
                .body("'madagascar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ec.png?v8"))
                .body("'mag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8"))
                .body("'mag_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8"))
                .body("'mage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9.png?v8"))
                .body("'mage_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9-2642.png?v8"))
                .body("'mage_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d9-2640.png?v8"))
                .body("'magic_wand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa84.png?v8"))
                .body("'magnet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f2.png?v8"))
                .body("'mahjong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8"))
                .body("'mailbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8"))
                .body("'mailbox_closed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8"))
                .body("'mailbox_with_mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8"))
                .body("'mailbox_with_no_mail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8"))
                .body("'malawi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fc.png?v8"))
                .body("'malaysia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fe.png?v8"))
                .body("'maldives'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fb.png?v8"))
                .body("'male_detective'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f575-2642.png?v8"))
                .body("'male_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2642.png?v8"))
                .body("'mali'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f1.png?v8"))
                .body("'malta'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f9.png?v8"))
                .body("'mammoth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a3.png?v8"))
                .body("'man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8"))
                .body("'man_artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3a8.png?v8"))
                .body("'man_astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f680.png?v8"))
                .body("'man_beard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4-2642.png?v8"))
                .body("'man_cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938-2642.png?v8"))
                .body("'man_cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f373.png?v8"))
                .body("'man_dancing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f57a.png?v8"))
                .body("'man_facepalming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926-2642.png?v8"))
                .body("'man_factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3ed.png?v8"))
                .body("'man_farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f33e.png?v8"))
                .body("'man_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f37c.png?v8"))
                .body("'man_firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f692.png?v8"))
                .body("'man_health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2695.png?v8"))
                .body("'man_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9bd.png?v8"))
                .body("'man_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9bc.png?v8"))
                .body("'man_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935-2642.png?v8"))
                .body("'man_judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2696.png?v8"))
                .body("'man_juggling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939-2642.png?v8"))
                .body("'man_mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f527.png?v8"))
                .body("'man_office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bc.png?v8"))
                .body("'man_pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-2708.png?v8"))
                .body("'man_playing_handball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e-2642.png?v8"))
                .body("'man_playing_water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d-2642.png?v8"))
                .body("'man_scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f52c.png?v8"))
                .body("'man_shrugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937-2642.png?v8"))
                .body("'man_singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3a4.png?v8"))
                .body("'man_student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f393.png?v8"))
                .body("'man_teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f3eb.png?v8"))
                .body("'man_technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f4bb.png?v8"))
                .body("'man_with_gua_pi_mao'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8"))
                .body("'man_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9af.png?v8"))
                .body("'man_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8"))
                .body("'man_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2642.png?v8"))
                .body("'mandarin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'mango'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96d.png?v8"))
                .body("'mans_shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8"))
                .body("'mantelpiece_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f570.png?v8"))
                .body("'manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bd.png?v8"))
                .body("'maple_leaf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8"))
                .body("'marshall_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ed.png?v8"))
                .body("'martial_arts_uniform'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94b.png?v8"))
                .body("'martinique'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f6.png?v8"))
                .body("'mask'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8"))
                .body("'massage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8"))
                .body("'massage_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486-2642.png?v8"))
                .body("'massage_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f486-2640.png?v8"))
                .body("'mate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c9.png?v8"))
                .body("'mauritania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f7.png?v8"))
                .body("'mauritius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fa.png?v8"))
                .body("'mayotte'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fe-1f1f9.png?v8"))
                .body("'meat_on_bone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8"))
                .body("'mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f527.png?v8"))
                .body("'mechanical_arm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9be.png?v8"))
                .body("'mechanical_leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bf.png?v8"))
                .body("'medal_military'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f396.png?v8"))
                .body("'medal_sports'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png?v8"))
                .body("'medical_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2695.png?v8"))
                .body("'mega'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8"))
                .body("'melon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8"))
                .body("'memo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8"))
                .body("'men_wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c-2642.png?v8"))
                .body("'mending_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2764-1fa79.png?v8"))
                .body("'menorah'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54e.png?v8"))
                .body("'mens'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8"))
                .body("'mermaid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc-2640.png?v8"))
                .body("'merman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc-2642.png?v8"))
                .body("'merperson'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9dc.png?v8"))
                .body("'metal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8"))
                .body("'metro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8"))
                .body("'mexico'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1fd.png?v8"))
                .body("'microbe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a0.png?v8"))
                .body("'micronesia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f2.png?v8"))
                .body("'microphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8"))
                .body("'microscope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8"))
                .body("'middle_finger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8"))
                .body("'military_helmet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa96.png?v8"))
                .body("'milk_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95b.png?v8"))
                .body("'milky_way'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8"))
                .body("'minibus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8"))
                .body("'minidisc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8"))
                .body("'mirror'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9e.png?v8"))
                .body("'mobile_phone_off'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8"))
                .body("'moldova'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e9.png?v8"))
                .body("'monaco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e8.png?v8"))
                .body("'money_mouth_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f911.png?v8"))
                .body("'money_with_wings'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8"))
                .body("'moneybag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8"))
                .body("'mongolia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f3.png?v8"))
                .body("'monkey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8"))
                .body("'monkey_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8"))
                .body("'monocle_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d0.png?v8"))
                .body("'monorail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8"))
                .body("'montenegro'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ea.png?v8"))
                .body("'montserrat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f8.png?v8"))
                .body("'moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8"))
                .body("'moon_cake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96e.png?v8"))
                .body("'morocco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1e6.png?v8"))
                .body("'mortar_board'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8"))
                .body("'mosque'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54c.png?v8"))
                .body("'mosquito'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99f.png?v8"))
                .body("'motor_boat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e5.png?v8"))
                .body("'motor_scooter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f5.png?v8"))
                .body("'motorcycle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cd.png?v8"))
                .body("'motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9bc.png?v8"))
                .body("'motorway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e3.png?v8"))
                .body("'mount_fuji'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8"))
                .body("'mountain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f0.png?v8"))
                .body("'mountain_bicyclist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8"))
                .body("'mountain_biking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5-2642.png?v8"))
                .body("'mountain_biking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b5-2640.png?v8"))
                .body("'mountain_cableway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8"))
                .body("'mountain_railway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8"))
                .body("'mountain_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d4.png?v8"))
                .body("'mouse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8"))
                .body("'mouse2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8"))
                .body("'mouse_trap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa4.png?v8"))
                .body("'movie_camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8"))
                .body("'moyai'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8"))
                .body("'mozambique'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1ff.png?v8"))
                .body("'mrs_claus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f936.png?v8"))
                .body("'muscle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8"))
                .body("'mushroom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8"))
                .body("'musical_keyboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8"))
                .body("'musical_note'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8"))
                .body("'musical_score'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8"))
                .body("'mute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8"))
                .body("'mx_claus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f384.png?v8"))
                .body("'myanmar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f2.png?v8"))
                .body("'nail_care'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8"))
                .body("'name_badge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8"))
                .body("'namibia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1e6.png?v8"))
                .body("'national_park'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3de.png?v8"))
                .body("'nauru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f7.png?v8"))
                .body("'nauseated_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f922.png?v8"))
                .body("'nazar_amulet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ff.png?v8"))
                .body("'neckbeard'", containsString("https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8"))
                .body("'necktie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8"))
                .body("'negative_squared_cross_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8"))
                .body("'nepal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f5.png?v8"))
                .body("'nerd_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f913.png?v8"))
                .body("'nesting_dolls'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa86.png?v8"))
                .body("'netherlands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f1.png?v8"))
                .body("'neutral_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8"))
                .body("'new'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8"))
                .body("'new_caledonia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1e8.png?v8"))
                .body("'new_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8"))
                .body("'new_moon_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8"))
                .body("'new_zealand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ff.png?v8"))
                .body("'newspaper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8"))
                .body("'newspaper_roll'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5de.png?v8"))
                .body("'next_track_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8"))
                .body("'ng'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8"))
                .body("'ng_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2642.png?v8"))
                .body("'ng_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2640.png?v8"))
                .body("'nicaragua'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ee.png?v8"))
                .body("'niger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ea.png?v8"))
                .body("'nigeria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1ec.png?v8"))
                .body("'night_with_stars'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f303.png?v8"))
                .body("'nine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8"))
                .body("'ninja'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f977.png?v8"))
                .body("'niue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1fa.png?v8"))
                .body("'no_bell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8"))
                .body("'no_bicycles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8"))
                .body("'no_entry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8"))
                .body("'no_entry_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8"))
                .body("'no_good'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8"))
                .body("'no_good_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2642.png?v8"))
                .body("'no_good_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f645-2640.png?v8"))
                .body("'no_mobile_phones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8"))
                .body("'no_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8"))
                .body("'no_pedestrians'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8"))
                .body("'no_smoking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8"))
                .body("'non-potable_water'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b1.png?v8"))
                .body("'norfolk_island'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1eb.png?v8"))
                .body("'north_korea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f5.png?v8"))
                .body("'northern_mariana_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1f5.png?v8"))
                .body("'norway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f4.png?v8"))
                .body("'nose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8"))
                .body("'notebook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8"))
                .body("'notebook_with_decorative_cover'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8"))
                .body("'notes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8"))
                .body("'nut_and_bolt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8"))
                .body("'o'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8"))
                .body("'o2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8"))
                .body("'ocean'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8"))
                .body("'octocat'", containsString("https://github.githubassets.com/images/icons/emoji/octocat.png?v8"))
                .body("'octopus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8"))
                .body("'oden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8"))
                .body("'office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8"))
                .body("'office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f4bc.png?v8"))
                .body("'oil_drum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e2.png?v8"))
                .body("'ok'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8"))
                .body("'ok_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8"))
                .body("'ok_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646-2642.png?v8"))
                .body("'ok_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646.png?v8"))
                .body("'ok_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8"))
                .body("'old_key'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5dd.png?v8"))
                .body("'older_adult'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d3.png?v8"))
                .body("'older_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8"))
                .body("'older_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8"))
                .body("'olive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad2.png?v8"))
                .body("'om'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f549.png?v8"))
                .body("'oman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f4-1f1f2.png?v8"))
                .body("'on'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8"))
                .body("'oncoming_automobile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8"))
                .body("'oncoming_bus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8"))
                .body("'oncoming_police_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8"))
                .body("'oncoming_taxi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8"))
                .body("'one'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8"))
                .body("'one_piece_swimsuit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa71.png?v8"))
                .body("'onion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c5.png?v8"))
                .body("'open_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8"))
                .body("'open_file_folder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8"))
                .body("'open_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8"))
                .body("'open_mouth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8"))
                .body("'open_umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2602.png?v8"))
                .body("'ophiuchus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8"))
                .body("'orange'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'orange_book'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8"))
                .body("'orange_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e0.png?v8"))
                .body("'orange_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e1.png?v8"))
                .body("'orange_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e7.png?v8"))
                .body("'orangutan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a7.png?v8"))
                .body("'orthodox_cross'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2626.png?v8"))
                .body("'otter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a6.png?v8"))
                .body("'outbox_tray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8"))
                .body("'owl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f989.png?v8"))
                .body("'ox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8"))
                .body("'oyster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9aa.png?v8"))
                .body("'package'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8"))
                .body("'page_facing_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8"))
                .body("'page_with_curl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8"))
                .body("'pager'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8"))
                .body("'paintbrush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58c.png?v8"))
                .body("'pakistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f0.png?v8"))
                .body("'palau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1fc.png?v8"))
                .body("'palestinian_territories'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f8.png?v8"))
                .body("'palm_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8"))
                .body("'palms_up_together'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f932.png?v8"))
                .body("'panama'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1e6.png?v8"))
                .body("'pancakes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95e.png?v8"))
                .body("'panda_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8"))
                .body("'paperclip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8"))
                .body("'paperclips'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f587.png?v8"))
                .body("'papua_new_guinea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ec.png?v8"))
                .body("'parachute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa82.png?v8"))
                .body("'paraguay'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1fe.png?v8"))
                .body("'parasol_on_ground'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f1.png?v8"))
                .body("'parking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8"))
                .body("'parrot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99c.png?v8"))
                .body("'part_alternation_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8"))
                .body("'partly_sunny'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8"))
                .body("'partying_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f973.png?v8"))
                .body("'passenger_ship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f3.png?v8"))
                .body("'passport_control'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8"))
                .body("'pause_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f8.png?v8"))
                .body("'paw_prints'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8"))
                .body("'peace_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262e.png?v8"))
                .body("'peach'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8"))
                .body("'peacock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99a.png?v8"))
                .body("'peanuts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f95c.png?v8"))
                .body("'pear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8"))
                .body("'pen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f58a.png?v8"))
                .body("'pencil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8"))
                .body("'pencil2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8"))
                .body("'penguin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8"))
                .body("'pensive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8"))
                .body("'people_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f91d-1f9d1.png?v8"))
                .body("'people_hugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fac2.png?v8"))
                .body("'performing_arts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8"))
                .body("'persevere'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8"))
                .body("'person_bald'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b2.png?v8"))
                .body("'person_curly_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b1.png?v8"))
                .body("'person_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f37c.png?v8"))
                .body("'person_fencing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93a.png?v8"))
                .body("'person_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9bd.png?v8"))
                .body("'person_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9bc.png?v8"))
                .body("'person_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935.png?v8"))
                .body("'person_red_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b0.png?v8"))
                .body("'person_white_hair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9b3.png?v8"))
                .body("'person_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f9af.png?v8"))
                .body("'person_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473.png?v8"))
                .body("'person_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8"))
                .body("'peru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ea.png?v8"))
                .body("'petri_dish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9eb.png?v8"))
                .body("'philippines'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1ed.png?v8"))
                .body("'phone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8"))
                .body("'pick'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26cf.png?v8"))
                .body("'pickup_truck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fb.png?v8"))
                .body("'pie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f967.png?v8"))
                .body("'pig'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8"))
                .body("'pig2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8"))
                .body("'pig_nose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8"))
                .body("'pill'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8"))
                .body("'pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-2708.png?v8"))
                .body("'pinata'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa85.png?v8"))
                .body("'pinched_fingers'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90c.png?v8"))
                .body("'pinching_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90f.png?v8"))
                .body("'pineapple'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8"))
                .body("'ping_pong'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d3.png?v8"))
                .body("'pirate_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-2620.png?v8"))
                .body("'pisces'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8"))
                .body("'pitcairn_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f3.png?v8"))
                .body("'pizza'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8"))
                .body("'placard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa7.png?v8"))
                .body("'place_of_worship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d0.png?v8"))
                .body("'plate_with_cutlery'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37d.png?v8"))
                .body("'play_or_pause_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ef.png?v8"))
                .body("'pleading_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97a.png?v8"))
                .body("'plunger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa0.png?v8"))
                .body("'point_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8"))
                .body("'point_left'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8"))
                .body("'point_right'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8"))
                .body("'point_up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8"))
                .body("'point_up_2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8"))
                .body("'poland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f1.png?v8"))
                .body("'polar_bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43b-2744.png?v8"))
                .body("'police_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8"))
                .body("'police_officer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8"))
                .body("'policeman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e-2642.png?v8"))
                .body("'policewoman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46e-2640.png?v8"))
                .body("'poodle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8"))
                .body("'poop'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'popcorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f37f.png?v8"))
                .body("'portugal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f9.png?v8"))
                .body("'post_office'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8"))
                .body("'postal_horn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8"))
                .body("'postbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8"))
                .body("'potable_water'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8"))
                .body("'potato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f954.png?v8"))
                .body("'potted_plant'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab4.png?v8"))
                .body("'pouch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8"))
                .body("'poultry_leg'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8"))
                .body("'pound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8"))
                .body("'pout'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8"))
                .body("'pouting_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8"))
                .body("'pouting_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e.png?v8"))
                .body("'pouting_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e-2642.png?v8"))
                .body("'pouting_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64e-2640.png?v8"))
                .body("'pray'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8"))
                .body("'prayer_beads'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ff.png?v8"))
                .body("'pregnant_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f930.png?v8"))
                .body("'pretzel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f968.png?v8"))
                .body("'previous_track_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ee.png?v8"))
                .body("'prince'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f934.png?v8"))
                .body("'princess'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8"))
                .body("'printer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5a8.png?v8"))
                .body("'probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9af.png?v8"))
                .body("'puerto_rico'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f7.png?v8"))
                .body("'punch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8"))
                .body("'purple_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e3.png?v8"))
                .body("'purple_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8"))
                .body("'purple_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7ea.png?v8"))
                .body("'purse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8"))
                .body("'pushpin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8"))
                .body("'put_litter_in_its_place'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8"))
                .body("'qatar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f6-1f1e6.png?v8"))
                .body("'question'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8"))
                .body("'rabbit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8"))
                .body("'rabbit2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8"))
                .body("'raccoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f99d.png?v8"))
                .body("'racehorse'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8"))
                .body("'racing_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ce.png?v8"))
                .body("'radio'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8"))
                .body("'radio_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8"))
                .body("'radioactive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8"))
                .body("'rage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8"))
                .body("'rage1'", containsString("https://github.githubassets.com/images/icons/emoji/rage1.png?v8"))
                .body("'rage2'", containsString("https://github.githubassets.com/images/icons/emoji/rage2.png?v8"))
                .body("'rage3'", containsString("https://github.githubassets.com/images/icons/emoji/rage3.png?v8"))
                .body("'rage4'", containsString("https://github.githubassets.com/images/icons/emoji/rage4.png?v8"))
                .body("'railway_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8"))
                .body("'railway_track'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e4.png?v8"))
                .body("'rainbow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8"))
                .body("'rainbow_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3-1f308.png?v8"))
                .body("'raised_back_of_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f91a.png?v8"))
                .body("'raised_eyebrow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f928.png?v8"))
                .body("'raised_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8"))
                .body("'raised_hand_with_fingers_splayed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f590.png?v8"))
                .body("'raised_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8"))
                .body("'raising_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8"))
                .body("'raising_hand_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2642.png?v8"))
                .body("'raising_hand_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png?v8"))
                .body("'ram'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8"))
                .body("'ramen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8"))
                .body("'rat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8"))
                .body("'razor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa92.png?v8"))
                .body("'receipt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fe.png?v8"))
                .body("'record_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23fa.png?v8"))
                .body("'recycle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8"))
                .body("'red_car'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8"))
                .body("'red_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8"))
                .body("'red_envelope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e7.png?v8"))
                .body("'red_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b0.png?v8"))
                .body("'red_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b0.png?v8"))
                .body("'red_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e5.png?v8"))
                .body("'registered'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8"))
                .body("'relaxed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8"))
                .body("'relieved'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8"))
                .body("'reminder_ribbon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f397.png?v8"))
                .body("'repeat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8"))
                .body("'repeat_one'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8"))
                .body("'rescue_worker_helmet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26d1.png?v8"))
                .body("'restroom'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8"))
                .body("'reunion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1ea.png?v8"))
                .body("'revolving_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8"))
                .body("'rewind'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8"))
                .body("'rhinoceros'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f98f.png?v8"))
                .body("'ribbon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8"))
                .body("'rice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8"))
                .body("'rice_ball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8"))
                .body("'rice_cracker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8"))
                .body("'rice_scene'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8"))
                .body("'right_anger_bubble'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5ef.png?v8"))
                .body("'ring'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8"))
                .body("'ringed_planet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa90.png?v8"))
                .body("'robot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f916.png?v8"))
                .body("'rock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa8.png?v8"))
                .body("'rocket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8"))
                .body("'rofl'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8"))
                .body("'roll_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f644.png?v8"))
                .body("'roll_of_paper'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fb.png?v8"))
                .body("'roller_coaster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8"))
                .body("'roller_skate'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6fc.png?v8"))
                .body("'romania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1f4.png?v8"))
                .body("'rooster'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8"))
                .body("'rose'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8"))
                .body("'rosette'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f5.png?v8"))
                .body("'rotating_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8"))
                .body("'round_pushpin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8"))
                .body("'rowboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8"))
                .body("'rowing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3-2642.png?v8"))
                .body("'rowing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a3-2640.png?v8"))
                .body("'ru'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8"))
                .body("'rugby_football'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8"))
                .body("'runner'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8"))
                .body("'running'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8"))
                .body("'running_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3-2642.png?v8"))
                .body("'running_shirt_with_sash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8"))
                .body("'running_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c3-2640.png?v8"))
                .body("'rwanda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fc.png?v8"))
                .body("'sa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8"))
                .body("'safety_pin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f7.png?v8"))
                .body("'safety_vest'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ba.png?v8"))
                .body("'sagittarius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8"))
                .body("'sailboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8"))
                .body("'sake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8"))
                .body("'salt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c2.png?v8"))
                .body("'samoa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fc-1f1f8.png?v8"))
                .body("'san_marino'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f2.png?v8"))
                .body("'sandal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8"))
                .body("'sandwich'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f96a.png?v8"))
                .body("'santa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8"))
                .body("'sao_tome_principe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f9.png?v8"))
                .body("'sari'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f97b.png?v8"))
                .body("'sassy_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8"))
                .body("'sassy_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8"))
                .body("'satellite'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8"))
                .body("'satisfied'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8"))
                .body("'saudi_arabia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e6.png?v8"))
                .body("'sauna_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6-2642.png?v8"))
                .body("'sauna_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6.png?v8"))
                .body("'sauna_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d6-2640.png?v8"))
                .body("'sauropod'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f995.png?v8"))
                .body("'saxophone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8"))
                .body("'scarf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e3.png?v8"))
                .body("'school'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8"))
                .body("'school_satchel'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8"))
                .body("'scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f52c.png?v8"))
                .body("'scissors'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8"))
                .body("'scorpion'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f982.png?v8"))
                .body("'scorpius'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8"))
                .body("'scotland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0073-e0063-e0074-e007f.png?v8"))
                .body("'scream'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8"))
                .body("'scream_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8"))
                .body("'screwdriver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9b.png?v8"))
                .body("'scroll'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8"))
                .body("'seal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ad.png?v8"))
                .body("'seat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8"))
                .body("'secret'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8"))
                .body("'see_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8"))
                .body("'seedling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8"))
                .body("'selfie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f933.png?v8"))
                .body("'senegal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f3.png?v8"))
                .body("'serbia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1f8.png?v8"))
                .body("'service_dog'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f415-1f9ba.png?v8"))
                .body("'seven'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8"))
                .body("'sewing_needle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa1.png?v8"))
                .body("'seychelles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e8.png?v8"))
                .body("'shallow_pan_of_food'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f958.png?v8"))
                .body("'shamrock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2618.png?v8"))
                .body("'shark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f988.png?v8"))
                .body("'shaved_ice'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8"))
                .body("'sheep'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8"))
                .body("'shell'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8"))
                .body("'shield'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e1.png?v8"))
                .body("'shinto_shrine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26e9.png?v8"))
                .body("'ship'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8"))
                .body("'shipit'", containsString("https://github.githubassets.com/images/icons/emoji/shipit.png?v8"))
                .body("'shirt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8"))
                .body("'shit'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8"))
                .body("'shoe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8"))
                .body("'shopping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cd.png?v8"))
                .body("'shopping_cart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d2.png?v8"))
                .body("'shorts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa73.png?v8"))
                .body("'shower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8"))
                .body("'shrimp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f990.png?v8"))
                .body("'shrug'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937.png?v8"))
                .body("'shushing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92b.png?v8"))
                .body("'sierra_leone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f1.png?v8"))
                .body("'signal_strength'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8"))
                .body("'singapore'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ec.png?v8"))
                .body("'singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3a4.png?v8"))
                .body("'sint_maarten'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fd.png?v8"))
                .body("'six'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8"))
                .body("'six_pointed_star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8"))
                .body("'skateboard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f9.png?v8"))
                .body("'ski'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8"))
                .body("'skier'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26f7.png?v8"))
                .body("'skull'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8"))
                .body("'skull_and_crossbones'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2620.png?v8"))
                .body("'skunk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a8.png?v8"))
                .body("'sled'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6f7.png?v8"))
                .body("'sleeping'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8"))
                .body("'sleeping_bed'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6cc.png?v8"))
                .body("'sleepy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8"))
                .body("'slightly_frowning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f641.png?v8"))
                .body("'slightly_smiling_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8"))
                .body("'slot_machine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8"))
                .body("'sloth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a5.png?v8"))
                .body("'slovakia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f0.png?v8"))
                .body("'slovenia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ee.png?v8"))
                .body("'small_airplane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6e9.png?v8"))
                .body("'small_blue_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8"))
                .body("'small_orange_diamond'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8"))
                .body("'small_red_triangle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8"))
                .body("'small_red_triangle_down'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8"))
                .body("'smile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8"))
                .body("'smile_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8"))
                .body("'smiley'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8"))
                .body("'smiley_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8"))
                .body("'smiling_face_with_tear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f972.png?v8"))
                .body("'smiling_face_with_three_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f970.png?v8"))
                .body("'smiling_imp'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8"))
                .body("'smirk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8"))
                .body("'smirk_cat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8"))
                .body("'smoking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8"))
                .body("'snail'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8"))
                .body("'snake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8"))
                .body("'sneezing_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f927.png?v8"))
                .body("'snowboarder'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8"))
                .body("'snowflake'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8"))
                .body("'snowman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8"))
                .body("'snowman_with_snow'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2603.png?v8"))
                .body("'soap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fc.png?v8"))
                .body("'sob'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8"))
                .body("'soccer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8"))
                .body("'socks'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9e6.png?v8"))
                .body("'softball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f94e.png?v8"))
                .body("'solomon_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e7.png?v8"))
                .body("'somalia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f4.png?v8"))
                .body("'soon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8"))
                .body("'sos'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8"))
                .body("'sound'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8"))
                .body("'south_africa'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1e6.png?v8"))
                .body("'south_georgia_south_sandwich_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1f8.png?v8"))
                .body("'south_sudan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f8.png?v8"))
                .body("'space_invader'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8"))
                .body("'spades'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8"))
                .body("'spaghetti'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8"))
                .body("'sparkle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2747.png?v8"))
                .body("'sparkler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8"))
                .body("'sparkles'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8"))
                .body("'sparkling_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8"))
                .body("'speak_no_evil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8"))
                .body("'speaker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8"))
                .body("'speaking_head'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5e3.png?v8"))
                .body("'speech_balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8"))
                .body("'speedboat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8"))
                .body("'spider'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f577.png?v8"))
                .body("'spider_web'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f578.png?v8"))
                .body("'spiral_calendar'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d3.png?v8"))
                .body("'spiral_notepad'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d2.png?v8"))
                .body("'sponge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9fd.png?v8"))
                .body("'spoon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f944.png?v8"))
                .body("'squid'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f991.png?v8"))
                .body("'sri_lanka'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1f0.png?v8"))
                .body("'st_barthelemy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f1.png?v8"))
                .body("'st_helena'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ed.png?v8"))
                .body("'st_kitts_nevis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f3.png?v8"))
                .body("'st_lucia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f1-1f1e8.png?v8"))
                .body("'st_martin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f2-1f1eb.png?v8"))
                .body("'st_pierre_miquelon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f5-1f1f2.png?v8"))
                .body("'st_vincent_grenadines'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1e8.png?v8"))
                .body("'stadium'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3df.png?v8"))
                .body("'standing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd-2642.png?v8"))
                .body("'standing_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd.png?v8"))
                .body("'standing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9cd-2640.png?v8"))
                .body("'star'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8"))
                .body("'star2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8"))
                .body("'star_and_crescent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262a.png?v8"))
                .body("'star_of_david'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2721.png?v8"))
                .body("'star_struck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f929.png?v8"))
                .body("'stars'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8"))
                .body("'station'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8"))
                .body("'statue_of_liberty'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8"))
                .body("'steam_locomotive'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8"))
                .body("'stethoscope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa7a.png?v8"))
                .body("'stew'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8"))
                .body("'stop_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f9.png?v8"))
                .body("'stop_sign'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6d1.png?v8"))
                .body("'stopwatch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f1.png?v8"))
                .body("'straight_ruler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8"))
                .body("'strawberry'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8"))
                .body("'stuck_out_tongue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8"))
                .body("'stuck_out_tongue_closed_eyes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8"))
                .body("'stuck_out_tongue_winking_eye'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8"))
                .body("'student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f393.png?v8"))
                .body("'studio_microphone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f399.png?v8"))
                .body("'stuffed_flatbread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f959.png?v8"))
                .body("'sudan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1e9.png?v8"))
                .body("'sun_behind_large_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f325.png?v8"))
                .body("'sun_behind_rain_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f326.png?v8"))
                .body("'sun_behind_small_cloud'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f324.png?v8"))
                .body("'sun_with_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8"))
                .body("'sunflower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8"))
                .body("'sunglasses'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8"))
                .body("'sunny'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8"))
                .body("'sunrise'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8"))
                .body("'sunrise_over_mountains'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8"))
                .body("'superhero'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8.png?v8"))
                .body("'superhero_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8-2642.png?v8"))
                .body("'superhero_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b8-2640.png?v8"))
                .body("'supervillain'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9.png?v8"))
                .body("'supervillain_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9-2642.png?v8"))
                .body("'supervillain_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b9-2640.png?v8"))
                .body("'surfer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8"))
                .body("'surfing_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4-2642.png?v8"))
                .body("'surfing_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c4-2640.png?v8"))
                .body("'suriname'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1f7.png?v8"))
                .body("'sushi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8"))
                .body("'suspect'", containsString("https://github.githubassets.com/images/icons/emoji/suspect.png?v8"))
                .body("'suspension_railway'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8"))
                .body("'svalbard_jan_mayen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ef.png?v8"))
                .body("'swan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9a2.png?v8"))
                .body("'swaziland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ff.png?v8"))
                .body("'sweat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8"))
                .body("'sweat_drops'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8"))
                .body("'sweat_smile'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8"))
                .body("'sweden'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1ea.png?v8"))
                .body("'sweet_potato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8"))
                .body("'swim_brief'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa72.png?v8"))
                .body("'swimmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8"))
                .body("'swimming_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca-2642.png?v8"))
                .body("'swimming_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ca-2640.png?v8"))
                .body("'switzerland'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1ed.png?v8"))
                .body("'symbols'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8"))
                .body("'synagogue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f54d.png?v8"))
                .body("'syria'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fe.png?v8"))
                .body("'syringe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8"))
                .body("'t-rex'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f996.png?v8"))
                .body("'taco'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32e.png?v8"))
                .body("'tada'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8"))
                .body("'taiwan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1fc.png?v8"))
                .body("'tajikistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ef.png?v8"))
                .body("'takeout_box'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f961.png?v8"))
                .body("'tamale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad4.png?v8"))
                .body("'tanabata_tree'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8"))
                .body("'tangerine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8"))
                .body("'tanzania'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ff.png?v8"))
                .body("'taurus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8"))
                .body("'taxi'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8"))
                .body("'tea'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8"))
                .body("'teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f3eb.png?v8"))
                .body("'teapot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fad6.png?v8"))
                .body("'technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f4bb.png?v8"))
                .body("'teddy_bear'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f8.png?v8"))
                .body("'telephone'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8"))
                .body("'telephone_receiver'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8"))
                .body("'telescope'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8"))
                .body("'tennis'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8"))
                .body("'tent'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8"))
                .body("'test_tube'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9ea.png?v8"))
                .body("'thailand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ed.png?v8"))
                .body("'thermometer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f321.png?v8"))
                .body("'thinking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8"))
                .body("'thong_sandal'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa74.png?v8"))
                .body("'thought_balloon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8"))
                .body("'thread'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f5.png?v8"))
                .body("'three'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8"))
                .body("'thumbsdown'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8"))
                .body("'thumbsup'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8"))
                .body("'ticket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8"))
                .body("'tickets'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f39f.png?v8"))
                .body("'tiger'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8"))
                .body("'tiger2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8"))
                .body("'timer_clock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/23f2.png?v8"))
                .body("'timor_leste'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f1.png?v8"))
                .body("'tipping_hand_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8"))
                .body("'tipping_hand_person'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8"))
                .body("'tipping_hand_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f481-2640.png?v8"))
                .body("'tired_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8"))
                .body("'tm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8"))
                .body("'togo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ec.png?v8"))
                .body("'toilet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8"))
                .body("'tokelau'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f0.png?v8"))
                .body("'tokyo_tower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8"))
                .body("'tomato'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8"))
                .body("'tonga'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f4.png?v8"))
                .body("'tongue'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8"))
                .body("'toolbox'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f0.png?v8"))
                .body("'tooth'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9b7.png?v8"))
                .body("'toothbrush'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1faa5.png?v8"))
                .body("'top'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8"))
                .body("'tophat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8"))
                .body("'tornado'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32a.png?v8"))
                .body("'tr'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f7.png?v8"))
                .body("'trackball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5b2.png?v8"))
                .body("'tractor'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8"))
                .body("'traffic_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8"))
                .body("'train'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8"))
                .body("'train2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8"))
                .body("'tram'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8"))
                .body("'transgender_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3-26a7.png?v8"))
                .body("'transgender_symbol'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a7.png?v8"))
                .body("'triangular_flag_on_post'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8"))
                .body("'triangular_ruler'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8"))
                .body("'trident'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8"))
                .body("'trinidad_tobago'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f9.png?v8"))
                .body("'tristan_da_cunha'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e6.png?v8"))
                .body("'triumph'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8"))
                .body("'trolleybus'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8"))
                .body("'trollface'", containsString("https://github.githubassets.com/images/icons/emoji/trollface.png?v8"))
                .body("'trophy'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8"))
                .body("'tropical_drink'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8"))
                .body("'tropical_fish'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8"))
                .body("'truck'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8"))
                .body("'trumpet'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8"))
                .body("'tshirt'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8"))
                .body("'tulip'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8"))
                .body("'tumbler_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f943.png?v8"))
                .body("'tunisia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f3.png?v8"))
                .body("'turkey'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f983.png?v8"))
                .body("'turkmenistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f2.png?v8"))
                .body("'turks_caicos_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1e8.png?v8"))
                .body("'turtle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8"))
                .body("'tuvalu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1fb.png?v8"))
                .body("'tv'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8"))
                .body("'twisted_rightwards_arrows'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8"))
                .body("'two'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8"))
                .body("'two_hearts'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8"))
                .body("'two_men_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8"))
                .body("'two_women_holding_hands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8"))
                .body("'u5272'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8"))
                .body("'u5408'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8"))
                .body("'u55b6'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8"))
                .body("'u6307'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8"))
                .body("'u6708'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8"))
                .body("'u6709'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8"))
                .body("'u6e80'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8"))
                .body("'u7121'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8"))
                .body("'u7533'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8"))
                .body("'u7981'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8"))
                .body("'u7a7a'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8"))
                .body("'uganda'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1ec.png?v8"))
                .body("'uk'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8"))
                .body("'ukraine'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1e6.png?v8"))
                .body("'umbrella'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8"))
                .body("'unamused'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8"))
                .body("'underage'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8"))
                .body("'unicorn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f984.png?v8"))
                .body("'united_arab_emirates'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1e6-1f1ea.png?v8"))
                .body("'united_nations'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f3.png?v8"))
                .body("'unlock'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8"))
                .body("'up'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8"))
                .body("'upside_down_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f643.png?v8"))
                .body("'uruguay'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1fe.png?v8"))
                .body("'us'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8"))
                .body("'us_outlying_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f2.png?v8"))
                .body("'us_virgin_islands'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ee.png?v8"))
                .body("'uzbekistan'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1ff.png?v8"))
                .body("'v'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8"))
                .body("'vampire'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db.png?v8"))
                .body("'vampire_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db-2642.png?v8"))
                .body("'vampire_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9db-2640.png?v8"))
                .body("'vanuatu'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1fa.png?v8"))
                .body("'vatican_city'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1e6.png?v8"))
                .body("'venezuela'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1ea.png?v8"))
                .body("'vertical_traffic_light'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8"))
                .body("'vhs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8"))
                .body("'vibration_mode'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8"))
                .body("'video_camera'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8"))
                .body("'video_game'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8"))
                .body("'vietnam'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1f3.png?v8"))
                .body("'violin'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8"))
                .body("'virgo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8"))
                .body("'volcano'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8"))
                .body("'volleyball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3d0.png?v8"))
                .body("'vomiting_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92e.png?v8"))
                .body("'vs'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8"))
                .body("'vulcan_salute'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f596.png?v8"))
                .body("'waffle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9c7.png?v8"))
                .body("'wales'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-e0067-e0062-e0077-e006c-e0073-e007f.png?v8"))
                .body("'walking'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8"))
                .body("'walking_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6-2642.png?v8"))
                .body("'walking_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6b6-2640.png?v8"))
                .body("'wallis_futuna'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fc-1f1eb.png?v8"))
                .body("'waning_crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8"))
                .body("'waning_gibbous_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8"))
                .body("'warning'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8"))
                .body("'wastebasket'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5d1.png?v8"))
                .body("'watch'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8"))
                .body("'water_buffalo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8"))
                .body("'water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d.png?v8"))
                .body("'watermelon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8"))
                .body("'wave'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8"))
                .body("'wavy_dash'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8"))
                .body("'waxing_crescent_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8"))
                .body("'waxing_gibbous_moon'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8"))
                .body("'wc'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8"))
                .body("'weary'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8"))
                .body("'wedding'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8"))
                .body("'weight_lifting'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb.png?v8"))
                .body("'weight_lifting_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb-2642.png?v8"))
                .body("'weight_lifting_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3cb-2640.png?v8"))
                .body("'western_sahara'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1ed.png?v8"))
                .body("'whale'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8"))
                .body("'whale2'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8"))
                .body("'wheel_of_dharma'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2638.png?v8"))
                .body("'wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8"))
                .body("'white_check_mark'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8"))
                .body("'white_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8"))
                .body("'white_flag'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f3f3.png?v8"))
                .body("'white_flower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8"))
                .body("'white_haired_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f468-1f9b3.png?v8"))
                .body("'white_haired_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9b3.png?v8"))
                .body("'white_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f90d.png?v8"))
                .body("'white_large_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/2b1c.png?v8"))
                .body("'white_medium_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fd.png?v8"))
                .body("'white_medium_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25fb.png?v8"))
                .body("'white_small_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/25ab.png?v8"))
                .body("'white_square_button'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8"))
                .body("'wilted_flower'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f940.png?v8"))
                .body("'wind_chime'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8"))
                .body("'wind_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f32c.png?v8"))
                .body("'window'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa9f.png?v8"))
                .body("'wine_glass'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8"))
                .body("'wink'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8"))
                .body("'wolf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8"))
                .body("'woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8"))
                .body("'woman_artist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3a8.png?v8"))
                .body("'woman_astronaut'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f680.png?v8"))
                .body("'woman_beard'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d4-2640.png?v8"))
                .body("'woman_cartwheeling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f938-2640.png?v8"))
                .body("'woman_cook'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f373.png?v8"))
                .body("'woman_dancing'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8"))
                .body("'woman_facepalming'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f926-2640.png?v8"))
                .body("'woman_factory_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3ed.png?v8"))
                .body("'woman_farmer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f33e.png?v8"))
                .body("'woman_feeding_baby'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f37c.png?v8"))
                .body("'woman_firefighter'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f692.png?v8"))
                .body("'woman_health_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2695.png?v8"))
                .body("'woman_in_manual_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9bd.png?v8"))
                .body("'woman_in_motorized_wheelchair'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9bc.png?v8"))
                .body("'woman_in_tuxedo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f935-2640.png?v8"))
                .body("'woman_judge'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2696.png?v8"))
                .body("'woman_juggling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f939-2640.png?v8"))
                .body("'woman_mechanic'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f527.png?v8"))
                .body("'woman_office_worker'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bc.png?v8"))
                .body("'woman_pilot'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-2708.png?v8"))
                .body("'woman_playing_handball'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93e-2640.png?v8"))
                .body("'woman_playing_water_polo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93d-2640.png?v8"))
                .body("'woman_scientist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f52c.png?v8"))
                .body("'woman_shrugging'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f937-2640.png?v8"))
                .body("'woman_singer'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3a4.png?v8"))
                .body("'woman_student'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f393.png?v8"))
                .body("'woman_teacher'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3eb.png?v8"))
                .body("'woman_technologist'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bb.png?v8"))
                .body("'woman_with_headscarf'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9d5.png?v8"))
                .body("'woman_with_probing_cane'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f9af.png?v8"))
                .body("'woman_with_turban'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f473-2640.png?v8"))
                .body("'woman_with_veil'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f470-2640.png?v8"))
                .body("'womans_clothes'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8"))
                .body("'womans_hat'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8"))
                .body("'women_wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c-2640.png?v8"))
                .body("'womens'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8"))
                .body("'wood'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab5.png?v8"))
                .body("'woozy_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f974.png?v8"))
                .body("'world_map'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f5fa.png?v8"))
                .body("'worm'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fab1.png?v8"))
                .body("'worried'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8"))
                .body("'wrench'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8"))
                .body("'wrestling'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f93c.png?v8"))
                .body("'writing_hand'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/270d.png?v8"))
                .body("'x'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8"))
                .body("'yarn'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9f6.png?v8"))
                .body("'yawning_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f971.png?v8"))
                .body("'yellow_circle'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png?v8"))
                .body("'yellow_heart'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8"))
                .body("'yellow_square'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f7e8.png?v8"))
                .body("'yemen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1fe-1f1ea.png?v8"))
                .body("'yen'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8"))
                .body("'yin_yang'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/262f.png?v8"))
                .body("'yo_yo'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1fa80.png?v8"))
                .body("'yum'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8"))
                .body("'zambia'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1f2.png?v8"))
                .body("'zany_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f92a.png?v8"))
                .body("'zap'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8"))
                .body("'zebra'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f993.png?v8"))
                .body("'zero'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8"))
                .body("'zimbabwe'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f1ff-1f1fc.png?v8"))
                .body("'zipper_mouth_face'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f910.png?v8"))
                .body("'zombie'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df.png?v8"))
                .body("'zombie_man'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df-2642.png?v8"))
                .body("'zombie_woman'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f9df-2640.png?v8"))
                .body("'zzz'", containsString("https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/L/1iDAyxhaYUxPP2/comments/zx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#get-a-commit-comment"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/MzPihrbnoG/2v90ev5jwb/hooks/0cjx14KSxX9zh/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/190")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#get-a-team-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/DZ1eRFkEezUlDJou/qRtJEEQt4yk/traffic/clones")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-repository-clones"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/9fmKM/YZavNv5Vn/issues?" + 
                    "milestone=HYdvaivh&" + 
                    "assignee=6gS4Og&" + 
                    "creator=uiP2Fbpd3w6H&" + 
                    "mentioned=zYH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-repository-issues"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/1nhXK/SkRpAtl/git/commits/2t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-commit"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/orgs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/applications/Xu835FsbBDp6j/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"teams\": [ " + 
                    " \"mt0xvNNUmsIs6\", " + 
                    " \"8BNHFqyrlZEQ8\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/nOZay_aTxV_K/iCJ9/branches/u37Ucm0cxlS/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/HqL97oX/AX0W/actions/runs/Irg/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("limit", "origin", "expires_at")));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/subscriptions?per_page=201")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'node_id'", containsString("R_kgDOHV7fxQ"))
                .body("[0].'name'", containsString("Cajviewer-crash"))
                .body("[0].'full_name'", containsString("painsAgains/Cajviewer-crash"))
                .body("[0].'private'", equalTo(true))
                .body("[0].'owner'.'login'", containsString("painsAgains"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'description'", containsString("find  crashs in cajviewer "))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/deployments"))
                .body("[0].'created_at'", containsString("2022-05-16T08:58:01Z"))
                .body("[0].'updated_at'", containsString("2022-05-20T03:07:07Z"))
                .body("[0].'pushed_at'", containsString("2022-05-16T09:04:43Z"))
                .body("[0].'git_url'", containsString("git://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:painsAgains/Cajviewer-crash.git"))
                .body("[0].'clone_url'", containsString("https://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'svn_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1340.0))
                .body("[0].'stargazers_count'", numberMatches(0.0))
                .body("[0].'watchers_count'", numberMatches(0.0))
                .body("[0].'language'", nullValue())
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(false))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(0.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(0.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("private"))
                .body("[0].'forks'", numberMatches(0.0))
                .body("[0].'open_issues'", numberMatches(0.0))
                .body("[0].'watchers'", numberMatches(0.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(true))
                .body("[0].'permissions'.'maintain'", equalTo(true))
                .body("[0].'permissions'.'push'", equalTo(true))
                .body("[0].'permissions'.'triage'", equalTo(true))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIV78aQ"))
                .body("[1].'name'", containsString("hack"))
                .body("[1].'full_name'", containsString("painsAgains/hack"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("painsAgains"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'description'", containsString("hack_js"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/painsAgains/hack"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/painsAgains/hack/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/painsAgains/hack/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/hack/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/painsAgains/hack/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/hack/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/painsAgains/hack/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/hack/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/painsAgains/hack/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/hack/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/painsAgains/hack/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/hack/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/hack/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/painsAgains/hack/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/painsAgains/hack/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/painsAgains/hack/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/painsAgains/hack/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/painsAgains/hack/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/hack/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/hack/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/hack/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/hack/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/painsAgains/hack/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/painsAgains/hack/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/hack/deployments"))
                .body("[1].'created_at'", containsString("2022-10-31T09:24:23Z"))
                .body("[1].'updated_at'", containsString("2022-10-31T09:38:12Z"))
                .body("[1].'pushed_at'", containsString("2022-11-01T02:14:43Z"))
                .body("[1].'git_url'", containsString("git://github.com/painsAgains/hack.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:painsAgains/hack.git"))
                .body("[1].'clone_url'", containsString("https://github.com/painsAgains/hack.git"))
                .body("[1].'svn_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'homepage'", nullValue())
                .body("[1].'size'", numberMatches(20835.0))
                .body("[1].'stargazers_count'", numberMatches(0.0))
                .body("[1].'watchers_count'", numberMatches(0.0))
                .body("[1].'language'", containsString("JavaScript"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(0.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(0.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(0))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(0.0))
                .body("[1].'open_issues'", numberMatches(0.0))
                .body("[1].'watchers'", numberMatches(0.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(true))
                .body("[1].'permissions'.'maintain'", equalTo(true))
                .body("[1].'permissions'.'push'", equalTo(true))
                .body("[1].'permissions'.'triage'", equalTo(true))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOIaDp1Q"))
                .body("[2].'name'", containsString("my_script"))
                .body("[2].'full_name'", containsString("painsAgains/my_script"))
                .body("[2].'private'", equalTo(true))
                .body("[2].'owner'.'login'", containsString("painsAgains"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'description'", containsString("实验脚本"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/painsAgains/my_script"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/painsAgains/my_script/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/my_script/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/painsAgains/my_script/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/painsAgains/my_script/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/my_script/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/painsAgains/my_script/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/painsAgains/my_script/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/painsAgains/my_script/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/painsAgains/my_script/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/my_script/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/my_script/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/my_script/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/my_script/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/painsAgains/my_script/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/painsAgains/my_script/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/deployments"))
                .body("[2].'created_at'", containsString("2022-11-10T07:33:53Z"))
                .body("[2].'updated_at'", containsString("2022-11-15T09:36:46Z"))
                .body("[2].'pushed_at'", containsString("2023-03-02T03:33:01Z"))
                .body("[2].'git_url'", containsString("git://github.com/painsAgains/my_script.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:painsAgains/my_script.git"))
                .body("[2].'clone_url'", containsString("https://github.com/painsAgains/my_script.git"))
                .body("[2].'svn_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'homepage'", nullValue())
                .body("[2].'size'", numberMatches(931.0))
                .body("[2].'stargazers_count'", numberMatches(0.0))
                .body("[2].'watchers_count'", numberMatches(0.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(false))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(0.0))
                .body("[2].'license'", nullValue())
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("private"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(0.0))
                .body("[2].'watchers'", numberMatches(0.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(true))
                .body("[2].'permissions'.'maintain'", equalTo(true))
                .body("[2].'permissions'.'push'", equalTo(true))
                .body("[2].'permissions'.'triage'", equalTo(true))
                .body("[2].'permissions'.'pull'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories?since=-871659440")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The since parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-public-repositories"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/8qzN/0yCp/branches/g/protection/required_status_checks/contexts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/aV_j3OL3bp/aeCN/pulls/E/update-branch")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202, 403, 415, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/blocks/SLgUzeyqJWrb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/343/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/fS4ryU1s_pMG_/hovercard?" + 
                    "subject_type=EVOMASTER&" + 
                    "subject_id=Vw8IzfSdD4dKkFZA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/memberships/orgs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/starred")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'node_id'", containsString("R_kgDOGFy_-Q"))
                .body("[0].'name'", containsString("golang-interview"))
                .body("[0].'full_name'", containsString("iswbm/golang-interview"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("iswbm"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjIyMzExNDE5"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/22311419?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/iswbm"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/iswbm"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/iswbm/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/iswbm/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/iswbm/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/iswbm/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/iswbm/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/iswbm/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/iswbm/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/iswbm/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/iswbm/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'description'", containsString("Go语言面试题集"))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/iswbm/golang-interview"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/deployments"))
                .body("[0].'created_at'", containsString("2021-09-21T07:47:39Z"))
                .body("[0].'updated_at'", containsString("2023-04-06T08:36:21Z"))
                .body("[0].'pushed_at'", containsString("2022-03-15T11:50:16Z"))
                .body("[0].'git_url'", containsString("git://github.com/iswbm/golang-interview.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:iswbm/golang-interview.git"))
                .body("[0].'clone_url'", containsString("https://github.com/iswbm/golang-interview.git"))
                .body("[0].'svn_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1282.0))
                .body("[0].'stargazers_count'", numberMatches(171.0))
                .body("[0].'watchers_count'", numberMatches(171.0))
                .body("[0].'language'", containsString("Python"))
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(true))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(48.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(4.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("public"))
                .body("[0].'forks'", numberMatches(48.0))
                .body("[0].'open_issues'", numberMatches(4.0))
                .body("[0].'watchers'", numberMatches(171.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(false))
                .body("[0].'permissions'.'maintain'", equalTo(false))
                .body("[0].'permissions'.'push'", equalTo(false))
                .body("[0].'permissions'.'triage'", equalTo(false))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIXlNqw"))
                .body("[1].'name'", containsString("scalpel"))
                .body("[1].'full_name'", containsString("StarCrossPortal/scalpel"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("StarCrossPortal"))
                .body("[1].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjgyMDg0NTA4"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/82084508?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/StarCrossPortal"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/StarCrossPortal"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/StarCrossPortal/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/StarCrossPortal/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/StarCrossPortal/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/StarCrossPortal/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/StarCrossPortal/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/StarCrossPortal/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/StarCrossPortal/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/StarCrossPortal/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/StarCrossPortal/received_events"))
                .body("[1].'owner'.'type'", containsString("Organization"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'description'", containsString("scalpel是一款命令行漏洞扫描工具，支持深度参数注入，拥有一个强大的数据解析和变异算法，可以将常见的数据格式（json, xml, form等）解析为树结构，然后根据poc中的规则，对树进行变异，包括对叶子节点和树结构 的变异。变异完成之后，将树结构还原为原始的数据格式。 原理：https://mp.weixin.qq.com/s/U_llBwC05vb84U9wb8NZog"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/deployments"))
                .body("[1].'created_at'", containsString("2022-11-04T03:19:29Z"))
                .body("[1].'updated_at'", containsString("2023-04-03T10:44:24Z"))
                .body("[1].'pushed_at'", containsString("2023-02-28T06:35:01Z"))
                .body("[1].'git_url'", containsString("git://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:StarCrossPortal/scalpel.git"))
                .body("[1].'clone_url'", containsString("https://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'svn_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'homepage'", containsString(""))
                .body("[1].'size'", numberMatches(2948.0))
                .body("[1].'stargazers_count'", numberMatches(616.0))
                .body("[1].'watchers_count'", numberMatches(616.0))
                .body("[1].'language'", nullValue())
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(72.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(12.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(7))
                .body("[1].'topics'", hasItems("cve", "exploits", "fuzzing", "poc", "scanner", "vulnerabilities", "vulnerability"))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(72.0))
                .body("[1].'open_issues'", numberMatches(12.0))
                .body("[1].'watchers'", numberMatches(616.0))
                .body("[1].'default_branch'", containsString("master"))
                .body("[1].'permissions'.'admin'", equalTo(false))
                .body("[1].'permissions'.'maintain'", equalTo(false))
                .body("[1].'permissions'.'push'", equalTo(false))
                .body("[1].'permissions'.'triage'", equalTo(false))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOGlB2bg"))
                .body("[2].'name'", containsString("RestTestGen"))
                .body("[2].'full_name'", containsString("SeUniVr/RestTestGen"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("SeUniVr"))
                .body("[2].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjc1MDI3NzY0"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/75027764?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/SeUniVr"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/SeUniVr"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/SeUniVr/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/SeUniVr/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/SeUniVr/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/SeUniVr/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/SeUniVr/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/SeUniVr/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/SeUniVr/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/SeUniVr/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/SeUniVr/received_events"))
                .body("[2].'owner'.'type'", containsString("Organization"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'description'", containsString("A framework for automated black-box testing of RESTful APIs."))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/deployments"))
                .body("[2].'created_at'", containsString("2021-12-24T14:04:59Z"))
                .body("[2].'updated_at'", containsString("2023-03-26T04:11:59Z"))
                .body("[2].'pushed_at'", containsString("2023-02-20T10:05:14Z"))
                .body("[2].'git_url'", containsString("git://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:SeUniVr/RestTestGen.git"))
                .body("[2].'clone_url'", containsString("https://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'svn_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'homepage'", containsString(""))
                .body("[2].'size'", numberMatches(10313.0))
                .body("[2].'stargazers_count'", numberMatches(10.0))
                .body("[2].'watchers_count'", numberMatches(10.0))
                .body("[2].'language'", containsString("Java"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(true))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(1.0))
                .body("[2].'license'.'key'", containsString("apache-2.0"))
                .body("[2].'license'.'name'", containsString("Apache License 2.0"))
                .body("[2].'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[2].'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[2].'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("public"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(1.0))
                .body("[2].'watchers'", numberMatches(10.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(false))
                .body("[2].'permissions'.'maintain'", equalTo(false))
                .body("[2].'permissions'.'push'", equalTo(false))
                .body("[2].'permissions'.'triage'", equalTo(false))
                .body("[2].'permissions'.'pull'", equalTo(true))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(5)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(6)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(7)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(8)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(9)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(10)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(11)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(12)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(13)).keySet().containsAll(Arrays.asList("starred_at", "repo")));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/projects/columns/cards/187")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#update-a-project-card"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/v1b4zysEXcmral/actions/runner-groups/2WXCp/runners/4nPQMqwqzUR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/scim/v2/organizations/SosF3Yqa/Users/BRaRp22GneIGfgx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/c9E/S/branches/z6/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/2_B49AEWcP/actions/runner-groups/SRwNv/runners/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/blocks")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/11_3CGQN4ZhHp3mw/UtKoq/environments/fLRyEMk3xYZwIcp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#get-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/vr6Ux5XCSWJ/EQ5Z5ElkQBRHbi/milestones")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-a-milestone"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/FW8nX/tmPIMSY/branches/nc9MTkg00L/protection/restrictions/apps")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#list-apps-with-access-to-the-protected-branch"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/installation/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to list repositories for an installation."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/code?" + 
                    "q=y3&" + 
                    "sort=EVOMASTER&" + 
                    "order=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(9897726.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(30))
                .body("'items'[0].'name'", containsString("nestedTable.w.form.xml"))
                .body("'items'[0].'path'", containsString("demo/pcSample/table/fatherAndSon/.release/nestedTable/nestedTable.w.form.xml"))
                .body("'items'[0].'sha'", containsString("884f4373078c67b5ae0bac53d4c4136ea4e2c648"))
                .body("'items'[0].'url'", containsString("https://api.github.com/repositories/84382002/contents/demo/pcSample/table/fatherAndSon/.release/nestedTable/nestedTable.w.form.xml?ref=43f3abfd16fca60d16d32c4478a97755210f3926"))
                .body("'items'[0].'git_url'", containsString("https://api.github.com/repositories/84382002/git/blobs/884f4373078c67b5ae0bac53d4c4136ea4e2c648"))
                .body("'items'[0].'html_url'", containsString("https://github.com/handgod/UI2/blob/43f3abfd16fca60d16d32c4478a97755210f3926/demo/pcSample/table/fatherAndSon/.release/nestedTable/nestedTable.w.form.xml"))
                .body("'items'[0].'repository'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnk4NDM4MjAwMg=="))
                .body("'items'[0].'repository'.'name'", containsString("UI2"))
                .body("'items'[0].'repository'.'full_name'", containsString("handgod/UI2"))
                .body("'items'[0].'repository'.'private'", equalTo(false))
                .body("'items'[0].'repository'.'owner'.'login'", containsString("handgod"))
                .body("'items'[0].'repository'.'owner'.'node_id'", containsString("MDQ6VXNlcjU3NzEwODQ="))
                .body("'items'[0].'repository'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/5771084?v=4"))
                .body("'items'[0].'repository'.'owner'.'gravatar_id'", containsString(""))
                .body("'items'[0].'repository'.'owner'.'url'", containsString("https://api.github.com/users/handgod"))
                .body("'items'[0].'repository'.'owner'.'html_url'", containsString("https://github.com/handgod"))
                .body("'items'[0].'repository'.'owner'.'followers_url'", containsString("https://api.github.com/users/handgod/followers"))
                .body("'items'[0].'repository'.'owner'.'following_url'", containsString("https://api.github.com/users/handgod/following{/other_user}"))
                .body("'items'[0].'repository'.'owner'.'gists_url'", containsString("https://api.github.com/users/handgod/gists{/gist_id}"))
                .body("'items'[0].'repository'.'owner'.'starred_url'", containsString("https://api.github.com/users/handgod/starred{/owner}{/repo}"))
                .body("'items'[0].'repository'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/handgod/subscriptions"))
                .body("'items'[0].'repository'.'owner'.'organizations_url'", containsString("https://api.github.com/users/handgod/orgs"))
                .body("'items'[0].'repository'.'owner'.'repos_url'", containsString("https://api.github.com/users/handgod/repos"))
                .body("'items'[0].'repository'.'owner'.'events_url'", containsString("https://api.github.com/users/handgod/events{/privacy}"))
                .body("'items'[0].'repository'.'owner'.'received_events_url'", containsString("https://api.github.com/users/handgod/received_events"))
                .body("'items'[0].'repository'.'owner'.'type'", containsString("User"))
                .body("'items'[0].'repository'.'owner'.'site_admin'", equalTo(false))
                .body("'items'[0].'repository'.'html_url'", containsString("https://github.com/handgod/UI2"))
                .body("'items'[0].'repository'.'description'", nullValue())
                .body("'items'[0].'repository'.'fork'", equalTo(false))
                .body("'items'[0].'repository'.'url'", containsString("https://api.github.com/repos/handgod/UI2"))
                .body("'items'[0].'repository'.'forks_url'", containsString("https://api.github.com/repos/handgod/UI2/forks"))
                .body("'items'[0].'repository'.'keys_url'", containsString("https://api.github.com/repos/handgod/UI2/keys{/key_id}"))
                .body("'items'[0].'repository'.'collaborators_url'", containsString("https://api.github.com/repos/handgod/UI2/collaborators{/collaborator}"))
                .body("'items'[0].'repository'.'teams_url'", containsString("https://api.github.com/repos/handgod/UI2/teams"))
                .body("'items'[0].'repository'.'hooks_url'", containsString("https://api.github.com/repos/handgod/UI2/hooks"))
                .body("'items'[0].'repository'.'issue_events_url'", containsString("https://api.github.com/repos/handgod/UI2/issues/events{/number}"))
                .body("'items'[0].'repository'.'events_url'", containsString("https://api.github.com/repos/handgod/UI2/events"))
                .body("'items'[0].'repository'.'assignees_url'", containsString("https://api.github.com/repos/handgod/UI2/assignees{/user}"))
                .body("'items'[0].'repository'.'branches_url'", containsString("https://api.github.com/repos/handgod/UI2/branches{/branch}"))
                .body("'items'[0].'repository'.'tags_url'", containsString("https://api.github.com/repos/handgod/UI2/tags"))
                .body("'items'[0].'repository'.'blobs_url'", containsString("https://api.github.com/repos/handgod/UI2/git/blobs{/sha}"))
                .body("'items'[0].'repository'.'git_tags_url'", containsString("https://api.github.com/repos/handgod/UI2/git/tags{/sha}"))
                .body("'items'[0].'repository'.'git_refs_url'", containsString("https://api.github.com/repos/handgod/UI2/git/refs{/sha}"))
                .body("'items'[0].'repository'.'trees_url'", containsString("https://api.github.com/repos/handgod/UI2/git/trees{/sha}"))
                .body("'items'[0].'repository'.'statuses_url'", containsString("https://api.github.com/repos/handgod/UI2/statuses/{sha}"))
                .body("'items'[0].'repository'.'languages_url'", containsString("https://api.github.com/repos/handgod/UI2/languages"))
                .body("'items'[0].'repository'.'stargazers_url'", containsString("https://api.github.com/repos/handgod/UI2/stargazers"))
                .body("'items'[0].'repository'.'contributors_url'", containsString("https://api.github.com/repos/handgod/UI2/contributors"))
                .body("'items'[0].'repository'.'subscribers_url'", containsString("https://api.github.com/repos/handgod/UI2/subscribers"))
                .body("'items'[0].'repository'.'subscription_url'", containsString("https://api.github.com/repos/handgod/UI2/subscription"))
                .body("'items'[0].'repository'.'commits_url'", containsString("https://api.github.com/repos/handgod/UI2/commits{/sha}"))
                .body("'items'[0].'repository'.'git_commits_url'", containsString("https://api.github.com/repos/handgod/UI2/git/commits{/sha}"))
                .body("'items'[0].'repository'.'comments_url'", containsString("https://api.github.com/repos/handgod/UI2/comments{/number}"))
                .body("'items'[0].'repository'.'issue_comment_url'", containsString("https://api.github.com/repos/handgod/UI2/issues/comments{/number}"))
                .body("'items'[0].'repository'.'contents_url'", containsString("https://api.github.com/repos/handgod/UI2/contents/{+path}"))
                .body("'items'[0].'repository'.'compare_url'", containsString("https://api.github.com/repos/handgod/UI2/compare/{base}...{head}"))
                .body("'items'[0].'repository'.'merges_url'", containsString("https://api.github.com/repos/handgod/UI2/merges"))
                .body("'items'[0].'repository'.'archive_url'", containsString("https://api.github.com/repos/handgod/UI2/{archive_format}{/ref}"))
                .body("'items'[0].'repository'.'downloads_url'", containsString("https://api.github.com/repos/handgod/UI2/downloads"))
                .body("'items'[0].'repository'.'issues_url'", containsString("https://api.github.com/repos/handgod/UI2/issues{/number}"))
                .body("'items'[0].'repository'.'pulls_url'", containsString("https://api.github.com/repos/handgod/UI2/pulls{/number}"))
                .body("'items'[0].'repository'.'milestones_url'", containsString("https://api.github.com/repos/handgod/UI2/milestones{/number}"))
                .body("'items'[0].'repository'.'notifications_url'", containsString("https://api.github.com/repos/handgod/UI2/notifications{?since,all,participating}"))
                .body("'items'[0].'repository'.'labels_url'", containsString("https://api.github.com/repos/handgod/UI2/labels{/name}"))
                .body("'items'[0].'repository'.'releases_url'", containsString("https://api.github.com/repos/handgod/UI2/releases{/id}"))
                .body("'items'[0].'repository'.'deployments_url'", containsString("https://api.github.com/repos/handgod/UI2/deployments"))
                .body("'items'[0].'score'", numberMatches(1.0))
                .body("'items'[1].'name'", containsString("nestedTable.w.view_desktop_zh_CN_Computer_.html"))
                .body("'items'[1].'path'", containsString("demo/pcSample/table/fatherAndSon/.cache/nestedTable/nestedTable.w.view_desktop_zh_CN_Computer_.html"))
                .body("'items'[1].'sha'", containsString("3aa336c1d71671ccdeacb6e2ea59f044c9d9ee63"))
                .body("'items'[1].'url'", containsString("https://api.github.com/repositories/84382002/contents/demo/pcSample/table/fatherAndSon/.cache/nestedTable/nestedTable.w.view_desktop_zh_CN_Computer_.html?ref=43f3abfd16fca60d16d32c4478a97755210f3926"))
                .body("'items'[1].'git_url'", containsString("https://api.github.com/repositories/84382002/git/blobs/3aa336c1d71671ccdeacb6e2ea59f044c9d9ee63"))
                .body("'items'[1].'html_url'", containsString("https://github.com/handgod/UI2/blob/43f3abfd16fca60d16d32c4478a97755210f3926/demo/pcSample/table/fatherAndSon/.cache/nestedTable/nestedTable.w.view_desktop_zh_CN_Computer_.html"))
                .body("'items'[1].'repository'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnk4NDM4MjAwMg=="))
                .body("'items'[1].'repository'.'name'", containsString("UI2"))
                .body("'items'[1].'repository'.'full_name'", containsString("handgod/UI2"))
                .body("'items'[1].'repository'.'private'", equalTo(false))
                .body("'items'[1].'repository'.'owner'.'login'", containsString("handgod"))
                .body("'items'[1].'repository'.'owner'.'node_id'", containsString("MDQ6VXNlcjU3NzEwODQ="))
                .body("'items'[1].'repository'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/5771084?v=4"))
                .body("'items'[1].'repository'.'owner'.'gravatar_id'", containsString(""))
                .body("'items'[1].'repository'.'owner'.'url'", containsString("https://api.github.com/users/handgod"))
                .body("'items'[1].'repository'.'owner'.'html_url'", containsString("https://github.com/handgod"))
                .body("'items'[1].'repository'.'owner'.'followers_url'", containsString("https://api.github.com/users/handgod/followers"))
                .body("'items'[1].'repository'.'owner'.'following_url'", containsString("https://api.github.com/users/handgod/following{/other_user}"))
                .body("'items'[1].'repository'.'owner'.'gists_url'", containsString("https://api.github.com/users/handgod/gists{/gist_id}"))
                .body("'items'[1].'repository'.'owner'.'starred_url'", containsString("https://api.github.com/users/handgod/starred{/owner}{/repo}"))
                .body("'items'[1].'repository'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/handgod/subscriptions"))
                .body("'items'[1].'repository'.'owner'.'organizations_url'", containsString("https://api.github.com/users/handgod/orgs"))
                .body("'items'[1].'repository'.'owner'.'repos_url'", containsString("https://api.github.com/users/handgod/repos"))
                .body("'items'[1].'repository'.'owner'.'events_url'", containsString("https://api.github.com/users/handgod/events{/privacy}"))
                .body("'items'[1].'repository'.'owner'.'received_events_url'", containsString("https://api.github.com/users/handgod/received_events"))
                .body("'items'[1].'repository'.'owner'.'type'", containsString("User"))
                .body("'items'[1].'repository'.'owner'.'site_admin'", equalTo(false))
                .body("'items'[1].'repository'.'html_url'", containsString("https://github.com/handgod/UI2"))
                .body("'items'[1].'repository'.'description'", nullValue())
                .body("'items'[1].'repository'.'fork'", equalTo(false))
                .body("'items'[1].'repository'.'url'", containsString("https://api.github.com/repos/handgod/UI2"))
                .body("'items'[1].'repository'.'forks_url'", containsString("https://api.github.com/repos/handgod/UI2/forks"))
                .body("'items'[1].'repository'.'keys_url'", containsString("https://api.github.com/repos/handgod/UI2/keys{/key_id}"))
                .body("'items'[1].'repository'.'collaborators_url'", containsString("https://api.github.com/repos/handgod/UI2/collaborators{/collaborator}"))
                .body("'items'[1].'repository'.'teams_url'", containsString("https://api.github.com/repos/handgod/UI2/teams"))
                .body("'items'[1].'repository'.'hooks_url'", containsString("https://api.github.com/repos/handgod/UI2/hooks"))
                .body("'items'[1].'repository'.'issue_events_url'", containsString("https://api.github.com/repos/handgod/UI2/issues/events{/number}"))
                .body("'items'[1].'repository'.'events_url'", containsString("https://api.github.com/repos/handgod/UI2/events"))
                .body("'items'[1].'repository'.'assignees_url'", containsString("https://api.github.com/repos/handgod/UI2/assignees{/user}"))
                .body("'items'[1].'repository'.'branches_url'", containsString("https://api.github.com/repos/handgod/UI2/branches{/branch}"))
                .body("'items'[1].'repository'.'tags_url'", containsString("https://api.github.com/repos/handgod/UI2/tags"))
                .body("'items'[1].'repository'.'blobs_url'", containsString("https://api.github.com/repos/handgod/UI2/git/blobs{/sha}"))
                .body("'items'[1].'repository'.'git_tags_url'", containsString("https://api.github.com/repos/handgod/UI2/git/tags{/sha}"))
                .body("'items'[1].'repository'.'git_refs_url'", containsString("https://api.github.com/repos/handgod/UI2/git/refs{/sha}"))
                .body("'items'[1].'repository'.'trees_url'", containsString("https://api.github.com/repos/handgod/UI2/git/trees{/sha}"))
                .body("'items'[1].'repository'.'statuses_url'", containsString("https://api.github.com/repos/handgod/UI2/statuses/{sha}"))
                .body("'items'[1].'repository'.'languages_url'", containsString("https://api.github.com/repos/handgod/UI2/languages"))
                .body("'items'[1].'repository'.'stargazers_url'", containsString("https://api.github.com/repos/handgod/UI2/stargazers"))
                .body("'items'[1].'repository'.'contributors_url'", containsString("https://api.github.com/repos/handgod/UI2/contributors"))
                .body("'items'[1].'repository'.'subscribers_url'", containsString("https://api.github.com/repos/handgod/UI2/subscribers"))
                .body("'items'[1].'repository'.'subscription_url'", containsString("https://api.github.com/repos/handgod/UI2/subscription"))
                .body("'items'[1].'repository'.'commits_url'", containsString("https://api.github.com/repos/handgod/UI2/commits{/sha}"))
                .body("'items'[1].'repository'.'git_commits_url'", containsString("https://api.github.com/repos/handgod/UI2/git/commits{/sha}"))
                .body("'items'[1].'repository'.'comments_url'", containsString("https://api.github.com/repos/handgod/UI2/comments{/number}"))
                .body("'items'[1].'repository'.'issue_comment_url'", containsString("https://api.github.com/repos/handgod/UI2/issues/comments{/number}"))
                .body("'items'[1].'repository'.'contents_url'", containsString("https://api.github.com/repos/handgod/UI2/contents/{+path}"))
                .body("'items'[1].'repository'.'compare_url'", containsString("https://api.github.com/repos/handgod/UI2/compare/{base}...{head}"))
                .body("'items'[1].'repository'.'merges_url'", containsString("https://api.github.com/repos/handgod/UI2/merges"))
                .body("'items'[1].'repository'.'archive_url'", containsString("https://api.github.com/repos/handgod/UI2/{archive_format}{/ref}"))
                .body("'items'[1].'repository'.'downloads_url'", containsString("https://api.github.com/repos/handgod/UI2/downloads"))
                .body("'items'[1].'repository'.'issues_url'", containsString("https://api.github.com/repos/handgod/UI2/issues{/number}"))
                .body("'items'[1].'repository'.'pulls_url'", containsString("https://api.github.com/repos/handgod/UI2/pulls{/number}"))
                .body("'items'[1].'repository'.'milestones_url'", containsString("https://api.github.com/repos/handgod/UI2/milestones{/number}"))
                .body("'items'[1].'repository'.'notifications_url'", containsString("https://api.github.com/repos/handgod/UI2/notifications{?since,all,participating}"))
                .body("'items'[1].'repository'.'labels_url'", containsString("https://api.github.com/repos/handgod/UI2/labels{/name}"))
                .body("'items'[1].'repository'.'releases_url'", containsString("https://api.github.com/repos/handgod/UI2/releases{/id}"))
                .body("'items'[1].'repository'.'deployments_url'", containsString("https://api.github.com/repos/handgod/UI2/deployments"))
                .body("'items'[1].'score'", numberMatches(1.0))
                .body("'items'[2].'name'", containsString("computeStressVerticalShearZone.m"))
                .body("'items'[2].'path'", containsString("matlab/+unicycle/+greens/computeStressVerticalShearZone.m"))
                .body("'items'[2].'sha'", containsString("25fda7a4e7323d345b639ac84105b7e24943a886"))
                .body("'items'[2].'url'", containsString("https://api.github.com/repositories/309014728/contents/matlab/%2Bunicycle/%2Bgreens/computeStressVerticalShearZone.m?ref=25e5a662af257549d6fb2502188ae84b8fa4c11d"))
                .body("'items'[2].'git_url'", containsString("https://api.github.com/repositories/309014728/git/blobs/25fda7a4e7323d345b639ac84105b7e24943a886"))
                .body("'items'[2].'html_url'", containsString("https://github.com/jdpmoore/unicycle/blob/25e5a662af257549d6fb2502188ae84b8fa4c11d/matlab/%2Bunicycle/%2Bgreens/computeStressVerticalShearZone.m"))
                .body("'items'[2].'repository'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnkzMDkwMTQ3Mjg="))
                .body("'items'[2].'repository'.'name'", containsString("unicycle"))
                .body("'items'[2].'repository'.'full_name'", containsString("jdpmoore/unicycle"))
                .body("'items'[2].'repository'.'private'", equalTo(false))
                .body("'items'[2].'repository'.'owner'.'login'", containsString("jdpmoore"))
                .body("'items'[2].'repository'.'owner'.'node_id'", containsString("MDQ6VXNlcjEwNTQ1Njg0"))
                .body("'items'[2].'repository'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/10545684?v=4"))
                .body("'items'[2].'repository'.'owner'.'gravatar_id'", containsString(""))
                .body("'items'[2].'repository'.'owner'.'url'", containsString("https://api.github.com/users/jdpmoore"))
                .body("'items'[2].'repository'.'owner'.'html_url'", containsString("https://github.com/jdpmoore"))
                .body("'items'[2].'repository'.'owner'.'followers_url'", containsString("https://api.github.com/users/jdpmoore/followers"))
                .body("'items'[2].'repository'.'owner'.'following_url'", containsString("https://api.github.com/users/jdpmoore/following{/other_user}"))
                .body("'items'[2].'repository'.'owner'.'gists_url'", containsString("https://api.github.com/users/jdpmoore/gists{/gist_id}"))
                .body("'items'[2].'repository'.'owner'.'starred_url'", containsString("https://api.github.com/users/jdpmoore/starred{/owner}{/repo}"))
                .body("'items'[2].'repository'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/jdpmoore/subscriptions"))
                .body("'items'[2].'repository'.'owner'.'organizations_url'", containsString("https://api.github.com/users/jdpmoore/orgs"))
                .body("'items'[2].'repository'.'owner'.'repos_url'", containsString("https://api.github.com/users/jdpmoore/repos"))
                .body("'items'[2].'repository'.'owner'.'events_url'", containsString("https://api.github.com/users/jdpmoore/events{/privacy}"))
                .body("'items'[2].'repository'.'owner'.'received_events_url'", containsString("https://api.github.com/users/jdpmoore/received_events"))
                .body("'items'[2].'repository'.'owner'.'type'", containsString("User"))
                .body("'items'[2].'repository'.'owner'.'site_admin'", equalTo(false))
                .body("'items'[2].'repository'.'html_url'", containsString("https://github.com/jdpmoore/unicycle"))
                .body("'items'[2].'repository'.'description'", nullValue())
                .body("'items'[2].'repository'.'fork'", equalTo(false))
                .body("'items'[2].'repository'.'url'", containsString("https://api.github.com/repos/jdpmoore/unicycle"))
                .body("'items'[2].'repository'.'forks_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/forks"))
                .body("'items'[2].'repository'.'keys_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/keys{/key_id}"))
                .body("'items'[2].'repository'.'collaborators_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/collaborators{/collaborator}"))
                .body("'items'[2].'repository'.'teams_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/teams"))
                .body("'items'[2].'repository'.'hooks_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/hooks"))
                .body("'items'[2].'repository'.'issue_events_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/issues/events{/number}"))
                .body("'items'[2].'repository'.'events_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/events"))
                .body("'items'[2].'repository'.'assignees_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/assignees{/user}"))
                .body("'items'[2].'repository'.'branches_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/branches{/branch}"))
                .body("'items'[2].'repository'.'tags_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/tags"))
                .body("'items'[2].'repository'.'blobs_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/git/blobs{/sha}"))
                .body("'items'[2].'repository'.'git_tags_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/git/tags{/sha}"))
                .body("'items'[2].'repository'.'git_refs_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/git/refs{/sha}"))
                .body("'items'[2].'repository'.'trees_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/git/trees{/sha}"))
                .body("'items'[2].'repository'.'statuses_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/statuses/{sha}"))
                .body("'items'[2].'repository'.'languages_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/languages"))
                .body("'items'[2].'repository'.'stargazers_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/stargazers"))
                .body("'items'[2].'repository'.'contributors_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/contributors"))
                .body("'items'[2].'repository'.'subscribers_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/subscribers"))
                .body("'items'[2].'repository'.'subscription_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/subscription"))
                .body("'items'[2].'repository'.'commits_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/commits{/sha}"))
                .body("'items'[2].'repository'.'git_commits_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/git/commits{/sha}"))
                .body("'items'[2].'repository'.'comments_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/comments{/number}"))
                .body("'items'[2].'repository'.'issue_comment_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/issues/comments{/number}"))
                .body("'items'[2].'repository'.'contents_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/contents/{+path}"))
                .body("'items'[2].'repository'.'compare_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/compare/{base}...{head}"))
                .body("'items'[2].'repository'.'merges_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/merges"))
                .body("'items'[2].'repository'.'archive_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/{archive_format}{/ref}"))
                .body("'items'[2].'repository'.'downloads_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/downloads"))
                .body("'items'[2].'repository'.'issues_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/issues{/number}"))
                .body("'items'[2].'repository'.'pulls_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/pulls{/number}"))
                .body("'items'[2].'repository'.'milestones_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/milestones{/number}"))
                .body("'items'[2].'repository'.'notifications_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/notifications{?since,all,participating}"))
                .body("'items'[2].'repository'.'labels_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/labels{/name}"))
                .body("'items'[2].'repository'.'releases_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/releases{/id}"))
                .body("'items'[2].'repository'.'deployments_url'", containsString("https://api.github.com/repos/jdpmoore/unicycle/deployments"))
                .body("'items'[2].'score'", numberMatches(1.0))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/gpg_keys")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/imGv1IP8/memberships/hSHdr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/CrXAAAaPJ/auc7d")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-repository"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/xW7icMf/actions/runner-groups/1/runners/ke3pScEj5Ug")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/874/members/YMFHaFN830")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-team-member-legacy"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/meta")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'verifiable_password_authentication'", equalTo(false))
                .body("'ssh_key_fingerprints'.'SHA256_ECDSA'", containsString("p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM"))
                .body("'ssh_key_fingerprints'.'SHA256_ED25519'", containsString("+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU"))
                .body("'ssh_key_fingerprints'.'SHA256_RSA'", containsString("uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s"))
                .body("'ssh_keys'.size()", equalTo(3))
                .body("'ssh_keys'", hasItems("ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl", "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=", "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk="))
                .body("'hooks'.size()", equalTo(6))
                .body("'hooks'", hasItems("192.30.252.0/22", "185.199.108.0/22", "140.82.112.0/20", "143.55.64.0/20", "2a0a:a440::/29", "2606:50c0::/32"))
                .body("'web'.size()", equalTo(14))
                .body("'web'", hasItems("192.30.252.0/22", "185.199.108.0/22", "140.82.112.0/20", "143.55.64.0/20", "2a0a:a440::/29", "2606:50c0::/32", "20.201.28.151/32", "20.205.243.166/32", "20.87.225.212/32", "20.248.137.48/32", "20.207.73.82/32", "20.27.177.113/32", "20.200.245.247/32", "20.233.54.53/32"))
                .body("'api'.size()", equalTo(14))
                .body("'api'", hasItems("192.30.252.0/22", "185.199.108.0/22", "140.82.112.0/20", "143.55.64.0/20", "2a0a:a440::/29", "2606:50c0::/32", "20.201.28.148/32", "20.205.243.168/32", "20.87.225.211/32", "20.248.137.49/32", "20.207.73.85/32", "20.27.177.116/32", "20.200.245.245/32", "20.233.54.49/32"))
                .body("'git'.size()", equalTo(22))
                .body("'git'", hasItems("192.30.252.0/22", "185.199.108.0/22", "140.82.112.0/20", "143.55.64.0/20", "2a0a:a440::/29", "2606:50c0::/32", "20.201.28.151/32", "20.205.243.166/32", "20.87.225.212/32", "20.248.137.48/32", "20.207.73.82/32", "20.27.177.113/32", "20.200.245.247/32", "20.233.54.53/32", "20.201.28.152/32", "20.205.243.160/32", "20.87.225.214/32", "20.248.137.50/32", "20.207.73.83/32", "20.27.177.118/32", "20.200.245.248/32", "20.233.54.52/32"))
                .body("'packages'.size()", equalTo(17))
                .body("'packages'", hasItems("140.82.121.33/32", "140.82.121.34/32", "140.82.113.33/32", "140.82.113.34/32", "140.82.112.33/32", "140.82.112.34/32", "140.82.114.33/32", "140.82.114.34/32", "192.30.255.164/31", "20.201.28.144/32", "20.205.243.164/32", "20.87.225.216/32", "20.248.137.52/32", "20.207.73.86/32", "20.27.177.117/32", "20.200.245.241/32", "20.233.54.55/32"))
                .body("'pages'.size()", equalTo(10))
                .body("'pages'", hasItems("192.30.252.153/32", "192.30.252.154/32", "185.199.108.153/32", "185.199.109.153/32", "185.199.110.153/32", "185.199.111.153/32", "2606:50c0:8000::153/128", "2606:50c0:8001::153/128", "2606:50c0:8002::153/128", "2606:50c0:8003::153/128"))
                .body("'importer'.size()", equalTo(3))
                .body("'importer'", hasItems("52.23.85.212/32", "52.0.228.224/32", "52.22.155.48/32"))
                .body("'actions'.size()", equalTo(3339))
                .body("'actions'", hasItems("4.148.0.0/16", "4.149.0.0/18", "4.149.64.0/19", "4.149.96.0/19", "4.149.128.0/17", "4.150.0.0/18", "4.150.64.0/18", "4.150.128.0/18", "4.150.192.0/19", "4.150.224.0/19", "4.151.0.0/16", "4.152.0.0/15", "4.154.0.0/15", "4.156.0.0/15", "4.175.0.0/16", "4.207.0.0/16", "4.208.0.0/15", "4.210.0.0/16", "4.227.0.0/17", "4.227.128.0/17", "4.231.0.0/17", "4.231.128.0/17", "4.236.0.0/17", "4.236.128.0/17", "4.242.0.0/17", "4.242.128.0/17", "4.245.0.0/17", "4.245.128.0/17", "4.246.0.0/17", "4.246.128.0/17", "4.249.0.0/17", "4.249.128.0/17", "4.255.0.0/17", "13.64.0.0/16", "13.65.0.0/16", "13.66.0.0/17", "13.66.128.0/17", "13.67.128.0/20", "13.67.144.0/21", "13.67.152.0/24", "13.67.153.0/28", "13.67.153.32/27", "13.67.153.64/26", "13.67.153.128/25", "13.67.155.0/24", "13.67.156.0/22", "13.67.160.0/19", "13.67.192.0/18", "13.68.0.0/17", "13.68.128.0/17", "13.69.0.0/17", "13.69.128.0/17", "13.70.192.0/18", "13.72.64.0/18", "13.73.32.0/19", "13.73.128.0/18", "13.73.224.0/21", "13.73.240.0/20", "13.74.0.0/16", "13.77.64.0/18", "13.77.128.0/18", "13.79.0.0/16", "13.80.0.0/15", "13.82.0.0/16", "13.83.0.0/16", "13.84.0.0/15", "13.86.0.0/17", "13.86.128.0/17", "13.87.128.0/17", "13.88.0.0/17", "13.88.128.0/18", "13.88.200.0/21", "13.89.0.0/16", "13.90.0.0/16", "13.91.0.0/16", "13.92.0.0/16", "13.93.0.0/17", "13.93.128.0/17", "13.94.64.0/18", "13.94.128.0/17", "13.95.0.0/16", "13.104.129.64/26", "13.104.144.64/27", "13.104.144.128/27", "13.104.144.192/27", "13.104.145.0/26", "13.104.145.192/26", "13.104.146.0/26", "13.104.146.128/25", "13.104.147.0/25", "13.104.147.128/25", "13.104.148.0/25", "13.104.149.128/25", "13.104.150.0/25", "13.104.152.128/25", "13.104.158.16/28", "13.104.158.64/26", "13.104.158.176/28", "13.104.192.0/21", "13.104.208.64/27", "13.104.208.96/27", "13.104.208.128/27", "13.104.208.160/28", "13.104.208.192/26", "13.104.209.0/24", "13.104.210.0/24", "13.104.211.0/25", "13.104.213.0/25", "13.104.214.0/25", "13.104.214.128/25", "13.104.215.0/25", "13.104.217.0/25", "13.104.218.128/25", "13.104.219.128/25", "13.104.220.0/25", "13.104.220.128/25", "13.104.222.0/24", "13.104.223.0/25", "13.105.14.0/25", "13.105.14.128/26", "13.105.17.0/26", "13.105.17.64/26", "13.105.17.128/26", "13.105.17.192/26", "13.105.18.0/26", "13.105.18.160/27", "13.105.18.192/26", "13.105.19.0/25", "13.105.19.128/25", "13.105.20.192/26", "13.105.21.0/24", "13.105.22.0/24", "13.105.23.0/26", "13.105.23.64/26", "13.105.23.128/25", "13.105.24.0/24", "13.105.25.0/24", "13.105.27.0/25", "13.105.27.192/27", "13.105.28.0/28", "13.105.28.32/28", "13.105.28.48/28", "13.105.28.128/25", "13.105.29.128/25", "13.105.36.0/27", "13.105.36.32/28", "13.105.36.64/27", "13.105.36.128/26", "13.105.36.192/26", "13.105.37.0/26", "13.105.37.192/26", "13.105.49.0/31", "13.105.49.2/31", "13.105.49.4/31", "13.105.49.6/31", "13.105.49.8/31", "13.105.49.10/31", "13.105.49.12/31", "13.105.49.14/31", "13.105.49.16/31", "13.105.49.18/31", "13.105.49.20/31", "13.105.49.22/31", "13.105.49.24/31", "13.105.49.26/31", "13.105.49.28/31", "13.105.49.30/31", "13.105.49.32/31", "13.105.49.34/31", "13.105.49.36/31", "13.105.49.38/31", "13.105.49.40/31", "13.105.49.42/31", "13.105.49.44/31", "13.105.49.46/31", "13.105.49.48/31", "13.105.49.50/31", "13.105.49.52/31", "13.105.49.54/31", "13.105.49.56/31", "13.105.49.58/31", "13.105.49.60/31", "13.105.49.62/31", "13.105.49.64/31", "13.105.49.66/31", "13.105.49.68/31", "13.105.49.70/31", "13.105.49.72/31", "13.105.49.74/31", "13.105.49.76/31", "13.105.49.78/31", "13.105.49.80/31", "13.105.49.82/31", "13.105.49.84/31", "13.105.49.86/31", "13.105.49.88/31", "13.105.49.90/31", "13.105.49.92/31", "13.105.49.94/31", "13.105.49.96/31", "13.105.49.98/31", "13.105.49.100/31", "13.105.49.102/31", "13.105.49.104/31", "13.105.49.106/31", "13.105.49.108/31", "13.105.49.110/31", "13.105.49.112/31", "13.105.49.114/31", "13.105.49.116/31", "13.105.49.118/31", "13.105.49.120/31", "13.105.49.122/31", "13.105.49.124/31", "13.105.49.126/31", "13.105.49.128/31", "13.105.49.130/31", "13.105.49.132/31", "13.105.49.134/31", "13.105.49.136/31", "13.105.49.138/31", "13.105.49.140/31", "13.105.49.142/31", "13.105.49.144/31", "13.105.49.146/31", "13.105.49.148/31", "13.105.49.150/31", "13.105.49.152/31", "13.105.49.154/31", "13.105.49.156/31", "13.105.49.158/31", "13.105.49.160/31", "13.105.49.162/31", "13.105.49.164/31", "13.105.49.166/31", "13.105.49.168/31", "13.105.49.170/31", "13.105.49.172/31", "13.105.49.174/31", "13.105.49.176/31", "13.105.49.178/31", "13.105.49.180/31", "13.105.49.182/31", "13.105.49.184/31", "13.105.49.186/31", "13.105.49.188/31", "13.105.49.190/31", "13.105.49.192/31", "13.105.49.194/31", "13.105.49.196/31", "13.105.49.198/31", "13.105.49.200/31", "13.105.49.202/31", "13.105.49.204/31", "13.105.49.206/31", "13.105.49.208/31", "13.105.49.210/31", "13.105.49.212/31", "13.105.49.214/31", "13.105.49.216/31", "13.105.49.218/31", "13.105.49.220/31", "13.105.49.222/31", "13.105.49.224/31", "13.105.49.226/31", "13.105.49.228/31", "13.105.49.230/31", "13.105.49.232/31", "13.105.49.234/31", "13.105.49.236/31", "13.105.49.238/31", "13.105.49.240/31", "13.105.49.242/31", "13.105.49.244/31", "13.105.49.246/31", "13.105.49.248/31", "13.105.49.250/31", "13.105.49.252/31", "13.105.49.254/31", "13.105.53.0/25", "13.105.53.192/26", "13.105.60.0/27", "13.105.60.32/28", "13.105.60.48/28", "13.105.60.64/27", "13.105.60.96/27", "13.105.60.128/27", "13.105.60.192/26", "13.105.66.32/27", "13.105.66.64/26", "13.105.66.128/28", "13.105.66.144/28", "13.105.66.160/27", "13.105.66.192/26", "13.105.67.0/25", "13.105.67.128/25", "13.105.74.0/27", "13.105.74.32/28", "13.105.74.48/28", "13.105.74.64/27", "13.105.74.128/26", "13.105.75.0/27", "13.105.75.32/28", "13.105.75.64/27", "13.105.96.64/27", "13.105.96.96/28", "13.105.96.128/25", "13.105.97.0/27", "13.105.98.48/28", "13.105.98.96/27", "13.105.98.128/27", "13.105.98.160/27", "13.105.98.192/28", "13.105.98.224/27", "13.105.101.32/28", "13.105.101.48/28", "13.105.101.64/26", "13.105.101.176/28", "13.105.102.224/27", "13.105.103.0/28", "13.105.103.32/27", "13.105.103.128/27", "13.105.103.160/28", "13.105.103.192/27", "13.105.104.32/27", "13.105.104.64/28", "13.105.104.96/27", "13.105.104.240/28", "13.105.105.32/27", "13.105.105.64/27", "13.105.105.96/27", "13.105.105.128/28", "13.105.105.160/27", "13.105.106.0/27", "13.105.106.32/28", "13.105.106.64/27", "13.105.107.112/28", "13.105.107.160/27", "13.105.107.192/27", "13.105.117.0/31", "13.105.117.2/31", "13.105.117.4/31", "13.105.117.6/31", "13.105.117.8/31", "13.105.117.10/31", "13.105.117.12/31", "13.105.117.14/31", "13.105.117.16/31", "13.105.117.18/31", "13.105.117.20/31", "13.105.117.22/31", "13.105.117.24/31", "13.105.117.26/31", "13.105.117.28/31", "13.105.117.30/31", "13.105.117.32/31", "13.105.117.34/31", "13.105.117.36/31", "13.105.117.38/31", "13.105.117.40/31", "13.105.117.42/31", "13.105.117.44/31", "13.105.117.46/31", "13.105.117.48/31", "13.105.117.50/31", "13.105.117.52/31", "13.105.117.54/31", "13.105.117.56/31", "13.105.117.58/31", "13.105.117.60/31", "13.105.117.62/31", "13.105.117.64/31", "13.105.117.66/31", "13.105.117.68/31", "13.105.117.70/31", "13.105.117.72/31", "20.1.128.0/17", "20.3.0.0/16", "20.4.0.0/16", "20.7.0.0/16", "20.8.0.0/16", "20.9.0.0/17", "20.9.128.0/17", "20.10.0.0/16", "20.12.0.0/17", "20.12.128.0/17", "20.13.0.0/17", "20.13.128.0/17", "20.14.0.0/17", "20.14.128.0/17", "20.15.0.0/17", "20.15.128.0/17", "20.16.0.0/16", "20.22.0.0/16", "20.23.0.0/16", "20.25.0.0/17", "20.25.128.0/18", "20.29.0.0/17", "20.29.128.0/17", "20.31.0.0/16", "20.33.1.0/24", "20.33.2.0/24", "20.33.3.0/24", "20.33.135.0/24", "20.36.0.0/19", "20.36.128.0/17", "20.37.128.0/18", "20.38.0.0/20", "20.38.32.0/20", "20.38.64.0/19", "20.38.96.0/23", "20.38.98.0/24", "20.38.99.0/24", "20.38.100.0/23", "20.38.102.0/23", "20.38.104.0/23", "20.38.108.0/23", "20.38.122.0/23", "20.38.160.0/20", "20.38.200.0/22", "20.38.208.0/22", "20.39.32.0/19", "20.40.24.0/21", "20.40.192.0/18", "20.41.0.0/18", "20.42.0.0/17", "20.42.128.0/19", "20.42.160.0/23", "20.42.168.0/21", "20.42.176.0/20", "20.43.192.0/18", "20.44.8.0/21", "20.44.16.0/21", "20.44.64.0/18", "20.45.0.0/18", "20.45.120.0/21", "20.46.224.0/19", "20.47.0.0/24", "20.47.1.0/24", "20.47.2.0/24", "20.47.7.0/24", "20.47.8.0/24", "20.47.16.0/23", "20.47.18.0/23", "20.47.20.0/23", "20.47.22.0/23", "20.47.24.0/23", "20.47.29.0/24", "20.47.30.0/24", "20.47.31.0/24", "20.47.32.0/24", "20.47.58.0/23", "20.47.60.0/23", "20.47.62.0/23", "20.47.69.0/24", "20.47.76.0/23", "20.47.78.0/23", "20.47.96.0/23", "20.47.100.0/24", "20.47.108.0/23", "20.47.110.0/24", "20.47.111.0/24", "20.47.113.0/24", "20.47.115.0/24", "20.47.116.0/24", "20.47.117.0/24", "20.47.118.0/24", "20.47.120.0/23", "20.49.0.0/18", "20.49.88.0/21", "20.49.96.0/21", "20.49.104.0/21", "20.49.120.0/21", "20.50.0.0/18", "20.50.64.0/20", "20.50.80.0/21", "20.50.88.0/21", "20.50.128.0/17", "20.51.8.0/21", "20.51.64.0/18", "20.51.128.0/17", "20.54.0.0/17", "20.54.128.0/17", "20.55.0.0/17", "20.55.192.0/18", "20.56.0.0/16", "20.57.0.0/17", "20.57.128.0/18", "20.57.192.0/19", "20.59.0.0/18", "20.59.64.0/18", "20.60.0.0/24", "20.60.1.0/24", "20.60.2.0/23", "20.60.6.0/23", "20.60.14.0/24", "20.60.18.0/24", "20.60.19.0/24", "20.60.20.0/24", "20.60.26.0/23", "20.60.30.0/23", "20.60.34.0/23", "20.60.38.0/23", "20.60.40.0/23", "20.60.48.0/22", "20.60.52.0/23", "20.60.56.0/22", "20.60.60.0/22", "20.60.64.0/22", "20.60.68.0/22", "20.60.80.0/23", "20.60.88.0/22", "20.60.128.0/23", "20.60.130.0/24", "20.60.132.0/23", "20.60.134.0/23", "20.60.140.0/23", "20.60.144.0/23", "20.60.146.0/23", "20.60.148.0/23", "20.60.150.0/23", "20.60.152.0/23", "20.60.160.0/23", "20.60.162.0/23", "20.60.168.0/23", "20.60.178.0/23", "20.60.180.0/23", "20.60.194.0/23", "20.60.196.0/23", "20.60.204.0/23", "20.60.220.0/23", "20.60.222.0/23", "20.60.224.0/23", "20.60.228.0/23", "20.60.230.0/23", "20.60.232.0/23", "20.60.236.0/23", "20.60.240.0/23", "20.60.244.0/23", "20.60.246.0/23", "20.60.250.0/23", "20.61.0.0/16", "20.62.0.0/17", "20.62.128.0/17", "20.64.0.0/17", "20.64.128.0/17", "20.65.0.0/17", "20.65.128.0/17", "20.66.0.0/17", "20.67.0.0/17", "20.67.128.0/17", "20.69.64.0/18", "20.69.128.0/18", "20.69.192.0/18", "20.71.0.0/16", "20.72.64.0/18", "20.72.128.0/18", "20.72.192.0/18", "20.73.0.0/16", "20.75.0.0/17", "20.75.128.0/17", "20.76.0.0/16", "20.80.64.0/18", "20.80.128.0/18", "20.80.192.0/18", "20.81.0.0/17", "20.81.128.0/17", "20.82.0.0/17", "20.82.128.0/17", "20.83.0.0/18", "20.83.64.0/18", "20.83.128.0/18", "20.83.192.0/18", "20.84.0.0/17", "20.84.128.0/17", "20.85.0.0/17", "20.85.128.0/17", "20.86.0.0/16", "20.88.96.0/19", "20.88.128.0/18", "20.88.192.0/18", "20.93.0.0/17", "20.93.128.0/17", "20.94.0.0/17", "20.94.128.0/18", "20.94.192.0/18", "20.95.0.0/24", "20.95.1.0/24", "20.95.2.0/24", "20.95.3.0/24", "20.95.4.0/24", "20.95.5.0/24", "20.95.6.0/24", "20.95.16.0/24", "20.95.19.0/24", "20.95.21.0/24", "20.95.22.0/24", "20.95.25.0/24", "20.95.26.0/24", "20.95.27.0/24", "20.95.30.0/24", "20.95.31.0/24", "20.95.32.0/24", "20.95.33.0/24", "20.95.34.0/24", "20.95.35.0/24", "20.95.36.0/24", "20.95.37.0/24", "20.95.38.0/23", "20.95.51.0/24", "20.95.52.0/24", "20.95.53.0/24", "20.95.54.0/24", "20.95.64.0/24", "20.95.66.0/24", "20.95.68.0/23", "20.95.73.0/24", "20.95.76.0/23", "20.95.81.0/24", "20.95.88.0/21", "20.95.255.0/29", "20.96.0.0/16", "20.97.0.0/17", "20.97.128.0/17", "20.98.64.0/18", "20.98.128.0/18", "20.98.192.0/18", "20.99.128.0/17", "20.101.0.0/16", "20.102.0.0/17", "20.103.0.0/16", "20.105.0.0/17", "20.105.128.0/17", "20.106.0.0/18", "20.106.64.0/18", "20.106.128.0/17", "20.107.0.0/17", "20.107.128.0/17", "20.109.0.0/17", "20.109.128.0/18", "20.109.192.0/18", "20.110.0.0/16", "20.112.0.0/17", "20.112.184.0/21", "20.112.192.0/18", "20.114.0.0/18", "20.114.64.0/18", "20.114.128.0/17", "20.115.0.0/17", "20.115.128.0/17", "20.118.0.0/18", "20.118.64.0/18", "20.118.128.0/18", "20.118.192.0/18", "20.119.0.0/17", "20.119.128.0/17", "20.120.0.0/17", "20.120.128.0/17", "20.121.0.0/16", "20.122.0.0/16", "20.123.0.0/17", "20.123.128.0/17", "20.124.0.0/16", "20.125.0.0/18", "20.125.64.0/18", "20.125.128.0/19", "20.125.240.0/20", "20.126.0.0/16", "20.127.0.0/16", "20.135.0.0/22", "20.135.4.0/23", "20.135.6.0/23", "20.135.8.0/22", "20.135.16.0/23", "20.135.18.0/23", "20.135.20.0/23", "20.135.24.0/23", "20.135.74.0/23", "20.135.134.0/23", "20.135.136.0/22", "20.135.140.0/22", "20.135.144.0/23", "20.135.188.0/22", "20.135.192.0/23", "20.135.194.0/23", "20.135.196.0/22", "20.135.200.0/22", "20.135.204.0/23", "20.135.216.0/22", "20.135.220.0/23", "20.135.222.0/23", "20.135.224.0/22", "20.135.228.0/22", "20.135.232.0/23", "20.136.0.0/25", "20.136.0.128/25", "20.136.1.0/24", "20.136.2.0/24", "20.136.3.0/25", "20.136.3.128/25", "20.136.4.0/24", "20.136.5.0/24", "20.136.6.0/24", "20.136.7.0/25", "20.143.0.0/24", "20.143.1.0/24", "20.143.2.0/24", "20.143.3.0/24", "20.143.4.0/24", "20.143.5.0/24", "20.143.10.0/23", "20.143.12.0/24", "20.143.13.0/24", "20.143.32.0/23", "20.143.34.0/23", "20.143.38.0/24", "20.143.46.0/23", "20.150.8.0/23", "20.150.20.128/25", "20.150.26.0/24", "20.150.29.0/24", "20.150.30.0/24", "20.150.32.0/23", "20.150.34.0/23", "20.150.36.0/24", "20.150.37.0/24", "20.150.38.0/23", "20.150.42.0/24", "20.150.43.128/25", "20.150.47.128/25", "20.150.48.0/24", "20.150.50.0/23", "20.150.58.0/24", "20.150.63.0/24", "20.150.68.0/24", "20.150.70.0/24", "20.150.72.0/24", "20.150.74.0/24", "20.150.75.0/24", "20.150.76.0/24", "20.150.77.0/24", "20.150.78.0/24", "20.150.79.0/24", "20.150.82.0/24", "20.150.83.0/24", "20.150.84.0/24", "20.150.87.0/24", "20.150.88.0/24", "20.150.89.0/24", "20.150.90.0/24", "20.150.91.0/24", "20.150.93.0/24", "20.150.94.0/24", "20.150.95.0/24", "20.150.102.0/24", "20.150.104.0/24", "20.150.107.0/24", "20.150.122.0/24", "20.150.128.0/17", "20.152.0.0/23", "20.152.2.0/23", "20.152.4.0/23", "20.152.6.0/23", "20.157.6.0/23", "20.157.17.0/24", "20.157.18.0/24", "20.157.19.0/24", "20.157.21.0/24", "20.157.22.0/24", "20.157.24.0/24", "20.157.25.0/24", "20.157.27.0/24", "20.157.29.0/24", "20.157.30.0/24", "20.157.32.0/24", "20.157.33.0/24", "20.157.34.0/23", "20.157.36.0/23", "20.157.39.0/24", "20.157.40.0/24", "20.157.43.0/24", "20.157.48.0/23", "20.157.50.0/23", "20.157.54.0/24", "20.157.57.0/24", "20.157.59.0/24", "20.157.60.0/24", "20.157.61.0/24", "20.157.62.0/23", "20.157.64.0/21", "20.157.72.0/24", "20.157.73.0/24", "20.157.76.0/22", "20.157.80.0/22", "20.157.84.0/24", "20.157.86.0/24", "20.157.87.0/24", "20.157.88.0/24", "20.157.90.0/24", "20.157.91.0/24", "20.157.93.0/24", "20.157.95.0/24", "20.157.97.0/24", "20.157.98.0/24", "20.157.99.0/24", "20.157.100.0/24", "20.157.102.0/24", "20.157.103.0/24", "20.157.104.0/23", "20.157.106.0/24", "20.157.108.0/23", "20.157.110.0/24", "20.157.111.0/24", "20.157.114.0/24", "20.157.115.0/24", "20.157.116.0/24", "20.157.118.0/24", "20.157.119.0/24", "20.157.122.0/24", "20.157.123.0/24", "20.157.124.0/24", "20.157.125.0/24", "20.157.127.0/24", "20.157.130.0/24", "20.157.132.0/24", "20.157.134.0/24", "20.157.142.0/23", "20.157.145.0/24", "20.157.146.0/24", "20.157.147.0/24", "20.157.158.0/24", "20.157.159.0/24", "20.157.163.0/24", "20.157.164.0/24", "20.157.166.0/24", "20.157.167.0/24", "20.157.170.0/24", "20.157.171.0/24", "20.157.179.0/24", "20.157.180.0/24", "20.157.181.0/24", "20.157.184.0/24", "20.157.185.0/24", "20.157.186.0/24", "20.157.191.0/24", "20.157.194.0/24", "20.157.209.0/24", "20.157.212.0/24", "20.157.215.0/24", "20.157.216.0/24", "20.157.217.0/24", "20.157.221.0/24", "20.157.223.0/24", "20.157.230.0/24", "20.157.231.0/24", "20.157.236.0/24", "20.157.239.0/24", "20.157.240.0/24", "20.157.244.0/24", "20.157.245.0/24", "20.157.247.0/24", "20.157.248.0/24", "20.157.249.0/24", "20.157.250.0/24", "20.157.251.0/24", "20.157.252.0/24", "20.157.253.0/24", "20.160.0.0/16", "20.161.0.0/16", "20.163.0.0/17", "20.163.128.0/17", "20.165.0.0/17", "20.166.0.0/16", "20.168.0.0/17", "20.168.128.0/19", "20.168.160.0/21", "20.168.192.0/18", "20.169.0.0/17", "20.169.128.0/17", "20.171.0.0/16", "20.172.0.0/17", "20.172.128.0/17", "20.184.64.0/18", "20.184.128.0/17", "20.185.0.0/16", "20.186.0.0/17", "20.186.128.0/18", "20.186.192.0/18", "20.187.0.0/18", "20.188.64.0/19", "20.189.0.0/18", "20.189.128.0/18", "20.190.0.0/18", "20.190.128.0/24", "20.190.129.0/24", "20.190.130.0/24", "20.190.131.0/24", "20.190.132.0/24", "20.190.133.0/24", "20.190.134.0/24", "20.190.137.0/24", "20.190.151.0/24", "20.190.152.0/24", "20.190.153.0/24", "20.190.154.0/24", "20.190.155.0/24", "20.190.157.0/24", "20.190.159.0/24", "20.190.160.0/24", "20.190.190.128/25", "20.190.192.0/18", "20.191.0.0/18", "20.191.64.0/18", "20.201.147.0/24", "20.201.148.0/24", "20.201.223.0/24", "20.201.224.0/23", "20.201.231.0/24", "20.202.1.0/24", "20.202.2.0/24", "20.202.12.0/22", "20.202.16.0/22", "20.202.20.0/24", "20.202.21.0/24", "20.202.22.0/24", "20.202.23.0/24", "20.202.24.0/24", "20.202.25.0/24", "20.202.26.0/23", "20.202.28.0/23", "20.202.30.0/24", "20.202.31.0/24", "20.202.32.0/23", "20.202.34.0/24", "20.202.35.0/24", "20.202.36.0/23", "20.202.38.0/24", "20.202.39.0/24", "20.202.84.0/24", "20.202.85.0/24", "20.202.89.0/24", "20.202.90.0/24", "20.202.93.0/24", "20.202.94.0/24", "20.202.97.0/24", "20.202.98.0/24", "20.202.105.0/24", "20.202.106.0/24", "20.202.109.0/24", "20.202.110.0/24", "20.202.113.0/24", "20.202.114.0/24", "20.202.117.0/24", "20.202.118.0/24", "20.202.119.0/24", "20.202.120.0/22", "20.202.124.0/24", "20.202.125.0/24", "20.202.126.0/24", "20.202.129.0/24", "20.202.130.0/24", "20.202.133.0/24", "20.202.134.0/24", "20.202.137.0/24", "20.202.138.0/24", "20.202.140.0/24", "20.202.141.0/24", "20.202.142.0/23", "20.202.144.0/22", "20.202.148.0/23", "20.202.150.0/24", "20.202.151.0/24", "20.202.152.0/24", "20.202.153.0/24", "20.202.154.0/24", "20.202.155.0/24", "20.202.156.0/24", "20.202.157.0/24", "20.202.158.0/24", "20.202.159.0/24", "20.202.160.0/24", "20.202.161.0/24", "20.202.162.0/24", "20.202.163.0/24", "20.202.164.0/24", "20.202.165.0/24", "20.202.166.0/24", "20.209.0.0/23", "20.209.4.0/23", "20.209.10.0/23", "20.209.14.0/23", "20.209.18.0/23", "20.209.26.0/23", "20.209.34.0/23", "20.209.36.0/23", "20.209.40.0/23", "20.209.48.0/23", "20.209.52.0/23", "20.209.58.0/23", "20.209.62.0/23", "20.209.68.0/23", "20.209.72.0/23", "20.209.74.0/23", "20.209.76.0/23", "20.209.84.0/23", "20.209.90.0/23", "20.209.92.0/23", "20.209.96.0/23", "20.209.98.0/23", "20.209.100.0/23", "20.209.102.0/23", "20.209.104.0/23", "20.209.106.0/23", "20.209.108.0/23", "20.209.110.0/23", "20.209.112.0/23", "20.209.116.0/23", "20.221.0.0/17", "20.223.0.0/16", "20.224.0.0/16", "20.225.0.0/16", "20.228.64.0/18", "20.228.128.0/17", "20.229.0.0/16", "20.230.0.0/17", "20.230.128.0/17", "20.231.0.0/17", "20.231.192.0/18", "20.232.0.0/16", "20.234.0.0/17", "20.234.128.0/17", "20.236.0.0/18", "20.236.128.0/18", "20.236.192.0/18", "20.237.0.0/17", "20.237.128.0/17", "20.238.0.0/17", "20.238.128.0/17", "20.241.128.0/17", "20.242.0.0/17", "20.242.128.0/17", "20.245.0.0/16", "20.246.0.0/17", "20.246.128.0/17", "20.252.0.0/17", "20.253.0.0/17", "20.253.128.0/17", "23.96.0.0/17", "23.97.128.0/17", "23.98.45.0/24", "23.98.46.0/24", "23.98.47.0/24", "23.98.128.0/17", "23.99.0.0/18", "23.99.64.0/19", "23.99.128.0/17", "23.100.0.0/20", "23.100.16.0/20", "23.100.32.0/20", "23.100.48.0/20", "23.100.64.0/21", "23.100.80.0/21", "23.100.120.0/21", "23.100.128.0/18", "23.100.240.0/20", "23.101.32.0/21", "23.101.48.0/20", "23.101.64.0/20", "23.101.80.0/21", "23.101.112.0/20", "23.101.128.0/20", "23.101.144.0/20", "23.101.176.0/20", "23.101.192.0/20", "23.102.0.0/18", "23.102.96.0/19", "23.102.128.0/18", "23.102.192.0/21", "23.102.202.0/24", "23.102.203.0/24", "23.102.204.0/22", "23.102.208.0/20", "23.103.64.32/27", "23.103.64.64/27", "40.64.64.0/18", "40.64.128.0/21", "40.64.144.0/27", "40.64.144.32/27", "40.64.144.64/27", "40.64.144.192/29", "40.64.145.0/28", "40.64.145.160/28", "40.64.145.176/28", "40.64.146.80/28", "40.64.146.176/28", "40.64.146.192/28", "40.65.0.0/18", "40.65.64.0/18", "40.65.192.0/18", "40.67.128.0/19", "40.67.160.0/19", "40.67.192.0/19", "40.67.224.0/19", "40.68.0.0/16", "40.69.0.0/18", "40.69.64.0/19", "40.69.128.0/18", "40.69.192.0/19", "40.70.0.0/18", "40.70.64.0/20", "40.70.80.0/21", "40.70.128.0/17", "40.71.0.0/16", "40.74.0.0/18", "40.74.160.0/19", "40.74.192.0/18", "40.75.0.0/19", "40.75.64.0/18", "40.75.128.0/17", "40.76.0.0/16", "40.77.0.0/17", "40.77.128.128/25", "40.77.129.0/24", "40.77.130.0/25", "40.77.130.128/26", "40.77.130.192/26", "40.77.131.0/25", "40.77.131.128/26", "40.77.132.0/24", "40.77.133.0/24", "40.77.136.0/28", "40.77.136.32/28", "40.77.136.48/28", "40.77.136.64/28", "40.77.136.80/28", "40.77.137.0/25", "40.77.137.128/26", "40.77.138.0/25", "40.77.138.128/25", "40.77.139.128/25", "40.77.160.0/27", "40.77.161.64/26", "40.77.162.0/24", "40.77.163.0/24", "40.77.164.0/24", "40.77.165.0/24", "40.77.166.160/27", "40.77.166.192/26", "40.77.167.0/24", "40.77.168.0/24", "40.77.169.0/24", "40.77.170.0/24", "40.77.171.0/24", "40.77.172.0/24", "40.77.174.0/24", "40.77.175.64/27", "40.77.175.96/27", "40.77.175.160/27", "40.77.175.192/27", "40.77.175.240/28", "40.77.177.0/24", "40.77.178.0/23", "40.77.180.0/23", "40.77.182.0/28", "40.77.182.16/28", "40.77.182.32/27", "40.77.182.64/27", "40.77.182.96/27", "40.77.182.192/26", "40.77.184.0/25", "40.77.184.128/25", "40.77.185.128/25", "40.77.186.0/23", "40.77.197.0/24", "40.77.198.0/26", "40.77.198.128/25", "40.77.199.0/25", "40.77.199.128/26", "40.77.199.192/26", "40.77.200.0/25", "40.77.202.0/24", "40.77.224.96/27", "40.77.224.128/25", "40.77.225.0/24", "40.77.226.128/25", "40.77.228.0/24", "40.77.229.0/24", "40.77.230.0/24", "40.77.232.128/25", "40.77.233.0/24", "40.77.234.160/27", "40.77.234.192/27", "40.77.234.224/27", "40.77.236.0/27", "40.77.236.80/28", "40.77.236.128/27", "40.77.236.176/28", "40.77.237.64/26", "40.77.240.0/25", "40.77.240.128/25", "40.77.241.0/24", "40.77.242.0/23", "40.77.244.0/25", "40.77.245.0/24", "40.77.247.0/24", "40.77.248.0/25", "40.77.249.0/24", "40.77.250.0/24", "40.77.251.0/24", "40.77.254.128/25", "40.77.255.0/25", "40.77.255.128/26", "40.78.0.0/17", "40.78.128.0/18", "40.78.208.32/30", "40.78.208.48/28", "40.78.210.0/24", "40.78.211.0/24", "40.78.214.0/24", "40.78.216.0/24", "40.78.217.0/24", "40.78.219.0/24", "40.78.220.0/24", "40.78.221.0/24", "40.78.224.0/21", "40.78.240.0/20", "40.79.0.0/21", "40.79.8.0/27", "40.79.8.32/28", "40.79.8.64/27", "40.79.8.96/28", "40.79.9.0/24", "40.79.16.0/20", "40.79.32.0/20", "40.79.48.0/27", "40.79.48.32/28", "40.79.49.0/24", "40.79.56.0/21", "40.79.64.0/20", "40.79.80.0/21", "40.79.90.0/24", "40.79.91.0/28", "40.79.92.0/24", "40.79.93.0/28", "40.79.94.0/24", "40.79.95.0/28", "40.79.152.0/21", "40.79.204.0/27", "40.79.204.32/28", "40.79.204.48/28", "40.79.204.64/27", "40.79.204.96/27", "40.79.204.128/27", "40.79.204.160/27", "40.79.205.64/28", "40.79.205.96/27", "40.79.205.192/27", "40.79.205.224/28", "40.79.206.0/27", "40.79.206.64/27", "40.79.206.128/27", "40.79.206.160/27", "40.79.206.192/27", "40.79.207.80/28", "40.79.207.128/25", "40.79.240.0/20", "40.80.144.0/21", "40.80.152.0/21", "40.80.160.0/24", "40.80.192.0/19", "40.81.0.0/20", "40.82.4.0/22", "40.82.16.0/22", "40.82.24.0/22", "40.82.36.0/22", "40.82.44.0/22", "40.82.60.0/22", "40.82.92.0/22", "40.82.96.0/22", "40.82.248.0/21", "40.83.0.0/20", "40.83.16.0/21", "40.83.24.0/26", "40.83.24.64/27", "40.83.24.128/25", "40.83.25.0/24", "40.83.26.0/23", "40.83.28.0/22", "40.83.32.0/19", "40.83.128.0/17", "40.84.0.0/17", "40.84.128.0/17", "40.85.0.0/17", "40.85.128.0/20", "40.85.144.0/20", "40.85.160.0/19", "40.86.0.0/17", "40.86.128.0/19", "40.86.160.0/19", "40.87.0.0/17", "40.87.128.0/19", "40.87.160.0/22", "40.87.164.0/22", "40.87.168.0/30", "40.87.168.8/29", "40.87.168.16/28", "40.87.168.32/29", "40.87.168.48/28", "40.87.168.64/30", "40.87.168.70/31", "40.87.168.72/29", "40.87.168.80/28", "40.87.168.96/27", "40.87.168.128/26", "40.87.168.192/28", "40.87.168.210/31", "40.87.168.212/30", "40.87.168.216/29", "40.87.168.224/27", "40.87.169.0/27", "40.87.169.32/29", "40.87.169.44/30", "40.87.169.48/29", "40.87.169.56/31", "40.87.169.60/30", "40.87.169.64/27", "40.87.169.96/31", "40.87.169.102/31", "40.87.169.104/29", "40.87.169.112/28", "40.87.169.128/29", "40.87.169.136/31", "40.87.169.140/30", "40.87.169.160/27", "40.87.169.192/26", "40.87.170.0/25", "40.87.170.128/28", "40.87.170.144/31", "40.87.170.152/29", "40.87.170.160/28", "40.87.170.176/29", "40.87.170.184/30", "40.87.170.194/31", "40.87.170.196/30", "40.87.170.214/31", "40.87.170.216/30", "40.87.170.228/30", "40.87.170.232/29", "40.87.170.240/29", "40.87.170.248/30", "40.87.171.2/31", "40.87.171.4/30", "40.87.171.8/29", "40.87.171.16/28", "40.87.171.36/30", "40.87.171.40/31", "40.87.171.72/29", "40.87.171.80/28", "40.87.171.96/27", "40.87.171.128/27", "40.87.171.160/31", "40.87.171.166/31", "40.87.171.168/29", "40.87.171.176/28", "40.87.171.192/27", "40.87.171.224/28", "40.87.171.240/29", "40.87.171.248/31", "40.87.176.0/25", "40.87.176.128/27", "40.87.176.160/29", "40.87.176.174/31", "40.87.176.184/30", "40.87.176.192/28", "40.87.176.216/29", "40.87.176.224/29", "40.87.176.232/31", "40.87.176.240/28", "40.87.177.16/28", "40.87.177.32/27", "40.87.177.64/27", "40.87.177.96/28", "40.87.177.112/29", "40.87.177.120/31", "40.87.177.124/30", "40.87.177.128/28", "40.87.177.144/29", "40.87.177.152/31", "40.87.177.156/30", "40.87.177.160/27", "40.87.177.192/29", "40.87.177.200/30", "40.87.177.212/30", "40.87.177.216/29", "40.87.177.224/27", "40.87.178.0/24", "40.87.179.0/25", "40.87.179.128/26", "40.87.179.192/31", "40.87.179.202/31", "40.87.179.204/30", "40.87.179.208/28", "40.87.179.224/27", "40.87.180.0/30", "40.87.180.4/31", "40.87.180.14/31", "40.87.180.16/30", "40.87.180.20/31", "40.87.180.28/30", "40.87.180.32/29", "40.87.180.42/31", "40.87.180.44/30", "40.87.180.48/28", "40.87.180.64/30", "40.87.180.74/31", "40.87.180.76/30", "40.87.180.80/28", "40.87.180.96/27", "40.87.180.128/26", "40.87.180.192/30", "40.87.180.202/31", "40.87.180.204/30", "40.87.180.208/28", "40.87.180.224/28", "40.87.180.240/29", "40.87.180.248/30", "40.87.181.4/30", "40.87.181.8/29", "40.87.181.16/28", "40.87.181.32/27", "40.87.181.64/26", "40.87.181.128/28", "40.87.181.144/29", "40.87.181.152/31", "40.87.181.162/31", "40.87.181.164/30", "40.87.181.168/29", "40.87.181.176/28", "40.87.181.192/26", "40.87.182.4/30", "40.87.182.8/29", "40.87.182.24/29", "40.87.182.32/28", "40.87.182.48/29", "40.87.182.56/30", "40.87.182.62/31", "40.87.182.64/26", "40.87.182.128/25", "40.87.183.0/28", "40.87.183.16/29", "40.87.183.24/30", "40.87.183.34/31", "40.87.183.36/30", "40.87.183.42/31", "40.87.183.44/30", "40.87.183.54/31", "40.87.183.56/29", "40.87.183.64/26", "40.87.183.144/28", "40.87.183.160/27", "40.87.183.192/27", "40.87.183.224/29", "40.87.183.232/30", "40.87.183.236/31", "40.87.183.244/30", "40.87.183.248/29", "40.87.184.0/22", "40.87.188.0/22", "40.87.232.0/21", "40.88.0.0/16", "40.89.224.0/19", "40.90.16.0/27", "40.90.16.128/27", "40.90.16.192/26", "40.90.17.64/27", "40.90.17.96/27", "40.90.17.192/27", "40.90.18.64/26", "40.90.18.128/26", "40.90.18.192/26", "40.90.19.128/25", "40.90.20.0/25", "40.90.20.128/25", "40.90.21.0/25", "40.90.21.128/25", "40.90.22.0/25", "40.90.22.128/25", "40.90.23.0/25", "40.90.23.128/25", "40.90.24.128/25", "40.90.25.0/26", "40.90.25.64/26", "40.90.25.128/26", "40.90.25.192/26", "40.90.26.128/25", "40.90.27.64/26", "40.90.27.128/26", "40.90.28.64/26", "40.90.28.128/26", "40.90.30.160/27", "40.90.30.192/26", "40.90.31.128/25", "40.90.128.16/28", "40.90.128.128/28", "40.90.128.224/28", "40.90.129.128/26", "40.90.129.192/27", "40.90.129.224/27", "40.90.130.0/27", "40.90.130.64/28", "40.90.130.96/28", "40.90.130.160/27", "40.90.130.192/28", "40.90.130.224/28", "40.90.131.32/27", "40.90.131.192/27", "40.90.131.224/27", "40.90.132.48/28", "40.90.132.128/26", "40.90.132.192/26", "40.90.133.0/27", "40.90.133.64/27", "40.90.133.96/28", "40.90.133.112/28", "40.90.134.64/26", "40.90.134.128/26", "40.90.134.192/26", "40.90.135.0/26", "40.90.135.128/25", "40.90.136.0/28", "40.90.136.16/28", "40.90.136.32/27", "40.90.136.160/28", "40.90.136.176/28", "40.90.136.224/27", "40.90.137.96/27", "40.90.137.192/27", "40.90.137.224/27", "40.90.138.0/27", "40.90.138.160/27", "40.90.138.208/28", "40.90.139.32/27", "40.90.139.192/27", "40.90.139.224/27", "40.90.140.64/27", "40.90.140.96/27", "40.90.140.160/27", "40.90.140.192/27", "40.90.140.224/27", "40.90.141.0/27", "40.90.141.32/27", "40.90.141.96/27", "40.90.141.128/27", "40.90.141.160/27", "40.90.142.128/27", "40.90.142.224/28", "40.90.142.240/28", "40.90.143.0/27", "40.90.143.192/26", "40.90.144.0/27", "40.90.144.64/26", "40.90.144.128/26", "40.90.144.192/27", "40.90.145.0/27", "40.90.145.32/27", "40.90.145.64/27", "40.90.145.160/27", "40.90.145.192/27", "40.90.145.224/27", "40.90.146.0/28", "40.90.146.16/28", "40.90.146.32/27", "40.90.146.64/26", "40.90.146.128/27", "40.90.147.0/27", "40.90.147.96/27", "40.90.148.0/26", "40.90.148.64/27", "40.90.148.96/27", "40.90.148.128/27", "40.90.148.160/28", "40.90.148.176/28", "40.90.148.192/27", "40.90.149.96/27", "40.90.149.128/25", "40.90.150.32/27", "40.90.150.128/25", "40.90.151.144/28", "40.90.152.160/27", "40.90.153.0/26", "40.90.153.96/27", "40.90.153.128/25", "40.90.154.64/26", "40.90.155.0/26", "40.90.155.128/26", "40.90.156.128/26", "40.90.156.192/26", "40.90.157.64/26", "40.90.157.128/26", "40.90.158.64/26", "40.90.158.128/25", "40.90.159.0/24", "40.90.192.0/19", "40.90.224.0/19", "40.91.0.0/22", "40.91.4.0/22", "40.91.12.16/28", "40.91.12.48/28", "40.91.12.64/26", "40.91.12.128/28", "40.91.12.160/27", "40.91.12.208/28", "40.91.12.240/28", "40.91.13.64/27", "40.91.13.96/28", "40.91.13.128/27", "40.91.13.240/28", "40.91.14.0/24", "40.91.16.0/22", "40.91.20.0/22", "40.91.28.0/22", "40.91.32.0/22", "40.91.64.0/18", "40.91.160.0/19", "40.91.192.0/18", "40.93.0.0/23", "40.93.2.0/24", "40.93.3.0/24", "40.93.4.0/24", "40.93.5.0/24", "40.93.7.0/24", "40.93.8.0/24", "40.93.9.0/24", "40.93.10.0/24", "40.93.11.0/24", "40.93.12.0/24", "40.93.13.0/24", "40.93.14.0/24", "40.93.64.0/24", "40.93.65.0/24", "40.93.192.0/24", "40.93.193.0/24", "40.93.194.0/23", "40.93.196.0/23", "40.96.50.0/24", "40.96.61.0/24", "40.96.63.0/24", "40.97.4.0/24", "40.97.5.0/24", "40.97.6.0/24", "40.97.7.0/24", "40.97.12.0/24", "40.97.14.0/26", "40.97.20.0/24", "40.97.22.0/24", "40.101.2.0/24", "40.101.3.0/25", "40.112.36.0/25", "40.112.36.128/25", "40.112.37.0/26", "40.112.37.64/26", "40.112.38.192/26", "40.112.48.0/20", "40.112.64.0/19", "40.112.96.0/19", "40.112.128.0/17", "40.113.0.0/18", "40.113.64.0/19", "40.113.96.0/19", "40.113.128.0/18", "40.113.192.0/18", "40.114.0.0/17", "40.114.128.0/17", "40.115.0.0/18", "40.115.96.0/19", "40.117.32.0/19", "40.117.64.0/18", "40.117.128.0/17", "40.118.0.0/17", "40.118.128.0/17", "40.119.0.0/18", "40.119.88.0/22", "40.119.128.0/19", "40.121.0.0/16", "40.122.16.0/20", "40.122.32.0/19", "40.122.64.0/18", "40.122.128.0/17", "40.123.0.0/17", "40.123.132.0/22", "40.123.140.0/22", "40.123.144.0/26", "40.123.144.64/29", "40.123.144.104/29", "40.123.144.112/28", "40.123.144.128/28", "40.123.144.144/29", "40.123.144.156/30", "40.123.144.160/27", "40.123.144.192/27", "40.123.144.224/28", "40.123.144.240/29", "40.123.144.248/30", "40.123.144.252/31", "40.123.145.6/31", "40.123.145.8/30", "40.123.145.12/31", "40.123.145.22/31", "40.123.145.24/29", "40.123.145.32/28", "40.123.145.48/29", "40.123.145.56/30", "40.123.145.68/30", "40.123.145.72/29", "40.123.145.80/28", "40.123.145.96/27", "40.123.145.128/27", "40.123.145.160/30", "40.123.145.166/31", "40.123.145.168/29", "40.123.145.176/28", "40.123.145.192/28", "40.123.145.208/30", "40.123.145.212/31", "40.123.145.222/31", "40.123.145.224/27", "40.123.146.0/28", "40.123.146.16/29", "40.123.146.24/30", "40.123.146.28/31", "40.123.146.42/31", "40.123.146.44/30", "40.123.146.48/31", "40.123.146.54/31", "40.123.146.56/29", "40.123.146.64/26", "40.123.146.128/27", "40.123.146.160/30", "40.123.146.164/31", "40.123.146.182/31", "40.123.146.184/29", "40.123.146.192/29", "40.123.146.200/30", "40.123.146.204/31", "40.123.146.210/31", "40.123.146.212/30", "40.123.146.216/29", "40.123.146.224/27", "40.123.147.0/27", "40.123.147.32/31", "40.123.147.38/31", "40.123.147.40/29", "40.123.147.48/28", "40.123.147.64/28", "40.123.147.80/30", "40.123.147.84/31", "40.123.147.104/29", "40.123.147.112/29", "40.123.147.138/31", "40.123.147.140/30", "40.123.147.144/31", "40.123.147.148/30", "40.123.147.152/29", "40.123.147.160/28", "40.123.147.176/30", "40.123.147.180/31", "40.123.147.184/29", "40.123.147.192/26", "40.123.152.0/22", "40.123.156.0/22", "40.123.160.0/22", "40.123.164.0/25", "40.123.164.128/29", "40.123.164.136/31", "40.123.164.150/31", "40.123.164.152/29", "40.123.164.160/27", "40.123.164.192/26", "40.123.165.4/30", "40.123.165.8/29", "40.123.165.16/29", "40.123.165.24/30", "40.123.165.30/31", "40.123.165.32/30", "40.123.165.36/31", "40.123.168.0/24", "40.123.169.0/30", "40.123.169.6/31", "40.123.169.8/29", "40.123.169.16/28", "40.123.169.32/27", "40.123.169.64/27", "40.123.169.96/29", "40.123.169.104/31", "40.123.169.108/30", "40.123.169.112/28", "40.123.169.140/30", "40.123.169.144/28", "40.123.169.160/27", "40.123.169.192/26", "40.123.170.0/29", "40.123.170.8/30", "40.123.170.12/31", "40.123.170.22/31", "40.123.170.24/29", "40.123.170.32/28", "40.123.170.52/30", "40.123.170.86/31", "40.123.170.88/31", "40.123.176.0/22", "40.123.180.0/22", "40.123.184.0/26", "40.123.184.64/28", "40.123.184.80/29", "40.123.184.88/31", "40.123.184.98/31", "40.123.184.100/30", "40.123.184.104/29", "40.123.184.112/28", "40.123.184.128/27", "40.123.184.168/29", "40.123.184.176/29", "40.123.184.184/31", "40.123.184.194/31", "40.123.184.196/30", "40.123.184.200/30", "40.123.184.204/31", "40.123.184.208/29", "40.123.184.230/31", "40.123.184.232/29", "40.124.0.0/16", "40.125.32.0/19", "40.125.64.0/18", "40.126.0.0/24", "40.126.1.0/24", "40.126.2.0/24", "40.126.3.0/24", "40.126.4.0/24", "40.126.5.0/24", "40.126.6.0/24", "40.126.9.0/24", "40.126.23.0/24", "40.126.24.0/24", "40.126.25.0/24", "40.126.26.0/24", "40.126.27.0/24", "40.126.29.0/24", "40.126.31.0/24", "40.126.32.0/24", "40.126.62.128/25", "40.126.202.0/24", "40.127.96.0/20", "40.127.128.0/17", "51.104.64.0/18", "51.104.128.0/18", "51.105.96.0/19", "51.105.128.0/17", "51.124.0.0/16", "51.136.0.0/16", "51.137.0.0/17", "51.137.192.0/18", "51.138.0.0/17", "51.138.176.0/20", "51.138.224.0/20", "51.141.160.0/19", "51.143.0.0/17", "51.144.0.0/16", "51.145.128.0/17", "52.96.11.0/24", "52.101.0.0/22", "52.101.4.0/22", "52.101.8.0/24", "52.101.9.0/24", "52.101.10.0/24", "52.101.11.0/24", "52.101.12.0/22", "52.101.16.0/22", "52.101.20.0/22", "52.101.28.0/22", "52.101.32.0/22", "52.101.36.0/22", "52.101.41.0/24", "52.101.42.0/24", "52.101.43.0/24", "52.101.44.0/23", "52.101.46.0/23", "52.101.48.0/23", "52.101.50.0/24", "52.101.51.0/24", "52.101.52.0/22", "52.101.56.0/22", "52.101.60.0/24", "52.101.61.0/24", "52.101.62.0/23", "52.101.64.0/24", "52.101.65.0/24", "52.101.66.0/23", "52.101.68.0/24", "52.101.69.0/24", "52.101.70.0/23", "52.101.72.0/23", "52.101.84.0/24", "52.101.85.0/24", "52.101.86.0/23", "52.102.128.0/24", "52.102.129.0/24", "52.102.130.0/24", "52.102.131.0/24", "52.102.132.0/24", "52.102.134.0/24", "52.102.135.0/24", "52.102.136.0/24", "52.102.137.0/24", "52.102.138.0/24", "52.102.139.0/24", "52.102.140.0/24", "52.102.158.0/24", "52.102.159.0/24", "52.102.160.0/24", "52.102.161.0/24", "52.103.0.0/24", "52.103.1.0/24", "52.103.2.0/24", "52.103.3.0/24", "52.103.4.0/24", "52.103.5.0/24", "52.103.6.0/24", "52.103.8.0/24", "52.103.9.0/24", "52.103.10.0/24", "52.103.11.0/24", "52.103.12.0/24", "52.103.13.0/24", "52.103.14.0/24", "52.103.32.0/24", "52.103.33.0/24", "52.103.128.0/24", "52.103.129.0/24", "52.103.130.0/24", "52.103.131.0/24", "52.103.132.0/24", "52.103.134.0/24", "52.103.136.0/24", "52.103.137.0/24", "52.103.138.0/24", "52.103.139.0/24", "52.103.140.0/24", "52.103.160.0/24", "52.103.161.0/24", "52.108.0.0/21", "52.108.16.0/21", "52.108.24.0/21", "52.108.56.0/21", "52.108.72.0/24", "52.108.78.0/24", "52.108.79.0/24", "52.108.80.0/24", "52.108.93.0/24", "52.108.102.0/23", "52.108.104.0/24", "52.108.105.0/24", "52.108.106.0/23", "52.108.108.0/23", "52.108.110.0/24", "52.108.139.0/24", "52.108.165.0/24", "52.108.166.0/23", "52.108.174.0/23", "52.108.176.0/24", "52.108.185.0/24", "52.108.186.0/24", "52.108.196.0/24", "52.108.197.0/24", "52.108.208.0/21", "52.108.216.0/22", "52.108.240.0/21", "52.108.248.0/21", "52.109.0.0/22", "52.109.4.0/22", "52.109.8.0/22", "52.109.12.0/22", "52.109.20.0/22", "52.109.24.0/22", "52.109.76.0/22", "52.109.88.0/22", "52.111.227.0/24", "52.111.229.0/24", "52.111.230.0/24", "52.111.236.0/24", "52.111.239.0/24", "52.111.243.0/24", "52.111.245.0/24", "52.111.246.0/24", "52.112.14.0/23", "52.112.17.0/24", "52.112.18.0/23", "52.112.22.0/24", "52.112.23.0/24", "52.112.24.0/21", "52.112.38.0/24", "52.112.39.0/24", "52.112.72.0/24", "52.112.76.0/22", "52.112.83.0/24", "52.112.84.0/23", "52.112.86.0/23", "52.112.92.0/24", "52.112.95.0/24", "52.112.97.0/24", "52.112.98.0/23", "52.112.101.0/24", "52.112.102.0/24", "52.112.104.0/24", "52.112.105.0/24", "52.112.106.0/23", "52.112.108.0/24", "52.112.109.0/24", "52.112.110.0/23", "52.112.112.0/24", "52.112.113.0/24", "52.112.114.0/24", "52.112.115.0/24", "52.112.116.0/24", "52.112.117.0/24", "52.112.123.0/24", "52.112.124.0/24", "52.112.127.0/24", "52.112.144.0/20", "52.112.191.0/24", "52.112.197.0/24", "52.112.216.0/21", "52.112.229.0/24", "52.112.232.0/24", "52.112.233.0/24", "52.112.236.0/24", "52.112.237.0/24", "52.112.238.0/24", "52.113.9.0/24", "52.113.12.0/24", "52.113.16.0/20", "52.113.37.0/24", "52.113.38.0/23", "52.113.40.0/21", "52.113.48.0/20", "52.113.69.0/24", "52.113.83.0/24", "52.113.85.0/24", "52.113.86.0/24", "52.113.112.0/20", "52.113.129.0/24", "52.113.130.0/24", "52.113.136.0/21", "52.113.144.0/21", "52.113.160.0/19", "52.113.199.0/24", "52.113.205.0/24", "52.113.206.0/24", "52.113.208.0/20", "52.114.72.0/22", "52.114.76.0/22", "52.114.128.0/22", "52.114.132.0/22", "52.114.136.0/21", "52.114.144.0/22", "52.114.148.0/22", "52.114.152.0/21", "52.114.172.0/22", "52.114.180.0/22", "52.114.184.0/23", "52.114.186.0/23", "52.114.206.0/23", "52.114.208.0/24", "52.114.210.0/23", "52.114.212.0/23", "52.114.231.0/24", "52.114.233.0/24", "52.114.241.0/24", "52.114.242.0/24", "52.114.248.0/22", "52.114.252.0/22", "52.115.54.0/24", "52.115.55.0/24", "52.115.62.0/23", "52.115.68.0/22", "52.115.76.0/22", "52.115.84.0/22", "52.115.88.0/22", "52.115.92.0/24", "52.115.93.0/24", "52.115.140.0/22", "52.115.144.0/20", "52.115.160.0/19", "52.115.192.0/19", "52.115.224.0/23", "52.115.226.0/23", "52.115.228.0/23", "52.115.230.0/24", "52.115.231.0/24", "52.115.232.0/24", "52.115.233.0/24", "52.115.234.0/24", "52.115.242.0/23", "52.120.0.0/19", "52.120.32.0/19", "52.120.64.0/19", "52.120.96.0/19", "52.120.128.0/21", "52.120.136.0/21", "52.120.152.0/22", "52.120.192.0/20", "52.120.208.0/20", "52.120.224.0/20", "52.121.0.0/21", "52.121.16.0/21", "52.121.24.0/21", "52.121.32.0/22", "52.121.36.0/22", "52.121.48.0/20", "52.121.64.0/20", "52.121.166.0/24", "52.122.0.0/24", "52.122.1.0/24", "52.122.2.0/23", "52.122.4.0/23", "52.122.6.0/24", "52.122.7.0/24", "52.122.8.0/22", "52.122.12.0/22", "52.122.16.0/22", "52.122.20.0/22", "52.122.24.0/22", "52.123.0.0/24", "52.123.1.0/24", "52.123.2.0/24", "52.123.3.0/24", "52.123.4.0/24", "52.123.5.0/24", "52.123.6.0/24", "52.123.7.0/24", "52.123.133.0/24", "52.123.134.0/23", "52.123.136.0/22", "52.123.140.0/24", "52.123.185.0/24", "52.123.186.0/24", "52.123.187.0/24", "52.123.188.0/24", "52.123.189.0/24", "52.125.128.0/22", "52.125.132.0/22", "52.125.136.0/24", "52.125.137.0/24", "52.125.138.0/23", "52.125.140.0/23", "52.136.0.0/22", "52.136.29.0/24", "52.136.30.0/24", "52.136.64.0/18", "52.136.192.0/18", "52.137.0.0/18", "52.137.64.0/18", "52.137.128.0/17", "52.138.80.0/21", "52.138.96.0/19", "52.138.128.0/17", "52.141.64.0/18", "52.141.192.0/19", "52.141.240.0/20", "52.142.0.0/18", "52.142.64.0/18", "52.142.192.0/18", "52.143.0.0/18", "52.143.64.0/18", "52.143.192.0/24", "52.143.193.0/24", "52.143.194.0/24", "52.143.195.0/24", "52.143.197.0/24", "52.143.207.0/24", "52.143.208.0/24", "52.143.209.0/24", "52.143.211.0/24", "52.143.224.0/19", "52.146.0.0/17", "52.146.128.0/17", "52.147.160.0/19", "52.147.192.0/18", "52.148.128.0/18", "52.148.192.0/18", "52.149.0.0/18", "52.149.64.0/18", "52.149.128.0/17", "52.150.0.0/17", "52.151.0.0/18", "52.151.128.0/17", "52.152.0.0/17", "52.152.128.0/17", "52.153.0.0/18", "52.153.64.0/18", "52.153.192.0/18", "52.154.0.0/18", "52.154.64.0/18", "52.154.128.0/17", "52.155.32.0/19", "52.155.64.0/19", "52.155.128.0/17", "52.156.64.0/18", "52.156.128.0/19", "52.156.192.0/18", "52.157.0.0/18", "52.157.64.0/18", "52.157.128.0/17", "52.158.0.0/17", "52.158.160.0/20", "52.158.192.0/19", "52.158.224.0/19", "52.159.128.0/17", "52.160.0.0/16", "52.164.0.0/16", "52.165.0.0/19", "52.165.32.0/20", "52.165.48.0/28", "52.165.49.0/24", "52.165.56.0/21", "52.165.64.0/19", "52.165.96.0/21", "52.165.104.0/25", "52.165.128.0/17", "52.166.0.0/16", "52.167.0.0/16", "52.168.0.0/16", "52.169.0.0/16", "52.170.0.0/16", "52.171.0.0/16", "52.173.0.0/16", "52.174.0.0/16", "52.175.192.0/18", "52.176.0.0/17", "52.176.128.0/19", "52.176.160.0/21", "52.176.176.0/20", "52.176.192.0/19", "52.176.224.0/24", "52.177.0.0/16", "52.178.0.0/17", "52.178.128.0/17", "52.179.0.0/17", "52.179.128.0/17", "52.180.0.0/17", "52.180.128.0/19", "52.180.184.0/27", "52.180.184.32/28", "52.180.185.0/24", "52.182.128.0/17", "52.183.0.0/17", "52.183.192.0/18", "52.184.128.0/19", "52.184.160.0/21", "52.184.168.0/28", "52.184.168.80/28", "52.184.168.96/27", "52.184.168.128/28", "52.184.169.0/24", "52.184.170.0/24", "52.184.176.0/20", "52.184.192.0/18", "52.185.0.0/19", "52.185.32.0/20", "52.185.48.0/21", "52.185.56.0/26", "52.185.56.64/27", "52.185.56.96/28", "52.185.56.128/27", "52.185.56.160/28", "52.185.64.0/19", "52.185.96.0/20", "52.185.112.0/26", "52.185.112.96/27", "52.185.120.0/21", "52.185.192.0/18", "52.186.0.0/16", "52.188.0.0/16", "52.189.0.0/17", "52.189.128.0/18", "52.190.0.0/17", "52.190.128.0/17", "52.191.0.0/17", "52.191.128.0/18", "52.191.192.0/18", "52.224.0.0/16", "52.225.0.0/17", "52.225.128.0/21", "52.225.136.0/27", "52.225.136.32/28", "52.225.136.64/28", "52.225.137.0/24", "52.225.192.0/18", "52.226.0.0/16", "52.228.128.0/17", "52.229.0.0/18", "52.230.128.0/17", "52.232.0.0/17", "52.232.146.0/24", "52.232.147.0/24", "52.232.148.0/24", "52.232.149.0/24", "52.232.151.0/24", "52.232.152.0/24", "52.232.157.0/24", "52.232.159.0/24", "52.232.160.0/19", "52.232.192.0/18", "52.233.64.0/18", "52.233.128.0/17", "52.234.0.0/17", "52.234.128.0/17", "52.235.64.0/18", "52.236.0.0/17", "52.236.128.0/17", "52.238.0.0/18", "52.238.192.0/18", "52.239.0.0/17", "52.239.136.0/22", "52.239.140.0/22", "52.239.148.128/25", "52.239.150.0/23", "52.239.152.0/22", "52.239.156.0/24", "52.239.157.0/25", "52.239.157.128/26", "52.239.157.192/27", "52.239.158.0/23", "52.239.160.0/22", "52.239.168.0/22", "52.239.172.0/22", "52.239.176.128/25", "52.239.177.32/27", "52.239.177.64/26", "52.239.177.128/25", "52.239.178.0/23", "52.239.180.0/22", "52.239.184.0/25", "52.239.184.160/28", "52.239.184.192/27", "52.239.185.32/27", "52.239.192.0/26", "52.239.192.64/28", "52.239.192.96/27", "52.239.192.160/27", "52.239.192.192/26", "52.239.193.0/24", "52.239.195.0/24", "52.239.198.0/25", "52.239.198.192/26", "52.239.199.0/24", "52.239.200.0/23", "52.239.203.0/24", "52.239.205.0/24", "52.239.206.0/24", "52.239.207.32/28", "52.239.207.64/26", "52.239.207.128/27", "52.239.207.192/26", "52.239.208.0/23", "52.239.210.0/23", "52.239.212.0/23", "52.239.214.0/23", "52.239.220.0/23", "52.239.222.0/23", "52.239.228.0/23", "52.239.234.0/23", "52.239.236.0/23", "52.239.242.0/23", "52.239.246.0/23", "52.239.248.0/24", "52.239.252.0/24", "52.239.254.0/23", "52.240.0.0/17", "52.241.0.0/16", "52.242.64.0/18", "52.242.128.0/17", "52.245.8.0/22", "52.245.12.0/22", "52.245.24.0/22", "52.245.40.0/22", "52.245.44.0/24", "52.245.45.0/25", "52.245.45.128/28", "52.245.45.160/27", "52.245.45.192/26", "52.245.46.0/27", "52.245.46.48/28", "52.245.46.64/28", "52.245.46.112/28", "52.245.46.128/28", "52.245.46.160/27", "52.245.46.192/26", "52.245.48.0/22", "52.245.52.0/22", "52.245.68.0/24", "52.245.69.32/27", "52.245.69.64/27", "52.245.69.96/28", "52.245.69.144/28", "52.245.69.160/27", "52.245.69.192/26", "52.245.70.0/23", "52.245.88.0/22", "52.245.104.0/22", "52.245.108.0/22", "52.245.124.0/22", "52.246.0.0/17", "52.246.192.0/18", "52.247.0.0/17", "52.247.192.0/18", "52.248.0.0/17", "52.248.128.0/17", "52.249.0.0/18", "52.249.128.0/17", "52.250.0.0/17", "52.250.128.0/18", "52.250.192.0/18", "52.251.0.0/17", "52.252.0.0/17", "52.253.0.0/18", "52.253.64.0/20", "52.253.148.0/23", "52.253.154.0/23", "52.253.160.0/24", "52.253.179.0/24", "52.253.180.0/24", "52.253.182.0/23", "52.253.184.0/24", "52.254.0.0/18", "52.254.64.0/19", "52.254.96.0/20", "52.254.112.0/21", "52.254.128.0/17", "52.255.0.0/19", "52.255.64.0/18", "52.255.128.0/17", "65.52.32.0/21", "65.52.64.0/20", "65.52.108.0/23", "65.52.110.0/24", "65.52.111.0/24", "65.52.112.0/20", "65.52.128.0/19", "65.52.224.0/21", "65.54.19.128/27", "65.55.32.128/28", "65.55.32.192/27", "65.55.32.224/28", "65.55.33.176/28", "65.55.33.192/28", "65.55.35.192/27", "65.55.44.8/29", "65.55.44.16/28", "65.55.44.32/27", "65.55.44.64/27", "65.55.44.96/28", "65.55.44.112/28", "65.55.44.128/27", "65.55.51.0/24", "65.55.60.188/30", "65.55.105.0/26", "65.55.105.96/27", "65.55.105.160/27", "65.55.105.224/27", "65.55.106.0/26", "65.55.106.64/27", "65.55.106.128/26", "65.55.106.192/28", "65.55.106.240/28", "65.55.107.0/28", "65.55.107.48/28", "65.55.107.64/27", "65.55.107.96/27", "65.55.108.0/24", "65.55.110.0/24", "65.55.120.0/24", "65.55.144.0/23", "65.55.146.0/24", "65.55.207.0/24", "65.55.209.0/25", "65.55.209.128/26", "65.55.210.0/24", "65.55.211.32/27", "65.55.213.64/26", "65.55.213.128/26", "65.55.217.0/24", "65.55.219.32/27", "65.55.219.64/26", "65.55.219.128/25", "65.55.250.0/24", "65.55.252.0/24", "68.219.0.0/17", "68.219.128.0/19", "68.219.160.0/19", "68.219.192.0/18", "68.220.0.0/19", "68.220.32.0/19", "68.220.128.0/17", "70.37.0.0/21", "70.37.8.0/22", "70.37.16.0/20", "70.37.32.0/20", "70.37.48.0/20", "70.37.64.0/18", "70.37.160.0/21", "74.234.0.0/17", "74.234.128.0/17", "74.235.0.0/16", "74.249.0.0/17", "74.249.128.0/17", "94.245.88.0/21", "94.245.104.0/21", "94.245.117.96/27", "94.245.118.0/27", "94.245.120.128/28", "94.245.122.0/24", "94.245.123.144/28", "94.245.123.176/28", "98.64.0.0/16", "98.71.0.0/17", "98.71.128.0/17", "104.40.0.0/17", "104.40.128.0/17", "104.41.64.0/18", "104.41.128.0/19", "104.41.192.0/18", "104.42.0.0/16", "104.43.128.0/17", "104.44.88.0/27", "104.44.88.32/27", "104.44.88.64/27", "104.44.88.96/27", "104.44.88.160/27", "104.44.89.0/27", "104.44.89.64/27", "104.44.89.128/27", "104.44.89.160/27", "104.44.89.192/27", "104.44.90.192/27", "104.44.91.0/27", "104.44.91.32/27", "104.44.91.64/27", "104.44.91.96/27", "104.44.91.160/27", "104.44.92.64/27", "104.44.92.96/27", "104.44.92.192/27", "104.44.92.224/27", "104.44.93.0/27", "104.44.93.160/27", "104.44.93.192/27", "104.44.94.0/28", "104.44.94.16/28", "104.44.94.32/28", "104.44.94.48/28", "104.44.94.80/28", "104.44.94.160/27", "104.44.95.0/28", "104.44.95.80/28", "104.44.95.96/28", "104.44.95.128/27", "104.44.95.160/27", "104.44.95.240/28", "104.44.128.0/18", "104.45.0.0/18", "104.45.64.0/20", "104.45.80.0/20", "104.45.96.0/19", "104.45.128.0/18", "104.45.192.0/20", "104.45.208.0/20", "104.45.224.0/19", "104.46.0.0/21", "104.46.8.0/21", "104.46.32.0/19", "104.46.64.0/19", "104.46.96.0/19", "104.46.192.0/20", "104.47.128.0/18", "104.47.200.0/21", "104.47.208.0/23", "104.47.216.64/26", "104.47.218.0/23", "104.208.0.0/19", "104.208.32.0/20", "104.208.128.0/17", "104.209.0.0/18", "104.209.128.0/17", "104.210.0.0/20", "104.210.32.0/19", "104.210.128.0/19", "104.210.176.0/20", "104.210.192.0/19", "104.211.0.0/18", "104.214.0.0/17", "104.214.192.0/18", "104.215.64.0/18", "108.141.0.0/16", "108.142.0.0/15", "131.253.12.160/28", "131.253.12.208/28", "131.253.12.224/30", "131.253.12.228/30", "131.253.13.16/29", "131.253.13.24/29", "131.253.13.48/28", "131.253.13.72/29", "131.253.13.80/29", "131.253.13.88/30", "131.253.13.96/30", "131.253.13.128/27", "131.253.14.4/30", "131.253.14.8/31", "131.253.14.16/28", "131.253.14.96/27", "131.253.14.128/27", "131.253.14.192/29", "131.253.14.208/28", "131.253.14.224/28", "131.253.15.8/29", "131.253.15.16/28", "131.253.15.192/28", "131.253.24.0/28", "131.253.24.192/26", "131.253.34.224/27", "131.253.35.128/26", "131.253.36.224/27", "131.253.38.0/27", "131.253.38.128/26", "131.253.40.0/28", "131.253.40.64/28", "131.253.40.80/28", "131.253.40.128/27", "131.253.41.0/24", "134.170.80.64/28", "134.170.220.0/23", "134.170.222.0/24", "137.116.0.0/18", "137.116.64.0/19", "137.116.96.0/22", "137.116.112.0/20", "137.116.176.0/21", "137.116.184.0/21", "137.116.192.0/19", "137.116.224.0/19", "137.117.0.0/19", "137.117.32.0/19", "137.117.64.0/18", "137.117.128.0/17", "137.135.0.0/18", "137.135.64.0/18", "137.135.128.0/17", "138.91.48.0/20", "138.91.64.0/19", "138.91.96.0/19", "138.91.128.0/17", "157.55.2.128/26", "157.55.3.0/24", "157.55.7.128/26", "157.55.8.64/26", "157.55.8.144/28", "157.55.10.160/29", "157.55.10.176/28", "157.55.10.192/26", "157.55.11.128/25", "157.55.12.64/26", "157.55.13.64/26", "157.55.13.128/26", "157.55.37.0/24", "157.55.38.0/24", "157.55.39.0/24", "157.55.48.0/24", "157.55.50.0/25", "157.55.51.224/28", "157.55.55.100/30", "157.55.55.104/29", "157.55.55.136/29", "157.55.55.144/29", "157.55.55.160/28", "157.55.55.228/30", "157.55.55.232/29", "157.55.55.240/28", "157.55.80.0/21", "157.55.103.32/27", "157.55.106.0/26", "157.55.107.0/24", "157.55.108.0/23", "157.55.153.224/28", "157.55.154.128/25", "157.55.176.0/20", "157.55.192.0/21", "157.55.200.0/22", "157.55.204.1/32", "157.55.204.2/31", "157.55.204.33/32", "157.55.204.34/31", "157.55.204.128/25", "157.56.2.0/25", "157.56.2.128/25", "157.56.3.0/25", "157.56.3.128/25", "157.56.19.224/27", "157.56.21.160/27", "157.56.21.192/27", "157.56.80.0/25", "157.56.117.64/27", "157.56.160.0/21", "157.56.176.0/21", "168.61.0.0/19", "168.61.32.0/20", "168.61.48.0/21", "168.61.56.0/21", "168.61.64.0/20", "168.61.80.0/20", "168.61.96.0/19", "168.61.128.0/25", "168.61.128.128/28", "168.61.128.160/27", "168.61.128.192/26", "168.61.129.0/25", "168.61.129.128/26", "168.61.129.208/28", "168.61.129.224/27", "168.61.130.64/26", "168.61.130.128/25", "168.61.131.0/26", "168.61.131.128/25", "168.61.132.0/26", "168.61.144.0/20", "168.61.160.0/19", "168.61.208.0/20", "168.62.0.0/19", "168.62.32.0/19", "168.62.64.0/19", "168.62.128.0/19", "168.62.160.0/19", "168.62.192.0/19", "168.63.0.0/19", "168.63.32.0/19", "168.63.64.0/20", "168.63.80.0/21", "168.63.88.0/23", "168.63.92.0/22", "168.63.96.0/19", "172.168.0.0/15", "172.170.0.0/16", "172.171.0.0/19", "172.171.32.0/19", "172.171.64.0/19", "172.171.96.0/19", "172.171.128.0/17", "172.172.0.0/15", "172.174.0.0/16", "172.175.0.0/16", "172.176.0.0/15", "172.178.0.0/17", "172.178.128.0/17", "172.179.0.0/16", "172.180.0.0/15", "172.182.0.0/16", "172.184.0.0/15", "172.190.0.0/17", "191.233.64.0/18", "191.234.32.0/19", "191.235.128.0/18", "191.235.192.0/22", "191.235.208.0/20", "191.235.255.0/24", "191.236.0.0/18", "191.236.64.0/18", "191.236.192.0/18", "191.237.0.0/17", "191.237.128.0/18", "191.237.192.0/23", "191.237.194.0/24", "191.237.196.0/24", "191.237.208.0/20", "191.237.232.0/22", "191.238.0.0/18", "191.238.70.0/23", "191.238.96.0/19", "191.238.144.0/20", "191.238.160.0/19", "191.238.224.0/19", "191.239.0.0/18", "191.239.200.0/22", "191.239.208.0/20", "191.239.224.0/20", "193.149.64.0/21", "193.149.72.0/21", "193.149.80.0/21", "193.149.88.0/21", "199.7.166.8/29", "199.7.166.16/28", "199.19.85.24/29", "199.19.85.32/28", "199.19.85.48/28", "199.19.85.64/29", "199.19.85.80/28", "199.19.85.224/29", "199.30.16.0/24", "199.30.18.0/23", "199.30.20.0/24", "199.30.22.0/24", "199.30.24.0/23", "199.30.27.0/25", "199.30.27.144/28", "199.30.27.160/27", "199.30.28.64/26", "199.30.28.128/25", "199.30.29.0/24", "199.30.31.192/26", "204.152.18.0/31", "204.152.18.8/29", "204.152.18.32/27", "204.152.18.64/26", "204.152.19.0/24", "207.46.13.0/24", "207.254.3.32/28", "207.254.48.0/29", "207.254.48.160/28", "208.78.110.56/29", "208.83.5.64/28", "208.83.5.224/29", "209.240.212.0/23", "213.199.128.0/20", "213.199.180.32/28", "213.199.180.96/27", "213.199.180.192/27", "213.199.183.0/24", "2602:fd5e:1::/63", "2602:fd5e:1:2::/64", "2603:1020::/47", "2603:1020:2::/48", "2603:1020:4::/48", "2603:1020:5::/48", "2603:1020:6::/48", "2603:1020:200::/46", "2603:1020:205::/48", "2603:1020:206::/47", "2603:1020:208::/56", "2603:1026:900:4::/62", "2603:1026:900:8::/63", "2603:1026:2404::/48", "2603:1026:2405::/48", "2603:1026:2500:24::/64", "2603:1026:3000:c0::/59", "2603:1026:3000:140::/59", "2603:1027:1:c0::/59", "2603:1027:1:140::/59", "2603:1030::/45", "2603:1030:9:2::/63", "2603:1030:9:4::/62", "2603:1030:9:8::/61", "2603:1030:9:10::/62", "2603:1030:9:14::/63", "2603:1030:9:17::/64", "2603:1030:9:18::/61", "2603:1030:9:20::/59", "2603:1030:9:40::/58", "2603:1030:9:80::/59", "2603:1030:9:a0::/60", "2603:1030:9:b3::/64", "2603:1030:9:b4::/63", "2603:1030:9:b7::/64", "2603:1030:9:b8::/63", "2603:1030:9:bd::/64", "2603:1030:9:be::/63", "2603:1030:9:c0::/58", "2603:1030:9:100::/64", "2603:1030:9:104::/62", "2603:1030:9:108::/62", "2603:1030:9:10c::/64", "2603:1030:9:111::/64", "2603:1030:9:112::/63", "2603:1030:9:114::/64", "2603:1030:9:118::/62", "2603:1030:9:11c::/63", "2603:1030:9:11f::/64", "2603:1030:9:120::/61", "2603:1030:9:128::/62", "2603:1030:9:12f::/64", "2603:1030:9:130::/60", "2603:1030:9:140::/59", "2603:1030:9:160::/61", "2603:1030:9:168::/62", "2603:1030:9:16f::/64", "2603:1030:9:170::/60", "2603:1030:9:180::/61", "2603:1030:9:18c::/62", "2603:1030:9:190::/60", "2603:1030:9:1a0::/59", "2603:1030:9:1c0::/60", "2603:1030:9:1d0::/62", "2603:1030:9:1d4::/63", "2603:1030:9:1d6::/64", "2603:1030:9:1db::/64", "2603:1030:9:1dc::/62", "2603:1030:9:1e0::/59", "2603:1030:9:200::/57", "2603:1030:9:280::/61", "2603:1030:9:288::/62", "2603:1030:9:28d::/64", "2603:1030:9:28e::/63", "2603:1030:9:290::/60", "2603:1030:9:2a0::/59", "2603:1030:9:2c0::/63", "2603:1030:9:2c2::/64", "2603:1030:9:2c4::/62", "2603:1030:9:2c8::/62", "2603:1030:9:2cc::/63", "2603:1030:9:2d4::/62", "2603:1030:9:2d8::/61", "2603:1030:9:2e0::/59", "2603:1030:9:300::/60", "2603:1030:9:310::/62", "2603:1030:9:314::/64", "2603:1030:9:319::/64", "2603:1030:9:31a::/63", "2603:1030:9:31c::/62", "2603:1030:9:320::/62", "2603:1030:9:324::/63", "2603:1030:9:328::/63", "2603:1030:9:339::/64", "2603:1030:9:33a::/64", "2603:1030:a::/47", "2603:1030:d::/48", "2603:1030:10::/47", "2603:1030:13::/56", "2603:1030:20c::/47", "2603:1030:20e::/48", "2603:1030:210::/47", "2603:1030:212::/56", "2603:1030:213::/48", "2603:1030:400::/48", "2603:1030:401:2::/63", "2603:1030:401:4::/62", "2603:1030:401:8::/61", "2603:1030:401:10::/62", "2603:1030:401:14::/63", "2603:1030:401:17::/64", "2603:1030:401:18::/61", "2603:1030:401:20::/59", "2603:1030:401:40::/60", "2603:1030:401:50::/61", "2603:1030:401:58::/64", "2603:1030:401:5a::/63", "2603:1030:401:5c::/62", "2603:1030:401:60::/59", "2603:1030:401:80::/62", "2603:1030:401:84::/64", "2603:1030:401:87::/64", "2603:1030:401:88::/62", "2603:1030:401:8c::/63", "2603:1030:401:8f::/64", "2603:1030:401:90::/63", "2603:1030:401:94::/62", "2603:1030:401:98::/61", "2603:1030:401:a0::/62", "2603:1030:401:a4::/63", "2603:1030:401:a7::/64", "2603:1030:401:a8::/61", "2603:1030:401:b0::/60", "2603:1030:401:c0::/58", "2603:1030:401:100::/59", "2603:1030:401:120::/64", "2603:1030:401:124::/62", "2603:1030:401:128::/61", "2603:1030:401:130::/62", "2603:1030:401:134::/63", "2603:1030:401:139::/64", "2603:1030:401:13a::/63", "2603:1030:401:143::/64", "2603:1030:401:144::/63", "2603:1030:401:14a::/63", "2603:1030:401:14c::/62", "2603:1030:401:150::/62", "2603:1030:401:154::/63", "2603:1030:401:159::/64", "2603:1030:401:15a::/63", "2603:1030:401:15c::/62", "2603:1030:401:160::/61", "2603:1030:401:16a::/63", "2603:1030:401:16c::/64", "2603:1030:401:17c::/62", "2603:1030:401:180::/58", "2603:1030:401:1c0::/61", "2603:1030:401:1c8::/63", "2603:1030:401:1cc::/62", "2603:1030:401:1d0::/60", "2603:1030:401:1e0::/60", "2603:1030:401:1f0::/61", "2603:1030:401:1f8::/64", "2603:1030:401:20c::/62", "2603:1030:401:210::/60", "2603:1030:401:220::/62", "2603:1030:401:226::/63", "2603:1030:401:228::/61", "2603:1030:401:230::/60", "2603:1030:401:240::/60", "2603:1030:401:250::/62", "2603:1030:401:254::/63", "2603:1030:401:256::/64", "2603:1030:401:25b::/64", "2603:1030:401:25c::/63", "2603:1030:401:25e::/64", "2603:1030:401:263::/64", "2603:1030:401:264::/62", "2603:1030:401:268::/61", "2603:1030:401:270::/62", "2603:1030:401:274::/63", "2603:1030:401:27a::/63", "2603:1030:401:27c::/62", "2603:1030:401:280::/59", "2603:1030:401:2a0::/61", "2603:1030:401:2a8::/63", "2603:1030:401:2ab::/64", "2603:1030:401:2ac::/62", "2603:1030:401:2b0::/60", "2603:1030:401:2c0::/63", "2603:1030:401:2c2::/64", "2603:1030:401:2c7::/64", "2603:1030:401:2c8::/61", "2603:1030:401:2d0::/60", "2603:1030:401:2e0::/62", "2603:1030:401:2e4::/63", "2603:1030:401:2e6::/64", "2603:1030:401:2ed::/64", "2603:1030:401:2ee::/63", "2603:1030:401:2f0::/64", "2603:1030:401:2f3::/64", "2603:1030:401:2f4::/62", "2603:1030:401:2f8::/61", "2603:1030:401:300::/59", "2603:1030:401:320::/61", "2603:1030:401:328::/63", "2603:1030:401:32a::/64", "2603:1030:401:333::/64", "2603:1030:401:334::/62", "2603:1030:401:338::/62", "2603:1030:401:33c::/63", "2603:1030:401:33e::/64", "2603:1030:401:341::/64", "2603:1030:401:342::/63", "2603:1030:401:344::/62", "2603:1030:401:348::/61", "2603:1030:401:350::/60", "2603:1030:401:360::/61", "2603:1030:401:368::/64", "2603:1030:401:36b::/64", "2603:1030:401:36c::/62", "2603:1030:401:370::/60", "2603:1030:401:380::/63", "2603:1030:401:382::/64", "2603:1030:401:38c::/62", "2603:1030:401:390::/62", "2603:1030:401:39d::/64", "2603:1030:401:39e::/63", "2603:1030:401:3a0::/64", "2603:1030:401:3a2::/63", "2603:1030:401:3a4::/62", "2603:1030:401:3a8::/61", "2603:1030:401:3b0::/63", "2603:1030:401:3b2::/64", "2603:1030:401:3b4::/62", "2603:1030:401:3b8::/61", "2603:1030:401:3c0::/58", "2603:1030:401:400::/62", "2603:1030:401:404::/64", "2603:1030:401:409::/64", "2603:1030:401:40a::/63", "2603:1030:401:40c::/62", "2603:1030:401:410::/60", "2603:1030:401:420::/61", "2603:1030:401:42c::/62", "2603:1030:401:430::/62", "2603:1030:401:434::/64", "2603:1030:401:439::/64", "2603:1030:401:43a::/63", "2603:1030:401:43c::/63", "2603:1030:401:43e::/64", "2603:1030:401:440::/62", "2603:1030:401:44b::/64", "2603:1030:401:44c::/62", "2603:1030:402::/47", "2603:1030:406::/47", "2603:1030:408::/48", "2603:1030:40a:1::/64", "2603:1030:40a:2::/64", "2603:1030:40c::/48", "2603:1030:40d:8000::/49", "2603:1030:40e::/56", "2603:1030:40f::/48", "2603:1030:500::/47", "2603:1030:503::/48", "2603:1030:504::/47", "2603:1030:800::/48", "2603:1030:802::/47", "2603:1030:804::/58", "2603:1030:804:40::/60", "2603:1030:804:53::/64", "2603:1030:804:54::/64", "2603:1030:804:5b::/64", "2603:1030:804:5c::/62", "2603:1030:804:60::/62", "2603:1030:804:67::/64", "2603:1030:804:68::/61", "2603:1030:804:70::/60", "2603:1030:804:80::/59", "2603:1030:804:a0::/62", "2603:1030:804:a4::/64", "2603:1030:804:a6::/63", "2603:1030:804:a8::/61", "2603:1030:804:b0::/62", "2603:1030:804:b4::/64", "2603:1030:804:b6::/63", "2603:1030:804:b8::/61", "2603:1030:804:c0::/61", "2603:1030:804:c8::/62", "2603:1030:804:cc::/63", "2603:1030:804:d2::/63", "2603:1030:804:d4::/62", "2603:1030:804:d8::/61", "2603:1030:804:e0::/59", "2603:1030:804:100::/57", "2603:1030:804:180::/58", "2603:1030:804:1c0::/61", "2603:1030:804:1c8::/64", "2603:1030:804:1cd::/64", "2603:1030:804:1ce::/63", "2603:1030:804:1d0::/60", "2603:1030:804:1e0::/59", "2603:1030:804:200::/59", "2603:1030:804:220::/61", "2603:1030:804:228::/62", "2603:1030:804:22c::/64", "2603:1030:804:233::/64", "2603:1030:804:234::/62", "2603:1030:804:238::/61", "2603:1030:804:240::/59", "2603:1030:804:260::/61", "2603:1030:804:26a::/63", "2603:1030:804:26c::/62", "2603:1030:804:270::/62", "2603:1030:804:274::/63", "2603:1030:804:277::/64", "2603:1030:804:278::/63", "2603:1030:804:27a::/64", "2603:1030:805::/48", "2603:1030:806::/48", "2603:1030:807::/48", "2603:1030:809::/48", "2603:1030:80a::/56", "2603:1030:80b::/48", "2603:1030:a00::/46", "2603:1030:a04::/48", "2603:1030:a06::/48", "2603:1030:a07::/48", "2603:1030:a08::/48", "2603:1030:a09::/56", "2603:1030:a0a::/48", "2603:1030:c00::/48", "2603:1030:c02::/47", "2603:1030:c04::/48", "2603:1030:c05::/48", "2603:1030:c06::/48", "2603:1030:c07::/48", "2603:1030:d00::/47", "2603:1030:e01:2::/64", "2603:1036:903::/64", "2603:1036:903:4::/64", "2603:1036:903:6::/64", "2603:1036:903:7::/64", "2603:1036:903:8::/64", "2603:1036:903:c::/63", "2603:1036:903:e::/64", "2603:1036:903:12::/64", "2603:1036:d20::/64", "2603:1036:120d::/48", "2603:1036:2400::/48", "2603:1036:2403::/48", "2603:1036:2404::/48", "2603:1036:2405::/48", "2603:1036:2407::/48", "2603:1036:2409::/48", "2603:1036:240c::/48", "2603:1036:2500::/64", "2603:1036:2500:10::/64", "2603:1036:2500:14::/64", "2603:1036:2500:18::/63", "2603:1036:2500:1c::/64", "2603:1036:2500:24::/64", "2603:1036:2500:38::/64", "2603:1036:3000::/59", "2603:1036:3000:c0::/59", "2603:1036:3000:e0::/59", "2603:1036:3000:100::/59", "2603:1036:3000:120::/59", "2603:1036:3000:140::/59", "2603:1036:3000:1c0::/59", "2603:1037:1::/59", "2603:1037:1:c0::/59", "2603:1037:1:e0::/59", "2603:1037:1:100::/59", "2603:1037:1:120::/59", "2603:1037:1:140::/59", "2603:1037:1:1c0::/59", "2603:1039:205::/48", "2603:1062:2::/57", "2603:1062:2:80::/57", "2603:1062:2:100::/57", "2603:1062:2:180::/57", "2603:1062:2:200::/57", "2603:1063:8::/56", "2603:1063:9::/56", "2603:1063:11::/56", "2603:1063:16::/56", "2603:1063:20::/56", "2603:1063:21::/56", "2603:1063:24::/56", "2603:1063:25::/56", "2603:1063:102::/55", "2603:1063:108::/55", "2603:1063:109::/55", "2603:1063:110::/55", "2603:1063:116::/55", "2603:1063:121::/55", "2603:1063:123::/55", "2603:1063:124::/55", "2603:1063:202::/55", "2603:1063:208::/55", "2603:1063:209::/55", "2603:1063:210::/55", "2603:1063:216::/55", "2603:1063:221::/55", "2603:1063:223::/55", "2603:1063:224::/55", "2603:1063:2200::/64", "2603:1063:2200:14::/64", "2603:1063:2200:18::/64", "2603:1063:2200:1c::/64", "2603:1063:2200:20::/64", "2603:1063:2200:24::/64", "2603:1063:2200:30::/64", "2603:1063:2206:14::/64", "2603:1063:2206:24::/64", "2a01:111:f100:2000::/52", "2a01:111:f100:3000::/52", "2a01:111:f100:4002::/64", "2a01:111:f100:5000::/52", "2a01:111:f100:a000::/63", "2a01:111:f100:a002::/64", "2a01:111:f100:a004::/64", "2a01:111:f403:c000::/63", "2a01:111:f403:c002::/64", "2a01:111:f403:c003::/64", "2a01:111:f403:c004::/62", "2a01:111:f403:c100::/63", "2a01:111:f403:c102::/64", "2a01:111:f403:c10c::/62", "2a01:111:f403:c110::/64", "2a01:111:f403:c111::/64", "2a01:111:f403:c200::/64", "2a01:111:f403:c201::/64", "2a01:111:f403:c800::/64", "2a01:111:f403:c801::/64", "2a01:111:f403:c803::/64", "2a01:111:f403:c804::/62", "2a01:111:f403:c900::/63", "2a01:111:f403:c902::/64", "2a01:111:f403:c903::/64", "2a01:111:f403:c904::/62", "2a01:111:f403:c908::/62", "2a01:111:f403:c90c::/62", "2a01:111:f403:c914::/62", "2a01:111:f403:c918::/64", "2a01:111:f403:c919::/64", "2a01:111:f403:c91a::/63", "2a01:111:f403:c91c::/63", "2a01:111:f403:c91e::/63", "2a01:111:f403:c920::/63", "2a01:111:f403:c922::/64", "2a01:111:f403:c923::/64", "2a01:111:f403:c924::/62", "2a01:111:f403:c928::/62", "2a01:111:f403:c92c::/64", "2a01:111:f403:c92d::/64", "2a01:111:f403:c92e::/63", "2a01:111:f403:c930::/63", "2a01:111:f403:ca00::/62", "2a01:111:f403:ca04::/64", "2a01:111:f403:ca05::/64", "2a01:111:f403:ca06::/63", "2a01:111:f403:ca08::/63", "2a01:111:f403:d000::/63", "2a01:111:f403:d002::/64", "2a01:111:f403:d003::/64", "2a01:111:f403:d004::/62", "2a01:111:f403:d100::/64", "2a01:111:f403:d101::/64", "2a01:111:f403:d104::/62", "2a01:111:f403:d108::/62", "2a01:111:f403:d10c::/62", "2a01:111:f403:d200::/64", "2a01:111:f403:d201::/64", "2a01:111:f403:d800::/63", "2a01:111:f403:d802::/64", "2a01:111:f403:d803::/64", "2a01:111:f403:d804::/62", "2a01:111:f403:d900::/64", "2a01:111:f403:d901::/64", "2a01:111:f403:d903::/64", "2a01:111:f403:d904::/62", "2a01:111:f403:d908::/62", "2a01:111:f403:d90c::/62", "2a01:111:f403:da00::/64", "2a01:111:f403:da01::/64", "2a01:111:f403:e000::/63", "2a01:111:f403:e002::/64", "2a01:111:f403:e004::/62", "2a01:111:f403:e008::/62", "2a01:111:f403:e00c::/62", "2a01:111:f403:e015::/64", "2a01:111:f403:e016::/64", "2a01:111:f403:e018::/64", "2a01:111:f403:e200::/64", "2a01:111:f403:e201::/64", "2a01:111:f403:f000::/64", "2a01:111:f403:f800::/62", "2a01:111:f403:f804::/62", "2a01:111:f403:f900::/62", "2a01:111:f403:f904::/62", "2a01:111:f403:f908::/62", "2a01:111:f403:f90c::/62"))
                .body("'dependabot'.size()", equalTo(3))
                .body("'dependabot'", hasItems("18.213.123.130/32", "3.217.79.163/32", "3.217.93.44/32"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("verifiable_password_authentication")));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/issues?state=all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"\", " + 
                    " \"name\": \"ceogLAEIaS\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/KjH7R0/RDJucdz8n8N25/import/authors/70")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"encrypted_value\": \"_Zyd\", " + 
                    " \"key_id\": \"mM\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repositories/187/environments/1tj/secrets/eQ7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/g/actions/runners/sRAGeg0PbckxIb5n")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dlRzDa8TPE0/Y31EgnXNZy0HouTa/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/1GBXdhlINK97/cAF8hU/transfer")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nFor 'links/0/schema', nil is not an object."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#transfer-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/gG_6V9ARA0VZ/K0YnCMcwSc4S_S/pulls/oUIuk4yDQ3t7F15N/reviews/nRdNDRf")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/issues?" + 
                    "filter=mentioned&" + 
                    "state=open&" + 
                    "sort=comments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events?per_page=313")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'type'", containsString("IssueCommentEvent"))
                .body("[0].'actor'.'login'", containsString("openshift-ci[bot]"))
                .body("[0].'actor'.'display_login'", containsString("openshift-ci"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/openshift-ci[bot]"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/75433959?"))
                .body("[0].'repo'.'name'", containsString("openstack-k8s-operators/ci-framework"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework"))
                .body("[0].'payload'.'action'", containsString("created"))
                .body("[0].'payload'.'issue'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65"))
                .body("[0].'payload'.'issue'.'repository_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework"))
                .body("[0].'payload'.'issue'.'labels_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65/labels{/name}"))
                .body("[0].'payload'.'issue'.'comments_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65/comments"))
                .body("[0].'payload'.'issue'.'events_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65/events"))
                .body("[0].'payload'.'issue'.'html_url'", containsString("https://github.com/openstack-k8s-operators/ci-framework/pull/65"))
                .body("[0].'payload'.'issue'.'node_id'", containsString("PR_kwDOI9w5KM5Mg9dX"))
                .body("[0].'payload'.'issue'.'number'", numberMatches(65.0))
                .body("[0].'payload'.'issue'.'title'", containsString("Install_yamls ansible role wrapper"))
                .body("[0].'payload'.'issue'.'user'.'login'", containsString("raukadah"))
                .body("[0].'payload'.'issue'.'user'.'node_id'", containsString("MDQ6VXNlcjQ3ODk5MDg5"))
                .body("[0].'payload'.'issue'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/47899089?v=4"))
                .body("[0].'payload'.'issue'.'user'.'gravatar_id'", containsString(""))
                .body("[0].'payload'.'issue'.'user'.'url'", containsString("https://api.github.com/users/raukadah"))
                .body("[0].'payload'.'issue'.'user'.'html_url'", containsString("https://github.com/raukadah"))
                .body("[0].'payload'.'issue'.'user'.'followers_url'", containsString("https://api.github.com/users/raukadah/followers"))
                .body("[0].'payload'.'issue'.'user'.'following_url'", containsString("https://api.github.com/users/raukadah/following{/other_user}"))
                .body("[0].'payload'.'issue'.'user'.'gists_url'", containsString("https://api.github.com/users/raukadah/gists{/gist_id}"))
                .body("[0].'payload'.'issue'.'user'.'starred_url'", containsString("https://api.github.com/users/raukadah/starred{/owner}{/repo}"))
                .body("[0].'payload'.'issue'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/raukadah/subscriptions"))
                .body("[0].'payload'.'issue'.'user'.'organizations_url'", containsString("https://api.github.com/users/raukadah/orgs"))
                .body("[0].'payload'.'issue'.'user'.'repos_url'", containsString("https://api.github.com/users/raukadah/repos"))
                .body("[0].'payload'.'issue'.'user'.'events_url'", containsString("https://api.github.com/users/raukadah/events{/privacy}"))
                .body("[0].'payload'.'issue'.'user'.'received_events_url'", containsString("https://api.github.com/users/raukadah/received_events"))
                .body("[0].'payload'.'issue'.'user'.'type'", containsString("User"))
                .body("[0].'payload'.'issue'.'user'.'site_admin'", equalTo(false))
                .body("[0].'payload'.'issue'.'labels'.size()", equalTo(1))
                .body("[0].'payload'.'issue'.'labels'[0].'node_id'", containsString("LA_kwDOI9w5KM8AAAABNL6chQ"))
                .body("[0].'payload'.'issue'.'labels'[0].'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/labels/approved"))
                .body("[0].'payload'.'issue'.'labels'[0].'name'", containsString("approved"))
                .body("[0].'payload'.'issue'.'labels'[0].'color'", containsString("ededed"))
                .body("[0].'payload'.'issue'.'labels'[0].'default'", equalTo(false))
                .body("[0].'payload'.'issue'.'labels'[0].'description'", nullValue())
                .body("[0].'payload'.'issue'.'state'", containsString("open"))
                .body("[0].'payload'.'issue'.'locked'", equalTo(false))
                .body("[0].'payload'.'issue'.'assignee'.'login'", containsString("cjeanner"))
                .body("[0].'payload'.'issue'.'assignee'.'node_id'", containsString("MDQ6VXNlcjM5Mzk3NTEw"))
                .body("[0].'payload'.'issue'.'assignee'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/39397510?v=4"))
                .body("[0].'payload'.'issue'.'assignee'.'gravatar_id'", containsString(""))
                .body("[0].'payload'.'issue'.'assignee'.'url'", containsString("https://api.github.com/users/cjeanner"))
                .body("[0].'payload'.'issue'.'assignee'.'html_url'", containsString("https://github.com/cjeanner"))
                .body("[0].'payload'.'issue'.'assignee'.'followers_url'", containsString("https://api.github.com/users/cjeanner/followers"))
                .body("[0].'payload'.'issue'.'assignee'.'following_url'", containsString("https://api.github.com/users/cjeanner/following{/other_user}"))
                .body("[0].'payload'.'issue'.'assignee'.'gists_url'", containsString("https://api.github.com/users/cjeanner/gists{/gist_id}"))
                .body("[0].'payload'.'issue'.'assignee'.'starred_url'", containsString("https://api.github.com/users/cjeanner/starred{/owner}{/repo}"))
                .body("[0].'payload'.'issue'.'assignee'.'subscriptions_url'", containsString("https://api.github.com/users/cjeanner/subscriptions"))
                .body("[0].'payload'.'issue'.'assignee'.'organizations_url'", containsString("https://api.github.com/users/cjeanner/orgs"))
                .body("[0].'payload'.'issue'.'assignee'.'repos_url'", containsString("https://api.github.com/users/cjeanner/repos"))
                .body("[0].'payload'.'issue'.'assignee'.'events_url'", containsString("https://api.github.com/users/cjeanner/events{/privacy}"))
                .body("[0].'payload'.'issue'.'assignee'.'received_events_url'", containsString("https://api.github.com/users/cjeanner/received_events"))
                .body("[0].'payload'.'issue'.'assignee'.'type'", containsString("User"))
                .body("[0].'payload'.'issue'.'assignee'.'site_admin'", equalTo(false))
                .body("[0].'payload'.'issue'.'assignees'.size()", equalTo(2))
                .body("[0].'payload'.'issue'.'assignees'[0].'login'", containsString("arxcruz"))
                .body("[0].'payload'.'issue'.'assignees'[0].'node_id'", containsString("MDQ6VXNlcjQwMDM2OQ=="))
                .body("[0].'payload'.'issue'.'assignees'[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/400369?v=4"))
                .body("[0].'payload'.'issue'.'assignees'[0].'gravatar_id'", containsString(""))
                .body("[0].'payload'.'issue'.'assignees'[0].'url'", containsString("https://api.github.com/users/arxcruz"))
                .body("[0].'payload'.'issue'.'assignees'[0].'html_url'", containsString("https://github.com/arxcruz"))
                .body("[0].'payload'.'issue'.'assignees'[0].'followers_url'", containsString("https://api.github.com/users/arxcruz/followers"))
                .body("[0].'payload'.'issue'.'assignees'[0].'following_url'", containsString("https://api.github.com/users/arxcruz/following{/other_user}"))
                .body("[0].'payload'.'issue'.'assignees'[0].'gists_url'", containsString("https://api.github.com/users/arxcruz/gists{/gist_id}"))
                .body("[0].'payload'.'issue'.'assignees'[0].'starred_url'", containsString("https://api.github.com/users/arxcruz/starred{/owner}{/repo}"))
                .body("[0].'payload'.'issue'.'assignees'[0].'subscriptions_url'", containsString("https://api.github.com/users/arxcruz/subscriptions"))
                .body("[0].'payload'.'issue'.'assignees'[0].'organizations_url'", containsString("https://api.github.com/users/arxcruz/orgs"))
                .body("[0].'payload'.'issue'.'assignees'[0].'repos_url'", containsString("https://api.github.com/users/arxcruz/repos"))
                .body("[0].'payload'.'issue'.'assignees'[0].'events_url'", containsString("https://api.github.com/users/arxcruz/events{/privacy}"))
                .body("[0].'payload'.'issue'.'assignees'[0].'received_events_url'", containsString("https://api.github.com/users/arxcruz/received_events"))
                .body("[0].'payload'.'issue'.'assignees'[0].'type'", containsString("User"))
                .body("[0].'payload'.'issue'.'assignees'[0].'site_admin'", equalTo(false))
                .body("[0].'payload'.'issue'.'assignees'[1].'login'", containsString("cjeanner"))
                .body("[0].'payload'.'issue'.'assignees'[1].'node_id'", containsString("MDQ6VXNlcjM5Mzk3NTEw"))
                .body("[0].'payload'.'issue'.'assignees'[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/39397510?v=4"))
                .body("[0].'payload'.'issue'.'assignees'[1].'gravatar_id'", containsString(""))
                .body("[0].'payload'.'issue'.'assignees'[1].'url'", containsString("https://api.github.com/users/cjeanner"))
                .body("[0].'payload'.'issue'.'assignees'[1].'html_url'", containsString("https://github.com/cjeanner"))
                .body("[0].'payload'.'issue'.'assignees'[1].'followers_url'", containsString("https://api.github.com/users/cjeanner/followers"))
                .body("[0].'payload'.'issue'.'assignees'[1].'following_url'", containsString("https://api.github.com/users/cjeanner/following{/other_user}"))
                .body("[0].'payload'.'issue'.'assignees'[1].'gists_url'", containsString("https://api.github.com/users/cjeanner/gists{/gist_id}"))
                .body("[0].'payload'.'issue'.'assignees'[1].'starred_url'", containsString("https://api.github.com/users/cjeanner/starred{/owner}{/repo}"))
                .body("[0].'payload'.'issue'.'assignees'[1].'subscriptions_url'", containsString("https://api.github.com/users/cjeanner/subscriptions"))
                .body("[0].'payload'.'issue'.'assignees'[1].'organizations_url'", containsString("https://api.github.com/users/cjeanner/orgs"))
                .body("[0].'payload'.'issue'.'assignees'[1].'repos_url'", containsString("https://api.github.com/users/cjeanner/repos"))
                .body("[0].'payload'.'issue'.'assignees'[1].'events_url'", containsString("https://api.github.com/users/cjeanner/events{/privacy}"))
                .body("[0].'payload'.'issue'.'assignees'[1].'received_events_url'", containsString("https://api.github.com/users/cjeanner/received_events"))
                .body("[0].'payload'.'issue'.'assignees'[1].'type'", containsString("User"))
                .body("[0].'payload'.'issue'.'assignees'[1].'site_admin'", equalTo(false))
                .body("[0].'payload'.'issue'.'milestone'", nullValue())
                .body("[0].'payload'.'issue'.'comments'", numberMatches(3.0))
                .body("[0].'payload'.'issue'.'created_at'", containsString("2023-03-21T06:56:56Z"))
                .body("[0].'payload'.'issue'.'updated_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[0].'payload'.'issue'.'closed_at'", nullValue())
                .body("[0].'payload'.'issue'.'author_association'", containsString("CONTRIBUTOR"))
                .body("[0].'payload'.'issue'.'active_lock_reason'", nullValue())
                .body("[0].'payload'.'issue'.'draft'", equalTo(false))
                .body("[0].'payload'.'issue'.'pull_request'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/pulls/65"))
                .body("[0].'payload'.'issue'.'pull_request'.'html_url'", containsString("https://github.com/openstack-k8s-operators/ci-framework/pull/65"))
                .body("[0].'payload'.'issue'.'pull_request'.'diff_url'", containsString("https://github.com/openstack-k8s-operators/ci-framework/pull/65.diff"))
                .body("[0].'payload'.'issue'.'pull_request'.'patch_url'", containsString("https://github.com/openstack-k8s-operators/ci-framework/pull/65.patch"))
                .body("[0].'payload'.'issue'.'pull_request'.'merged_at'", nullValue())
                .body("[0].'payload'.'issue'.'body'", containsString("This PR has:\r\n- [ ] Appropriate testing (molecule, python unit tests)\r\n- [ ] Appropriate documentation (README in the role, main README is up-to-date)\r\n"))
                .body("[0].'payload'.'issue'.'reactions'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65/reactions"))
                .body("[0].'payload'.'issue'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'+1'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'-1'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'confused'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'heart'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[0].'payload'.'issue'.'timeline_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65/timeline"))
                .body("[0].'payload'.'issue'.'performed_via_github_app'", nullValue())
                .body("[0].'payload'.'issue'.'state_reason'", nullValue())
                .body("[0].'payload'.'comment'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/comments/1498928870"))
                .body("[0].'payload'.'comment'.'html_url'", containsString("https://github.com/openstack-k8s-operators/ci-framework/pull/65#issuecomment-1498928870"))
                .body("[0].'payload'.'comment'.'issue_url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/65"))
                .body("[0].'payload'.'comment'.'node_id'", containsString("IC_kwDOI9w5KM5ZV9bm"))
                .body("[0].'payload'.'comment'.'user'.'login'", containsString("openshift-ci[bot]"))
                .body("[0].'payload'.'comment'.'user'.'node_id'", containsString("MDM6Qm90NzU0MzM5NTk="))
                .body("[0].'payload'.'comment'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/91280?v=4"))
                .body("[0].'payload'.'comment'.'user'.'gravatar_id'", containsString(""))
                .body("[0].'payload'.'comment'.'user'.'url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D"))
                .body("[0].'payload'.'comment'.'user'.'html_url'", containsString("https://github.com/apps/openshift-ci"))
                .body("[0].'payload'.'comment'.'user'.'followers_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/followers"))
                .body("[0].'payload'.'comment'.'user'.'following_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/following{/other_user}"))
                .body("[0].'payload'.'comment'.'user'.'gists_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/gists{/gist_id}"))
                .body("[0].'payload'.'comment'.'user'.'starred_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[0].'payload'.'comment'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/subscriptions"))
                .body("[0].'payload'.'comment'.'user'.'organizations_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/orgs"))
                .body("[0].'payload'.'comment'.'user'.'repos_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/repos"))
                .body("[0].'payload'.'comment'.'user'.'events_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/events{/privacy}"))
                .body("[0].'payload'.'comment'.'user'.'received_events_url'", containsString("https://api.github.com/users/openshift-ci%5Bbot%5D/received_events"))
                .body("[0].'payload'.'comment'.'user'.'type'", containsString("Bot"))
                .body("[0].'payload'.'comment'.'user'.'site_admin'", equalTo(false))
                .body("[0].'payload'.'comment'.'created_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[0].'payload'.'comment'.'updated_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[0].'payload'.'comment'.'author_association'", containsString("NONE"))
                .body("[0].'payload'.'comment'.'body'", containsString("@raukadah: The following tests **failed**, say `/retest` to rerun all failed tests or `/retest-required` to rerun all mandatory failed tests:\n\nTest name | Commit | Details | Required | Rerun command\n--- | --- | --- | --- | ---\nci/prow/pre-commit | 8beaf5ea9d3cbee8a29f069a863417f8c34ef2a5 | [link](https://prow.ci.openshift.org/view/gs/origin-ci-test/pr-logs/pull/openstack-k8s-operators_ci-framework/65/pull-ci-openstack-k8s-operators-ci-framework-main-pre-commit/1643939503905181696) | true | `/test pre-commit`\nci/prow/ansible-test | 8beaf5ea9d3cbee8a29f069a863417f8c34ef2a5 | [link](https://prow.ci.openshift.org/view/gs/origin-ci-test/pr-logs/pull/openstack-k8s-operators_ci-framework/65/pull-ci-openstack-k8s-operators-ci-framework-main-ansible-test/1643939503833878528) | true | `/test ansible-test`\n\n[Full PR test history](https://prow.ci.openshift.org/pr-history?org=openstack-k8s-operators&repo=ci-framework&pr=65). [Your PR dashboard](https://prow.ci.openshift.org/pr?query=is:pr+state:open+author:raukadah).\n\n<details>\n\nInstructions for interacting with me using PR comments are available [here](https://git.k8s.io/community/contributors/guide/pull-requests.md).  If you have questions or suggestions related to my behavior, please file an issue against the [kubernetes/test-infra](https://github.com/kubernetes/test-infra/issues/new?title=Prow%20issue:) repository. I understand the commands that are listed [here](https://go.k8s.io/bot-commands).\n</details>\n<!-- test report -->"))
                .body("[0].'payload'.'comment'.'reactions'.'url'", containsString("https://api.github.com/repos/openstack-k8s-operators/ci-framework/issues/comments/1498928870/reactions"))
                .body("[0].'payload'.'comment'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'+1'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'-1'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'confused'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'heart'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[0].'payload'.'comment'.'performed_via_github_app'", nullValue())
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[0].'org'.'login'", containsString("openstack-k8s-operators"))
                .body("[0].'org'.'gravatar_id'", containsString(""))
                .body("[0].'org'.'url'", containsString("https://api.github.com/orgs/openstack-k8s-operators"))
                .body("[0].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/52458823?"))
                .body("[1].'type'", containsString("IssueCommentEvent"))
                .body("[1].'actor'.'login'", containsString("apeltzer"))
                .body("[1].'actor'.'display_login'", containsString("apeltzer"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/apeltzer"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/2359510?"))
                .body("[1].'repo'.'name'", containsString("bioconda/bioconda-recipes"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes"))
                .body("[1].'payload'.'action'", containsString("created"))
                .body("[1].'payload'.'issue'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262"))
                .body("[1].'payload'.'issue'.'repository_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes"))
                .body("[1].'payload'.'issue'.'labels_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262/labels{/name}"))
                .body("[1].'payload'.'issue'.'comments_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262/comments"))
                .body("[1].'payload'.'issue'.'events_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262/events"))
                .body("[1].'payload'.'issue'.'html_url'", containsString("https://github.com/bioconda/bioconda-recipes/pull/40262"))
                .body("[1].'payload'.'issue'.'node_id'", containsString("PR_kwDOAoaL_s5NtU_2"))
                .body("[1].'payload'.'issue'.'number'", numberMatches(40262.0))
                .body("[1].'payload'.'issue'.'title'", containsString("Update: Added pandas requirement"))
                .body("[1].'payload'.'issue'.'user'.'login'", containsString("FloWuenne"))
                .body("[1].'payload'.'issue'.'user'.'node_id'", containsString("MDQ6VXNlcjExNjM5MTU0"))
                .body("[1].'payload'.'issue'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/11639154?v=4"))
                .body("[1].'payload'.'issue'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'issue'.'user'.'url'", containsString("https://api.github.com/users/FloWuenne"))
                .body("[1].'payload'.'issue'.'user'.'html_url'", containsString("https://github.com/FloWuenne"))
                .body("[1].'payload'.'issue'.'user'.'followers_url'", containsString("https://api.github.com/users/FloWuenne/followers"))
                .body("[1].'payload'.'issue'.'user'.'following_url'", containsString("https://api.github.com/users/FloWuenne/following{/other_user}"))
                .body("[1].'payload'.'issue'.'user'.'gists_url'", containsString("https://api.github.com/users/FloWuenne/gists{/gist_id}"))
                .body("[1].'payload'.'issue'.'user'.'starred_url'", containsString("https://api.github.com/users/FloWuenne/starred{/owner}{/repo}"))
                .body("[1].'payload'.'issue'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/FloWuenne/subscriptions"))
                .body("[1].'payload'.'issue'.'user'.'organizations_url'", containsString("https://api.github.com/users/FloWuenne/orgs"))
                .body("[1].'payload'.'issue'.'user'.'repos_url'", containsString("https://api.github.com/users/FloWuenne/repos"))
                .body("[1].'payload'.'issue'.'user'.'events_url'", containsString("https://api.github.com/users/FloWuenne/events{/privacy}"))
                .body("[1].'payload'.'issue'.'user'.'received_events_url'", containsString("https://api.github.com/users/FloWuenne/received_events"))
                .body("[1].'payload'.'issue'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'issue'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'.size()", equalTo(1))
                .body("[1].'payload'.'issue'.'labels'[0].'node_id'", containsString("MDU6TGFiZWwxMTExNjU0NTcz"))
                .body("[1].'payload'.'issue'.'labels'[0].'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/labels/please%20review%20&%20merge"))
                .body("[1].'payload'.'issue'.'labels'[0].'name'", containsString("please review & merge"))
                .body("[1].'payload'.'issue'.'labels'[0].'color'", containsString("2be249"))
                .body("[1].'payload'.'issue'.'labels'[0].'default'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'[0].'description'", containsString("set to ask for merge"))
                .body("[1].'payload'.'issue'.'state'", containsString("open"))
                .body("[1].'payload'.'issue'.'locked'", equalTo(false))
                .body("[1].'payload'.'issue'.'assignee'", nullValue())
                .body("[1].'payload'.'issue'.'assignees'.size()", equalTo(0))
                .body("[1].'payload'.'issue'.'milestone'", nullValue())
                .body("[1].'payload'.'issue'.'comments'", numberMatches(3.0))
                .body("[1].'payload'.'issue'.'created_at'", containsString("2023-04-05T20:14:44Z"))
                .body("[1].'payload'.'issue'.'updated_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[1].'payload'.'issue'.'closed_at'", nullValue())
                .body("[1].'payload'.'issue'.'author_association'", containsString("CONTRIBUTOR"))
                .body("[1].'payload'.'issue'.'active_lock_reason'", nullValue())
                .body("[1].'payload'.'issue'.'draft'", equalTo(false))
                .body("[1].'payload'.'issue'.'pull_request'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/pulls/40262"))
                .body("[1].'payload'.'issue'.'pull_request'.'html_url'", containsString("https://github.com/bioconda/bioconda-recipes/pull/40262"))
                .body("[1].'payload'.'issue'.'pull_request'.'diff_url'", containsString("https://github.com/bioconda/bioconda-recipes/pull/40262.diff"))
                .body("[1].'payload'.'issue'.'pull_request'.'patch_url'", containsString("https://github.com/bioconda/bioconda-recipes/pull/40262.patch"))
                .body("[1].'payload'.'issue'.'pull_request'.'merged_at'", nullValue())
                .body("[1].'payload'.'issue'.'body'", containsString("Added pandas as a requirement for the package, as it is needed by the duplicate_finder.py script.\r\n\r\nDescribe your pull request here\r\n\r\n----\r\n\r\nPlease read the [guidelines for Bioconda recipes](https://bioconda.github.io/contributor/guidelines.html) before opening a pull request (PR).\r\n\r\n* If this PR adds or updates a recipe, use \"Add\" or \"Update\" appropriately as the first word in its title.\r\n* New recipes not directly relevant to the biological sciences need to be submitted to the [conda-forge channel](https://conda-forge.org/docs/) instead of Bioconda.\r\n* PRs require reviews prior to being merged. Once your PR is passing tests and ready to be merged, please issue the `@BiocondaBot please add label` command.\r\n* Please post questions [on Gitter](https://gitter.im/bioconda/Lobby) or ping `@bioconda/core` in a comment.\r\n\r\n<details>\r\n  <summary>Please use the following BiocondaBot commands:</summary>\r\n\r\nEveryone has access to the following BiocondaBot commands, which can be given in a comment:\r\n\r\n<table>\r\n  <tr>\r\n    <td><code>@BiocondaBot please update</code></td>\r\n    <td>Merge the master branch into a PR.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@BiocondaBot please add label</code></td>\r\n    <td>Add the <code>please review & merge</code> label.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@BiocondaBot please fetch artifacts</code></td>\r\n    <td>Post links to CI-built packages/containers. <br />You can use this to test packages locally.</td>\r\n  </tr>\r\n</table>\r\n\r\nFor members of the Bioconda project, the following command is also available:\r\n\r\n<table>\r\n  <tr>\r\n    <td><code>@BiocondaBot please merge</code></td>\r\n    <td>Upload built packages/containers and merge a PR. <br />Someone must approve a PR first! <br />This reduces CI build time by reusing built artifacts.</td>\r\n  </tr>\r\n</table>\r\n\r\nAlso, the bot watches for comments from non-members that include `@bioconda/<team>` and will automatically re-post them to notify the addressed `<team>`.\r\n\r\n</details>\r\n"))
                .body("[1].'payload'.'issue'.'reactions'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262/reactions"))
                .body("[1].'payload'.'issue'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'timeline_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262/timeline"))
                .body("[1].'payload'.'issue'.'performed_via_github_app'", nullValue())
                .body("[1].'payload'.'issue'.'state_reason'", nullValue())
                .body("[1].'payload'.'comment'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/comments/1498928881"))
                .body("[1].'payload'.'comment'.'html_url'", containsString("https://github.com/bioconda/bioconda-recipes/pull/40262#issuecomment-1498928881"))
                .body("[1].'payload'.'comment'.'issue_url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/40262"))
                .body("[1].'payload'.'comment'.'node_id'", containsString("IC_kwDOAoaL_s5ZV9bx"))
                .body("[1].'payload'.'comment'.'user'.'login'", containsString("apeltzer"))
                .body("[1].'payload'.'comment'.'user'.'node_id'", containsString("MDQ6VXNlcjIzNTk1MTA="))
                .body("[1].'payload'.'comment'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/2359510?v=4"))
                .body("[1].'payload'.'comment'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'comment'.'user'.'url'", containsString("https://api.github.com/users/apeltzer"))
                .body("[1].'payload'.'comment'.'user'.'html_url'", containsString("https://github.com/apeltzer"))
                .body("[1].'payload'.'comment'.'user'.'followers_url'", containsString("https://api.github.com/users/apeltzer/followers"))
                .body("[1].'payload'.'comment'.'user'.'following_url'", containsString("https://api.github.com/users/apeltzer/following{/other_user}"))
                .body("[1].'payload'.'comment'.'user'.'gists_url'", containsString("https://api.github.com/users/apeltzer/gists{/gist_id}"))
                .body("[1].'payload'.'comment'.'user'.'starred_url'", containsString("https://api.github.com/users/apeltzer/starred{/owner}{/repo}"))
                .body("[1].'payload'.'comment'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/apeltzer/subscriptions"))
                .body("[1].'payload'.'comment'.'user'.'organizations_url'", containsString("https://api.github.com/users/apeltzer/orgs"))
                .body("[1].'payload'.'comment'.'user'.'repos_url'", containsString("https://api.github.com/users/apeltzer/repos"))
                .body("[1].'payload'.'comment'.'user'.'events_url'", containsString("https://api.github.com/users/apeltzer/events{/privacy}"))
                .body("[1].'payload'.'comment'.'user'.'received_events_url'", containsString("https://api.github.com/users/apeltzer/received_events"))
                .body("[1].'payload'.'comment'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'comment'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'comment'.'created_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[1].'payload'.'comment'.'updated_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[1].'payload'.'comment'.'author_association'", containsString("MEMBER"))
                .body("[1].'payload'.'comment'.'body'", containsString("@bioconda-bot please merge"))
                .body("[1].'payload'.'comment'.'reactions'.'url'", containsString("https://api.github.com/repos/bioconda/bioconda-recipes/issues/comments/1498928881/reactions"))
                .body("[1].'payload'.'comment'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'performed_via_github_app'", nullValue())
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:39:20Z"))
                .body("[1].'org'.'login'", containsString("bioconda"))
                .body("[1].'org'.'gravatar_id'", containsString(""))
                .body("[1].'org'.'url'", containsString("https://api.github.com/orgs/bioconda"))
                .body("[1].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/14253259?"))
                .body("[2].'type'", containsString("PushEvent"))
                .body("[2].'actor'.'login'", containsString("gabriel24felipe"))
                .body("[2].'actor'.'display_login'", containsString("gabriel24felipe"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/gabriel24felipe"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/108344738?"))
                .body("[2].'repo'.'name'", containsString("gabriel24felipe/trabalho"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/gabriel24felipe/trabalho"))
                .body("[2].'payload'.'repository_id'", numberMatches(6.24397869E8))
                .body("[2].'payload'.'push_id'", numberMatches(1.3211194165E10))
                .body("[2].'payload'.'size'", numberMatches(1.0))
                .body("[2].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[2].'payload'.'ref'", containsString("refs/heads/main"))
                .body("[2].'payload'.'head'", containsString("e4aab4ed21e9fc1fe19ecedd157ab3d7286f6476"))
                .body("[2].'payload'.'before'", containsString("fe329ee92c052fc2ffd222187b5ff84179218c23"))
                .body("[2].'payload'.'commits'.size()", equalTo(1))
                .body("[2].'payload'.'commits'[0].'sha'", containsString("e4aab4ed21e9fc1fe19ecedd157ab3d7286f6476"))
                .body("[2].'payload'.'commits'[0].'author'.'email'", containsString("108344738+gabriel24felipe@users.noreply.github.com"))
                .body("[2].'payload'.'commits'[0].'author'.'name'", containsString("2H-Gastao Gabriel Felipe Fernandes Ribeiro"))
                .body("[2].'payload'.'commits'[0].'message'", containsString("Delete segundoh_2023-main.zip"))
                .body("[2].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[2].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/gabriel24felipe/trabalho/commits/e4aab4ed21e9fc1fe19ecedd157ab3d7286f6476"))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:39:20Z"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/kjK/A/git/ref/4U4B4e")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-reference"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/knKXPLsRZNXi/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/YUyq5A/hooks/iDuY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/q5yPxH/8n3a2I/pages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#create-a-github-pages-site"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 409, 415, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users?since=784")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'login'", containsString("kevinfinlayson"))
                .body("[0].'node_id'", containsString("MDQ6VXNlcjc4NQ=="))
                .body("[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/785?v=4"))
                .body("[0].'gravatar_id'", containsString(""))
                .body("[0].'url'", containsString("https://api.github.com/users/kevinfinlayson"))
                .body("[0].'html_url'", containsString("https://github.com/kevinfinlayson"))
                .body("[0].'followers_url'", containsString("https://api.github.com/users/kevinfinlayson/followers"))
                .body("[0].'following_url'", containsString("https://api.github.com/users/kevinfinlayson/following{/other_user}"))
                .body("[0].'gists_url'", containsString("https://api.github.com/users/kevinfinlayson/gists{/gist_id}"))
                .body("[0].'starred_url'", containsString("https://api.github.com/users/kevinfinlayson/starred{/owner}{/repo}"))
                .body("[0].'subscriptions_url'", containsString("https://api.github.com/users/kevinfinlayson/subscriptions"))
                .body("[0].'organizations_url'", containsString("https://api.github.com/users/kevinfinlayson/orgs"))
                .body("[0].'repos_url'", containsString("https://api.github.com/users/kevinfinlayson/repos"))
                .body("[0].'events_url'", containsString("https://api.github.com/users/kevinfinlayson/events{/privacy}"))
                .body("[0].'received_events_url'", containsString("https://api.github.com/users/kevinfinlayson/received_events"))
                .body("[0].'type'", containsString("User"))
                .body("[0].'site_admin'", equalTo(false))
                .body("[1].'login'", containsString("adamsalter"))
                .body("[1].'node_id'", containsString("MDQ6VXNlcjc4Ng=="))
                .body("[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/786?v=4"))
                .body("[1].'gravatar_id'", containsString(""))
                .body("[1].'url'", containsString("https://api.github.com/users/adamsalter"))
                .body("[1].'html_url'", containsString("https://github.com/adamsalter"))
                .body("[1].'followers_url'", containsString("https://api.github.com/users/adamsalter/followers"))
                .body("[1].'following_url'", containsString("https://api.github.com/users/adamsalter/following{/other_user}"))
                .body("[1].'gists_url'", containsString("https://api.github.com/users/adamsalter/gists{/gist_id}"))
                .body("[1].'starred_url'", containsString("https://api.github.com/users/adamsalter/starred{/owner}{/repo}"))
                .body("[1].'subscriptions_url'", containsString("https://api.github.com/users/adamsalter/subscriptions"))
                .body("[1].'organizations_url'", containsString("https://api.github.com/users/adamsalter/orgs"))
                .body("[1].'repos_url'", containsString("https://api.github.com/users/adamsalter/repos"))
                .body("[1].'events_url'", containsString("https://api.github.com/users/adamsalter/events{/privacy}"))
                .body("[1].'received_events_url'", containsString("https://api.github.com/users/adamsalter/received_events"))
                .body("[1].'type'", containsString("User"))
                .body("[1].'site_admin'", equalTo(false))
                .body("[2].'login'", containsString("joe"))
                .body("[2].'node_id'", containsString("MDQ6VXNlcjc4Nw=="))
                .body("[2].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/787?v=4"))
                .body("[2].'gravatar_id'", containsString(""))
                .body("[2].'url'", containsString("https://api.github.com/users/joe"))
                .body("[2].'html_url'", containsString("https://github.com/joe"))
                .body("[2].'followers_url'", containsString("https://api.github.com/users/joe/followers"))
                .body("[2].'following_url'", containsString("https://api.github.com/users/joe/following{/other_user}"))
                .body("[2].'gists_url'", containsString("https://api.github.com/users/joe/gists{/gist_id}"))
                .body("[2].'starred_url'", containsString("https://api.github.com/users/joe/starred{/owner}{/repo}"))
                .body("[2].'subscriptions_url'", containsString("https://api.github.com/users/joe/subscriptions"))
                .body("[2].'organizations_url'", containsString("https://api.github.com/users/joe/orgs"))
                .body("[2].'repos_url'", containsString("https://api.github.com/users/joe/repos"))
                .body("[2].'events_url'", containsString("https://api.github.com/users/joe/events{/privacy}"))
                .body("[2].'received_events_url'", containsString("https://api.github.com/users/joe/received_events"))
                .body("[2].'type'", containsString("User"))
                .body("[2].'site_admin'", equalTo(false))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/z/upR/issues/tKARGsM7By/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-an-issue-comment"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/VSe1sEN5FMmRcv/16dtXiCLMp/issues/comments/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-comment"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/YIZQbmXnNX/oyyNgAGLMM/git/commits/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-commit"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"xUUCVxD2Gcu5JvW1\", " + 
                    " \"body\": \"gBwIDRAl\", " + 
                    " \"private\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/R5N/teams/gBwIDRAl/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/Dv61RLhyFD/oX4XwwPHnNuoao/pulls/comments/p9ZTF5qJBVY1V/reactions")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 415).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("limit", "origin", "expires_at")));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/288/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-child-teams-legacy"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/oCQ/teams/kub5lMw/repos/Gv8JvHZIHZiX1Cp3/7nXXI4CV6gmUX1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/subscriptions?per_page=532")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'node_id'", containsString("R_kgDOHV7fxQ"))
                .body("[0].'name'", containsString("Cajviewer-crash"))
                .body("[0].'full_name'", containsString("painsAgains/Cajviewer-crash"))
                .body("[0].'private'", equalTo(true))
                .body("[0].'owner'.'login'", containsString("painsAgains"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'description'", containsString("find  crashs in cajviewer "))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/deployments"))
                .body("[0].'created_at'", containsString("2022-05-16T08:58:01Z"))
                .body("[0].'updated_at'", containsString("2022-05-20T03:07:07Z"))
                .body("[0].'pushed_at'", containsString("2022-05-16T09:04:43Z"))
                .body("[0].'git_url'", containsString("git://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:painsAgains/Cajviewer-crash.git"))
                .body("[0].'clone_url'", containsString("https://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'svn_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1340.0))
                .body("[0].'stargazers_count'", numberMatches(0.0))
                .body("[0].'watchers_count'", numberMatches(0.0))
                .body("[0].'language'", nullValue())
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(false))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(0.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(0.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("private"))
                .body("[0].'forks'", numberMatches(0.0))
                .body("[0].'open_issues'", numberMatches(0.0))
                .body("[0].'watchers'", numberMatches(0.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(true))
                .body("[0].'permissions'.'maintain'", equalTo(true))
                .body("[0].'permissions'.'push'", equalTo(true))
                .body("[0].'permissions'.'triage'", equalTo(true))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIV78aQ"))
                .body("[1].'name'", containsString("hack"))
                .body("[1].'full_name'", containsString("painsAgains/hack"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("painsAgains"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'description'", containsString("hack_js"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/painsAgains/hack"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/painsAgains/hack/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/painsAgains/hack/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/hack/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/painsAgains/hack/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/hack/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/painsAgains/hack/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/hack/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/painsAgains/hack/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/hack/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/painsAgains/hack/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/hack/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/hack/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/painsAgains/hack/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/painsAgains/hack/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/painsAgains/hack/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/painsAgains/hack/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/painsAgains/hack/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/hack/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/hack/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/hack/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/hack/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/painsAgains/hack/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/painsAgains/hack/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/hack/deployments"))
                .body("[1].'created_at'", containsString("2022-10-31T09:24:23Z"))
                .body("[1].'updated_at'", containsString("2022-10-31T09:38:12Z"))
                .body("[1].'pushed_at'", containsString("2022-11-01T02:14:43Z"))
                .body("[1].'git_url'", containsString("git://github.com/painsAgains/hack.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:painsAgains/hack.git"))
                .body("[1].'clone_url'", containsString("https://github.com/painsAgains/hack.git"))
                .body("[1].'svn_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'homepage'", nullValue())
                .body("[1].'size'", numberMatches(20835.0))
                .body("[1].'stargazers_count'", numberMatches(0.0))
                .body("[1].'watchers_count'", numberMatches(0.0))
                .body("[1].'language'", containsString("JavaScript"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(0.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(0.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(0))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(0.0))
                .body("[1].'open_issues'", numberMatches(0.0))
                .body("[1].'watchers'", numberMatches(0.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(true))
                .body("[1].'permissions'.'maintain'", equalTo(true))
                .body("[1].'permissions'.'push'", equalTo(true))
                .body("[1].'permissions'.'triage'", equalTo(true))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOIaDp1Q"))
                .body("[2].'name'", containsString("my_script"))
                .body("[2].'full_name'", containsString("painsAgains/my_script"))
                .body("[2].'private'", equalTo(true))
                .body("[2].'owner'.'login'", containsString("painsAgains"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'description'", containsString("实验脚本"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/painsAgains/my_script"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/painsAgains/my_script/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/my_script/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/painsAgains/my_script/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/painsAgains/my_script/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/my_script/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/painsAgains/my_script/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/painsAgains/my_script/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/painsAgains/my_script/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/painsAgains/my_script/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/my_script/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/my_script/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/my_script/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/my_script/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/painsAgains/my_script/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/painsAgains/my_script/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/deployments"))
                .body("[2].'created_at'", containsString("2022-11-10T07:33:53Z"))
                .body("[2].'updated_at'", containsString("2022-11-15T09:36:46Z"))
                .body("[2].'pushed_at'", containsString("2023-03-02T03:33:01Z"))
                .body("[2].'git_url'", containsString("git://github.com/painsAgains/my_script.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:painsAgains/my_script.git"))
                .body("[2].'clone_url'", containsString("https://github.com/painsAgains/my_script.git"))
                .body("[2].'svn_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'homepage'", nullValue())
                .body("[2].'size'", numberMatches(931.0))
                .body("[2].'stargazers_count'", numberMatches(0.0))
                .body("[2].'watchers_count'", numberMatches(0.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(false))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(0.0))
                .body("[2].'license'", nullValue())
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("private"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(0.0))
                .body("[2].'watchers'", numberMatches(0.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(true))
                .body("[2].'permissions'.'maintain'", equalTo(true))
                .body("[2].'permissions'.'push'", equalTo(true))
                .body("[2].'permissions'.'triage'", equalTo(true))
                .body("[2].'permissions'.'pull'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/eDQFY3nGFmu0vHou/J/forks?sort=stargazers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-forks"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 400).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/Cl6691MKIfYAhSj/afEkU81TeR23/pulls/comments/1r")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/MQO/JOYqsgUVTVY/contents/QXmODUbtP7u_IEI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-file"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/icPhI6SvcnFsQLi/EN0Y/compare/wrsmInGr1...tqOIbQQBKY77")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#compare-two-commits"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/g6Vd8x__p/QTNOSwMaR8tb/git/trees/9HSwdJKa2l6gtD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-tree"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/IyKWqHmzP62qt/1/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#list-repository-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" \"627\" ")
                .post(baseUrlOfSut + "/projects/columns/627/cards")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-project-card"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/starred")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"position\": \"LR701SAPsZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/projects/columns/719/moves")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You need at least public_repo scope to view public repository projects via OAuth"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#move-a-project-column"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses?" + 
                    "featured=true&" + 
                    "per_page=926")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'key'", containsString("apache-2.0"))
                .body("[0].'name'", containsString("Apache License 2.0"))
                .body("[0].'spdx_id'", containsString("Apache-2.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[1].'key'", containsString("gpl-3.0"))
                .body("[1].'name'", containsString("GNU General Public License v3.0"))
                .body("[1].'spdx_id'", containsString("GPL-3.0"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/gpl-3.0"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTk="))
                .body("[2].'key'", containsString("mit"))
                .body("[2].'name'", containsString("MIT License"))
                .body("[2].'spdx_id'", containsString("MIT"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/mit"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTEz"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("limit", "origin", "expires_at")));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/nq43oqBwBA/eyH2/commits/EN1es7wz/status")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#get-a-commit"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/repository_invitations?per_page=261")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/7Kkq16SCGrqT/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-repository"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/m/teams/1/discussions/1/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/379/discussions/2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/CNJMeb2N/_/generate")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/boxMB/actions/runner-groups/OEI0IUP/repositories/wNaj8TXymmZeKCLf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/subscriptions?per_page=517")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'node_id'", containsString("R_kgDOHV7fxQ"))
                .body("[0].'name'", containsString("Cajviewer-crash"))
                .body("[0].'full_name'", containsString("painsAgains/Cajviewer-crash"))
                .body("[0].'private'", equalTo(true))
                .body("[0].'owner'.'login'", containsString("painsAgains"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'description'", containsString("find  crashs in cajviewer "))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/deployments"))
                .body("[0].'created_at'", containsString("2022-05-16T08:58:01Z"))
                .body("[0].'updated_at'", containsString("2022-05-20T03:07:07Z"))
                .body("[0].'pushed_at'", containsString("2022-05-16T09:04:43Z"))
                .body("[0].'git_url'", containsString("git://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:painsAgains/Cajviewer-crash.git"))
                .body("[0].'clone_url'", containsString("https://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'svn_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1340.0))
                .body("[0].'stargazers_count'", numberMatches(0.0))
                .body("[0].'watchers_count'", numberMatches(0.0))
                .body("[0].'language'", nullValue())
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(false))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(0.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(0.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("private"))
                .body("[0].'forks'", numberMatches(0.0))
                .body("[0].'open_issues'", numberMatches(0.0))
                .body("[0].'watchers'", numberMatches(0.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(true))
                .body("[0].'permissions'.'maintain'", equalTo(true))
                .body("[0].'permissions'.'push'", equalTo(true))
                .body("[0].'permissions'.'triage'", equalTo(true))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIV78aQ"))
                .body("[1].'name'", containsString("hack"))
                .body("[1].'full_name'", containsString("painsAgains/hack"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("painsAgains"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'description'", containsString("hack_js"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/painsAgains/hack"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/painsAgains/hack/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/painsAgains/hack/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/hack/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/painsAgains/hack/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/hack/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/painsAgains/hack/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/hack/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/painsAgains/hack/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/hack/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/painsAgains/hack/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/hack/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/hack/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/painsAgains/hack/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/painsAgains/hack/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/painsAgains/hack/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/painsAgains/hack/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/painsAgains/hack/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/hack/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/hack/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/hack/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/hack/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/painsAgains/hack/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/painsAgains/hack/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/hack/deployments"))
                .body("[1].'created_at'", containsString("2022-10-31T09:24:23Z"))
                .body("[1].'updated_at'", containsString("2022-10-31T09:38:12Z"))
                .body("[1].'pushed_at'", containsString("2022-11-01T02:14:43Z"))
                .body("[1].'git_url'", containsString("git://github.com/painsAgains/hack.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:painsAgains/hack.git"))
                .body("[1].'clone_url'", containsString("https://github.com/painsAgains/hack.git"))
                .body("[1].'svn_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'homepage'", nullValue())
                .body("[1].'size'", numberMatches(20835.0))
                .body("[1].'stargazers_count'", numberMatches(0.0))
                .body("[1].'watchers_count'", numberMatches(0.0))
                .body("[1].'language'", containsString("JavaScript"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(0.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(0.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(0))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(0.0))
                .body("[1].'open_issues'", numberMatches(0.0))
                .body("[1].'watchers'", numberMatches(0.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(true))
                .body("[1].'permissions'.'maintain'", equalTo(true))
                .body("[1].'permissions'.'push'", equalTo(true))
                .body("[1].'permissions'.'triage'", equalTo(true))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOIaDp1Q"))
                .body("[2].'name'", containsString("my_script"))
                .body("[2].'full_name'", containsString("painsAgains/my_script"))
                .body("[2].'private'", equalTo(true))
                .body("[2].'owner'.'login'", containsString("painsAgains"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'description'", containsString("实验脚本"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/painsAgains/my_script"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/painsAgains/my_script/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/my_script/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/painsAgains/my_script/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/painsAgains/my_script/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/my_script/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/painsAgains/my_script/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/painsAgains/my_script/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/painsAgains/my_script/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/painsAgains/my_script/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/my_script/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/my_script/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/my_script/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/my_script/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/painsAgains/my_script/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/painsAgains/my_script/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/deployments"))
                .body("[2].'created_at'", containsString("2022-11-10T07:33:53Z"))
                .body("[2].'updated_at'", containsString("2022-11-15T09:36:46Z"))
                .body("[2].'pushed_at'", containsString("2023-03-02T03:33:01Z"))
                .body("[2].'git_url'", containsString("git://github.com/painsAgains/my_script.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:painsAgains/my_script.git"))
                .body("[2].'clone_url'", containsString("https://github.com/painsAgains/my_script.git"))
                .body("[2].'svn_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'homepage'", nullValue())
                .body("[2].'size'", numberMatches(931.0))
                .body("[2].'stargazers_count'", numberMatches(0.0))
                .body("[2].'watchers_count'", numberMatches(0.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(false))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(0.0))
                .body("[2].'license'", nullValue())
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("private"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(0.0))
                .body("[2].'watchers'", numberMatches(0.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(true))
                .body("[2].'permissions'.'maintain'", equalTo(true))
                .body("[2].'permissions'.'push'", equalTo(true))
                .body("[2].'permissions'.'triage'", equalTo(true))
                .body("[2].'permissions'.'pull'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_2.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/EDy077ESrK1QojyG/actions/runner-groups/S1/runners/t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/raDleOfHQ/8TLIAQv/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/GCGo6h/wtqkoIbL5V6liArl/actions/runs/rFsVk2IgchSuG/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/ELy8W59/1tRJPRIfOCYs/check-suites/BLokTf3CgJ6j/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/public")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'url'", containsString("https://api.github.com/gists/4adb96f8d4b62d7594edc0daf969a1c9"))
                .body("[0].'forks_url'", containsString("https://api.github.com/gists/4adb96f8d4b62d7594edc0daf969a1c9/forks"))
                .body("[0].'commits_url'", containsString("https://api.github.com/gists/4adb96f8d4b62d7594edc0daf969a1c9/commits"))
                .body("[0].'node_id'", containsString("G_kwDOAMK0LNoAIDRhZGI5NmY4ZDRiNjJkNzU5NGVkYzBkYWY5NjlhMWM5"))
                .body("[0].'git_pull_url'", containsString("https://gist.github.com/4adb96f8d4b62d7594edc0daf969a1c9.git"))
                .body("[0].'git_push_url'", containsString("https://gist.github.com/4adb96f8d4b62d7594edc0daf969a1c9.git"))
                .body("[0].'html_url'", containsString("https://gist.github.com/HPCCSmoketest/4adb96f8d4b62d7594edc0daf969a1c9"))
                .body("[0].'files'.'README.md'.'filename'", containsString("README.md"))
                .body("[0].'files'.'README.md'.'type'", containsString("text/markdown"))
                .body("[0].'files'.'README.md'.'language'", containsString("Markdown"))
                .body("[0].'files'.'README.md'.'raw_url'", containsString("https://gist.githubusercontent.com/HPCCSmoketest/4adb96f8d4b62d7594edc0daf969a1c9/raw/f9a4f47de3aa07888ddb370d7502d4935fef6349/README.md"))
                .body("[0].'files'.'README.md'.'size'", numberMatches(455.0))
                .body("[0].'files'.'result-23-04-06-11-48-15.log'.'filename'", containsString("result-23-04-06-11-48-15.log"))
                .body("[0].'files'.'result-23-04-06-11-48-15.log'.'type'", containsString("text/plain"))
                .body("[0].'files'.'result-23-04-06-11-48-15.log'.'language'", nullValue())
                .body("[0].'files'.'result-23-04-06-11-48-15.log'.'raw_url'", containsString("https://gist.githubusercontent.com/HPCCSmoketest/4adb96f8d4b62d7594edc0daf969a1c9/raw/dc02c331321cd414c3e3fae7481623a5e1e1e2aa/result-23-04-06-11-48-15.log"))
                .body("[0].'files'.'result-23-04-06-11-48-15.log'.'size'", numberMatches(6460.0))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:48:32Z"))
                .body("[0].'updated_at'", containsString("2023-04-06T11:48:34Z"))
                .body("[0].'description'", containsString("PR-17198"))
                .body("[0].'comments'", numberMatches(0.0))
                .body("[0].'user'", nullValue())
                .body("[0].'comments_url'", containsString("https://api.github.com/gists/4adb96f8d4b62d7594edc0daf969a1c9/comments"))
                .body("[0].'owner'.'login'", containsString("HPCCSmoketest"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjEyNzYwMTA4"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/12760108?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/HPCCSmoketest"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/HPCCSmoketest"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/HPCCSmoketest/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/HPCCSmoketest/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/HPCCSmoketest/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/HPCCSmoketest/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/HPCCSmoketest/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/HPCCSmoketest/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/HPCCSmoketest/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/HPCCSmoketest/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/HPCCSmoketest/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'truncated'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/gists/d72a90fe2230c53685831d398afccb49"))
                .body("[1].'forks_url'", containsString("https://api.github.com/gists/d72a90fe2230c53685831d398afccb49/forks"))
                .body("[1].'commits_url'", containsString("https://api.github.com/gists/d72a90fe2230c53685831d398afccb49/commits"))
                .body("[1].'node_id'", containsString("G_kwDOAYRM6toAIGQ3MmE5MGZlMjIzMGM1MzY4NTgzMWQzOThhZmNjYjQ5"))
                .body("[1].'git_pull_url'", containsString("https://gist.github.com/d72a90fe2230c53685831d398afccb49.git"))
                .body("[1].'git_push_url'", containsString("https://gist.github.com/d72a90fe2230c53685831d398afccb49.git"))
                .body("[1].'html_url'", containsString("https://gist.github.com/GrahamcOfBorg/d72a90fe2230c53685831d398afccb49"))
                .body("[1].'files'.'Changed Paths'.'filename'", containsString("Changed Paths"))
                .body("[1].'files'.'Changed Paths'.'type'", containsString("text/plain"))
                .body("[1].'files'.'Changed Paths'.'language'", nullValue())
                .body("[1].'files'.'Changed Paths'.'raw_url'", containsString("https://gist.githubusercontent.com/GrahamcOfBorg/d72a90fe2230c53685831d398afccb49/raw/ce5de2105269e6fa464355996fe13e575119c2d6/Changed%20Paths"))
                .body("[1].'files'.'Changed Paths'.'size'", numberMatches(7953440.0))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:48:16Z"))
                .body("[1].'updated_at'", containsString("2023-04-06T11:48:17Z"))
                .body("[1].'description'", containsString(""))
                .body("[1].'comments'", numberMatches(0.0))
                .body("[1].'user'", nullValue())
                .body("[1].'comments_url'", containsString("https://api.github.com/gists/d72a90fe2230c53685831d398afccb49/comments"))
                .body("[1].'owner'.'login'", containsString("GrahamcOfBorg"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjI1NDQ3NjU4"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/25447658?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/GrahamcOfBorg"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/GrahamcOfBorg"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/GrahamcOfBorg/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/GrahamcOfBorg/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/GrahamcOfBorg/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/GrahamcOfBorg/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/GrahamcOfBorg/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/GrahamcOfBorg/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/GrahamcOfBorg/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/GrahamcOfBorg/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/GrahamcOfBorg/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'truncated'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/gists/c16f85de3116d7522bc9c7adda9b7e70"))
                .body("[2].'forks_url'", containsString("https://api.github.com/gists/c16f85de3116d7522bc9c7adda9b7e70/forks"))
                .body("[2].'commits_url'", containsString("https://api.github.com/gists/c16f85de3116d7522bc9c7adda9b7e70/commits"))
                .body("[2].'node_id'", containsString("G_kwDOA-5eodoAIGMxNmY4NWRlMzExNmQ3NTIyYmM5YzdhZGRhOWI3ZTcw"))
                .body("[2].'git_pull_url'", containsString("https://gist.github.com/c16f85de3116d7522bc9c7adda9b7e70.git"))
                .body("[2].'git_push_url'", containsString("https://gist.github.com/c16f85de3116d7522bc9c7adda9b7e70.git"))
                .body("[2].'html_url'", containsString("https://gist.github.com/MridullaR/c16f85de3116d7522bc9c7adda9b7e70"))
                .body("[2].'files'.'gistfile1.txt'.'filename'", containsString("gistfile1.txt"))
                .body("[2].'files'.'gistfile1.txt'.'type'", containsString("text/plain"))
                .body("[2].'files'.'gistfile1.txt'.'language'", containsString("Text"))
                .body("[2].'files'.'gistfile1.txt'.'raw_url'", containsString("https://gist.githubusercontent.com/MridullaR/c16f85de3116d7522bc9c7adda9b7e70/raw/ac09644b032c60c55a8c38ce3a58e48e976f581d/gistfile1.txt"))
                .body("[2].'files'.'gistfile1.txt'.'size'", numberMatches(463988.0))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:47:58Z"))
                .body("[2].'updated_at'", containsString("2023-04-06T11:47:59Z"))
                .body("[2].'description'", containsString(""))
                .body("[2].'comments'", numberMatches(0.0))
                .body("[2].'user'", nullValue())
                .body("[2].'comments_url'", containsString("https://api.github.com/gists/c16f85de3116d7522bc9c7adda9b7e70/comments"))
                .body("[2].'owner'.'login'", containsString("MridullaR"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjY1OTUzNDQx"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/65953441?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/MridullaR"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/MridullaR"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/MridullaR/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/MridullaR/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/MridullaR/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/MridullaR/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/MridullaR/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/MridullaR/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/MridullaR/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/MridullaR/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/MridullaR/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'truncated'", equalTo(false))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/migrations/20/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive"));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/projects/columns/226/cards")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requires authentication"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-project-card"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6_L9eHGM/l/languages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-languages"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/H2zApN/6GHP/comments/sHTUWfzXsDe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#delete-a-commit-comment"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/WhygVxZ89x/c3fsAPR8L6/pulls/lz0Sp6VrKW/reviews/mV2H8F07DAE38/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/169fvFxrbgiAu/pKGEf_m_eMO/tags")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-tags"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/E8NEaf9g2PoQ/py7OCkHxOXDrLu/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#get-a-repository-subscription"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"labels\": [ " + 
                    " \"fPuB0qlFWcB\", " + 
                    " \"6G8RlF\", " + 
                    " \"P9e2C3tp\", " + 
                    " \"2iG\", " + 
                    " \"zeU91nOOS8O_JrE\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/UoZIuRa/RUnCNlo7w580k/issues/0jaN9qLvOYghdYN/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#add-labels-to-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/SKrDYL/VkljD0ni/contributors?anon=HdM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-contributors"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/commits?" + 
                    "q=RxWpUz7de&" + 
                    "sort=author-date")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/ee/packages/rubygems/HsL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/vcUiYtWthoDfZBYV/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"teams\": [ " + 
                    " \"5Jhrxn\", " + 
                    " \"4fwoa\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/R2dyjnM4/ewKhmlXwUeyvHGz9/branches/dHbxFZJgI/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/AYDL/l/releases/tags/4WHm4NMpc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repos/6lwJKF/W48n/releases/2Wkap8Of9L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/158/repos/R/czRSsugemgPUkEf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events?per_page=636")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'type'", containsString("CreateEvent"))
                .body("[0].'actor'.'login'", containsString("zhangzqs"))
                .body("[0].'actor'.'display_login'", containsString("zhangzqs"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/zhangzqs"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/34616640?"))
                .body("[0].'repo'.'name'", containsString("zhangzqs/kubernetes-csi-driver"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/zhangzqs/kubernetes-csi-driver"))
                .body("[0].'payload'.'ref'", containsString("v1.2.3"))
                .body("[0].'payload'.'ref_type'", containsString("tag"))
                .body("[0].'payload'.'master_branch'", containsString("master"))
                .body("[0].'payload'.'description'", containsString("CSI Plugin for Kubernetes, Support Qiniu Cloud Storage."))
                .body("[0].'payload'.'pusher_type'", containsString("user"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:45:16Z"))
                .body("[1].'type'", containsString("PushEvent"))
                .body("[1].'actor'.'login'", containsString("github-actions[bot]"))
                .body("[1].'actor'.'display_login'", containsString("github-actions"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/github-actions[bot]"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/41898282?"))
                .body("[1].'repo'.'name'", containsString("russss/power-outage-history"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/russss/power-outage-history"))
                .body("[1].'payload'.'repository_id'", numberMatches(4.53814362E8))
                .body("[1].'payload'.'push_id'", numberMatches(1.3211254911E10))
                .body("[1].'payload'.'size'", numberMatches(1.0))
                .body("[1].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[1].'payload'.'ref'", containsString("refs/heads/main"))
                .body("[1].'payload'.'head'", containsString("6fffb2b75f9aa8bbf8923b4a098d3c6642611386"))
                .body("[1].'payload'.'before'", containsString("5254bea7b56368ab9b635fa443add6174f883b94"))
                .body("[1].'payload'.'commits'.size()", equalTo(1))
                .body("[1].'payload'.'commits'[0].'sha'", containsString("6fffb2b75f9aa8bbf8923b4a098d3c6642611386"))
                .body("[1].'payload'.'commits'[0].'author'.'email'", containsString("actions@users.noreply.github.com"))
                .body("[1].'payload'.'commits'[0].'author'.'name'", containsString("Automated"))
                .body("[1].'payload'.'commits'[0].'message'", containsString("Latest data: Thu Apr  6 11:45:15 UTC 2023"))
                .body("[1].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[1].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/russss/power-outage-history/commits/6fffb2b75f9aa8bbf8923b4a098d3c6642611386"))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:45:16Z"))
                .body("[2].'type'", containsString("PushEvent"))
                .body("[2].'actor'.'login'", containsString("SK757"))
                .body("[2].'actor'.'display_login'", containsString("SK757"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/SK757"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/25616418?"))
                .body("[2].'repo'.'name'", containsString("SK757/FPL_Compiler"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/SK757/FPL_Compiler"))
                .body("[2].'payload'.'repository_id'", numberMatches(2.33128667E8))
                .body("[2].'payload'.'push_id'", numberMatches(1.3211254868E10))
                .body("[2].'payload'.'size'", numberMatches(1.0))
                .body("[2].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[2].'payload'.'ref'", containsString("refs/heads/master"))
                .body("[2].'payload'.'head'", containsString("2b519f3f0c5b605a2da160a5e594089e454b9b8a"))
                .body("[2].'payload'.'before'", containsString("9371f176c736098fa6c45ae20732950b77eac8cb"))
                .body("[2].'payload'.'commits'.size()", equalTo(1))
                .body("[2].'payload'.'commits'[0].'sha'", containsString("2b519f3f0c5b605a2da160a5e594089e454b9b8a"))
                .body("[2].'payload'.'commits'[0].'author'.'email'", containsString("seankirk757@gmail.com"))
                .body("[2].'payload'.'commits'[0].'author'.'name'", containsString("Sean Kirk"))
                .body("[2].'payload'.'commits'[0].'message'", containsString("GW29"))
                .body("[2].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[2].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/SK757/FPL_Compiler/commits/2b519f3f0c5b605a2da160a5e594089e454b9b8a"))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:45:16Z"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/codes_of_conduct/w0_0RmtC7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'current_user_url'", containsString("https://api.github.com/user"))
                .body("'current_user_authorizations_html_url'", containsString("https://github.com/settings/connections/applications{/client_id}"))
                .body("'authorizations_url'", containsString("https://api.github.com/authorizations"))
                .body("'code_search_url'", containsString("https://api.github.com/search/code?q={query}{&page,per_page,sort,order}"))
                .body("'commit_search_url'", containsString("https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}"))
                .body("'emails_url'", containsString("https://api.github.com/user/emails"))
                .body("'emojis_url'", containsString("https://api.github.com/emojis"))
                .body("'events_url'", containsString("https://api.github.com/events"))
                .body("'feeds_url'", containsString("https://api.github.com/feeds"))
                .body("'followers_url'", containsString("https://api.github.com/user/followers"))
                .body("'following_url'", containsString("https://api.github.com/user/following{/target}"))
                .body("'gists_url'", containsString("https://api.github.com/gists{/gist_id}"))
                .body("'hub_url'", containsString("https://api.github.com/hub"))
                .body("'issue_search_url'", containsString("https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}"))
                .body("'issues_url'", containsString("https://api.github.com/issues"))
                .body("'keys_url'", containsString("https://api.github.com/user/keys"))
                .body("'label_search_url'", containsString("https://api.github.com/search/labels?q={query}&repository_id={repository_id}{&page,per_page}"))
                .body("'notifications_url'", containsString("https://api.github.com/notifications"))
                .body("'organization_url'", containsString("https://api.github.com/orgs/{org}"))
                .body("'organization_repositories_url'", containsString("https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}"))
                .body("'organization_teams_url'", containsString("https://api.github.com/orgs/{org}/teams"))
                .body("'public_gists_url'", containsString("https://api.github.com/gists/public"))
                .body("'rate_limit_url'", containsString("https://api.github.com/rate_limit"))
                .body("'repository_url'", containsString("https://api.github.com/repos/{owner}/{repo}"))
                .body("'repository_search_url'", containsString("https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}"))
                .body("'current_user_repositories_url'", containsString("https://api.github.com/user/repos{?type,page,per_page,sort}"))
                .body("'starred_url'", containsString("https://api.github.com/user/starred{/owner}{/repo}"))
                .body("'starred_gists_url'", containsString("https://api.github.com/gists/starred"))
                .body("'topic_search_url'", containsString("https://api.github.com/search/topics?q={query}{&page,per_page}"))
                .body("'user_url'", containsString("https://api.github.com/users/{user}"))
                .body("'user_organizations_url'", containsString("https://api.github.com/user/orgs"))
                .body("'user_repositories_url'", containsString("https://api.github.com/users/{user}/repos{?type,page,per_page,sort}"))
                .body("'user_search_url'", containsString("https://api.github.com/search/users?q={query}{&page,per_page,sort,order}"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/odrLQ/migrations/8UdVEza1oN/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/tT7IOi2hc/RNgAH5nPYqea/collaborators/xuO12_P")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"HFkPWGRYVjTl\", " + 
                    " \"runners\": [ " + 
                    " 443 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/kfR1dek/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/lXHL9G2/H1DrlBm/traffic/popular/referrers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/BPdCb/Yk7a7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Body should be a JSON object"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/repos/repos#update-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 404, 422).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/zC1qRGOqoQMFI/GZEBu4W6HiGY/branches/wJjqn/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/memberships/orgs?" + 
                    "state=pending&" + 
                    "per_page=575")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/scim/v2/enterprises/3K0EqEqRdOJ4t8X/Groups")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("This Enterprise account does not support membership provisioning."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/etXP")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409, 415, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/347/discussions/OwB94W/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/9mKTsZgcr6T/ElWUI/pulls/comments/QEKCtuLwr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/starred?sort=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'node_id'", containsString("R_kgDOGFy_-Q"))
                .body("[0].'name'", containsString("golang-interview"))
                .body("[0].'full_name'", containsString("iswbm/golang-interview"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("iswbm"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjIyMzExNDE5"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/22311419?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/iswbm"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/iswbm"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/iswbm/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/iswbm/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/iswbm/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/iswbm/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/iswbm/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/iswbm/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/iswbm/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/iswbm/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/iswbm/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'description'", containsString("Go语言面试题集"))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/iswbm/golang-interview"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/deployments"))
                .body("[0].'created_at'", containsString("2021-09-21T07:47:39Z"))
                .body("[0].'updated_at'", containsString("2023-04-06T08:36:21Z"))
                .body("[0].'pushed_at'", containsString("2022-03-15T11:50:16Z"))
                .body("[0].'git_url'", containsString("git://github.com/iswbm/golang-interview.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:iswbm/golang-interview.git"))
                .body("[0].'clone_url'", containsString("https://github.com/iswbm/golang-interview.git"))
                .body("[0].'svn_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1282.0))
                .body("[0].'stargazers_count'", numberMatches(171.0))
                .body("[0].'watchers_count'", numberMatches(171.0))
                .body("[0].'language'", containsString("Python"))
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(true))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(48.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(4.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("public"))
                .body("[0].'forks'", numberMatches(48.0))
                .body("[0].'open_issues'", numberMatches(4.0))
                .body("[0].'watchers'", numberMatches(171.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(false))
                .body("[0].'permissions'.'maintain'", equalTo(false))
                .body("[0].'permissions'.'push'", equalTo(false))
                .body("[0].'permissions'.'triage'", equalTo(false))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIXlNqw"))
                .body("[1].'name'", containsString("scalpel"))
                .body("[1].'full_name'", containsString("StarCrossPortal/scalpel"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("StarCrossPortal"))
                .body("[1].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjgyMDg0NTA4"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/82084508?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/StarCrossPortal"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/StarCrossPortal"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/StarCrossPortal/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/StarCrossPortal/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/StarCrossPortal/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/StarCrossPortal/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/StarCrossPortal/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/StarCrossPortal/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/StarCrossPortal/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/StarCrossPortal/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/StarCrossPortal/received_events"))
                .body("[1].'owner'.'type'", containsString("Organization"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'description'", containsString("scalpel是一款命令行漏洞扫描工具，支持深度参数注入，拥有一个强大的数据解析和变异算法，可以将常见的数据格式（json, xml, form等）解析为树结构，然后根据poc中的规则，对树进行变异，包括对叶子节点和树结构 的变异。变异完成之后，将树结构还原为原始的数据格式。 原理：https://mp.weixin.qq.com/s/U_llBwC05vb84U9wb8NZog"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/deployments"))
                .body("[1].'created_at'", containsString("2022-11-04T03:19:29Z"))
                .body("[1].'updated_at'", containsString("2023-04-03T10:44:24Z"))
                .body("[1].'pushed_at'", containsString("2023-02-28T06:35:01Z"))
                .body("[1].'git_url'", containsString("git://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:StarCrossPortal/scalpel.git"))
                .body("[1].'clone_url'", containsString("https://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'svn_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'homepage'", containsString(""))
                .body("[1].'size'", numberMatches(2948.0))
                .body("[1].'stargazers_count'", numberMatches(616.0))
                .body("[1].'watchers_count'", numberMatches(616.0))
                .body("[1].'language'", nullValue())
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(72.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(12.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(7))
                .body("[1].'topics'", hasItems("cve", "exploits", "fuzzing", "poc", "scanner", "vulnerabilities", "vulnerability"))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(72.0))
                .body("[1].'open_issues'", numberMatches(12.0))
                .body("[1].'watchers'", numberMatches(616.0))
                .body("[1].'default_branch'", containsString("master"))
                .body("[1].'permissions'.'admin'", equalTo(false))
                .body("[1].'permissions'.'maintain'", equalTo(false))
                .body("[1].'permissions'.'push'", equalTo(false))
                .body("[1].'permissions'.'triage'", equalTo(false))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOGlB2bg"))
                .body("[2].'name'", containsString("RestTestGen"))
                .body("[2].'full_name'", containsString("SeUniVr/RestTestGen"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("SeUniVr"))
                .body("[2].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjc1MDI3NzY0"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/75027764?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/SeUniVr"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/SeUniVr"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/SeUniVr/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/SeUniVr/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/SeUniVr/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/SeUniVr/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/SeUniVr/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/SeUniVr/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/SeUniVr/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/SeUniVr/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/SeUniVr/received_events"))
                .body("[2].'owner'.'type'", containsString("Organization"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'description'", containsString("A framework for automated black-box testing of RESTful APIs."))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/deployments"))
                .body("[2].'created_at'", containsString("2021-12-24T14:04:59Z"))
                .body("[2].'updated_at'", containsString("2023-03-26T04:11:59Z"))
                .body("[2].'pushed_at'", containsString("2023-02-20T10:05:14Z"))
                .body("[2].'git_url'", containsString("git://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:SeUniVr/RestTestGen.git"))
                .body("[2].'clone_url'", containsString("https://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'svn_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'homepage'", containsString(""))
                .body("[2].'size'", numberMatches(10313.0))
                .body("[2].'stargazers_count'", numberMatches(10.0))
                .body("[2].'watchers_count'", numberMatches(10.0))
                .body("[2].'language'", containsString("Java"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(true))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(1.0))
                .body("[2].'license'.'key'", containsString("apache-2.0"))
                .body("[2].'license'.'name'", containsString("Apache License 2.0"))
                .body("[2].'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[2].'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[2].'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("public"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(1.0))
                .body("[2].'watchers'", numberMatches(10.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(false))
                .body("[2].'permissions'.'maintain'", equalTo(false))
                .body("[2].'permissions'.'push'", equalTo(false))
                .body("[2].'permissions'.'triage'", equalTo(false))
                .body("[2].'permissions'.'pull'", equalTo(true))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(5)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(6)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(7)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(8)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(9)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(10)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(11)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(12)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(13)).keySet().containsAll(Arrays.asList("starred_at", "repo")));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/4yuzOWSckTR/Lm9/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/193/discussions/optewcdP5UYt4/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/RetWTgRH_dzBqa/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/zjgIcK_6btzK9/IXg/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/teams/203/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/0waJrL51WUH85Z/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/03mUEc0Y9rfz/TpuySqkqP/issues/7WI/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#lock-an-issue"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/VsPOr/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/Tp77/actions/runner-groups/DToc7uCt/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/Yf/received_events/public")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'type'", containsString("DeleteEvent"))
                .body("[0].'actor'.'login'", containsString("dependabot[bot]"))
                .body("[0].'actor'.'display_login'", containsString("dependabot"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/dependabot[bot]"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49699333?"))
                .body("[0].'repo'.'name'", containsString("davidsandberg/facenet"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[0].'payload'.'ref'", containsString("dependabot/pip/tensorflow-2.9.3"))
                .body("[0].'payload'.'ref_type'", containsString("branch"))
                .body("[0].'payload'.'pusher_type'", containsString("user"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-03-25T00:05:46Z"))
                .body("[1].'type'", containsString("PullRequestEvent"))
                .body("[1].'actor'.'login'", containsString("dependabot[bot]"))
                .body("[1].'actor'.'display_login'", containsString("dependabot"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/dependabot[bot]"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49699333?"))
                .body("[1].'repo'.'name'", containsString("davidsandberg/facenet"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[1].'payload'.'action'", containsString("closed"))
                .body("[1].'payload'.'number'", numberMatches(1230.0))
                .body("[1].'payload'.'pull_request'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230"))
                .body("[1].'payload'.'pull_request'.'node_id'", containsString("PR_kwDOAxOo985DZRYU"))
                .body("[1].'payload'.'pull_request'.'html_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230"))
                .body("[1].'payload'.'pull_request'.'diff_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230.diff"))
                .body("[1].'payload'.'pull_request'.'patch_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230.patch"))
                .body("[1].'payload'.'pull_request'.'issue_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230"))
                .body("[1].'payload'.'pull_request'.'number'", numberMatches(1230.0))
                .body("[1].'payload'.'pull_request'.'state'", containsString("closed"))
                .body("[1].'payload'.'pull_request'.'locked'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'title'", containsString("Bump tensorflow from 1.7 to 2.9.3"))
                .body("[1].'payload'.'pull_request'.'user'.'login'", containsString("dependabot[bot]"))
                .body("[1].'payload'.'pull_request'.'user'.'node_id'", containsString("MDM6Qm90NDk2OTkzMzM="))
                .body("[1].'payload'.'pull_request'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/29110?v=4"))
                .body("[1].'payload'.'pull_request'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'pull_request'.'user'.'url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D"))
                .body("[1].'payload'.'pull_request'.'user'.'html_url'", containsString("https://github.com/apps/dependabot"))
                .body("[1].'payload'.'pull_request'.'user'.'followers_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/followers"))
                .body("[1].'payload'.'pull_request'.'user'.'following_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}"))
                .body("[1].'payload'.'pull_request'.'user'.'gists_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}"))
                .body("[1].'payload'.'pull_request'.'user'.'starred_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[1].'payload'.'pull_request'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/subscriptions"))
                .body("[1].'payload'.'pull_request'.'user'.'organizations_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/orgs"))
                .body("[1].'payload'.'pull_request'.'user'.'repos_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/repos"))
                .body("[1].'payload'.'pull_request'.'user'.'events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}"))
                .body("[1].'payload'.'pull_request'.'user'.'received_events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/received_events"))
                .body("[1].'payload'.'pull_request'.'user'.'type'", containsString("Bot"))
                .body("[1].'payload'.'pull_request'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'body'", containsString("Bumps [tensorflow](https://github.com/tensorflow/tensorflow) from 1.7 to 2.9.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/tensorflow/tensorflow/releases\">tensorflow's releases</a>.</em></p>\n<blockquote>\n<h2>TensorFlow 2.9.3</h2>\n<h1>Release 2.9.3</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes an overflow in <code>tf.keras.losses.poisson</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887\">CVE-2022-41887</a>)</li>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalAvgPool</code> and <code>FractionalMaxPool</code>(<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900\">CVE-2022-41900</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> in <code>SparseMatrixNNZ</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901\">CVE-2022-41901</a>)</li>\n<li>Fixes an OOB write in grappler (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902\">CVE-2022-41902</a>)</li>\n<li>Fixes a overflow in <code>ResizeNearestNeighborGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907\">CVE-2022-41907</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>PyFunc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908\">CVE-2022-41908</a>)</li>\n<li>Fixes a segfault in <code>CompositeTensorVariantToComponents</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909\">CVE-2022-41909</a>)</li>\n<li>Fixes a invalid char to bool conversion in printing a tensor (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911\">CVE-2022-41911</a>)</li>\n<li>Fixes a heap overflow in <code>QuantizeAndDequantizeV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910\">CVE-2022-41910</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> via missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>TensorListScatter</code> and <code>TensorListScatterV2</code> in eager mode (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n</ul>\n<h2>TensorFlow 2.9.2</h2>\n<h1>Release 2.9.2</h1>\n<p>This releases introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes a <code>CHECK</code> failure in tf.reshape caused by overflows (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934\">CVE-2022-35934</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes an OOB read in <code>Gather_nd</code> op in TF Lite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937\">CVE-2022-35937</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>TensorListReserve</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960\">CVE-2022-35960</a>)</li>\n<li>Fixes an OOB write in <code>Scatter_nd</code> op in TF Lite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939\">CVE-2022-35939</a>)</li>\n<li>Fixes an integer overflow in <code>RaggedRangeOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940\">CVE-2022-35940</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>AvgPoolOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941\">CVE-2022-35941</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>UnbatchGradOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952\">CVE-2022-35952</a>)</li>\n<li>Fixes a segfault TFLite converter on per-channel quantized transposed convolutions (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027\">CVE-2022-36027</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>AvgPool3DGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959\">CVE-2022-35959</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>FractionalAvgPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963\">CVE-2022-35963</a>)</li>\n<li>Fixes a segfault in <code>BlockLSTMGradV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964\">CVE-2022-35964</a>)</li>\n<li>Fixes a segfault in <code>LowerBound</code> and <code>UpperBound</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965\">CVE-2022-35965</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md\">tensorflow's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 2.9.3</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes an overflow in <code>tf.keras.losses.poisson</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887\">CVE-2022-41887</a>)</li>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalAvgPool</code> and <code>FractionalMaxPool</code>(<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900\">CVE-2022-41900</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> in <code>SparseMatrixNNZ</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901\">CVE-2022-41901</a>)</li>\n<li>Fixes an OOB write in grappler (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902\">CVE-2022-41902</a>)</li>\n<li>Fixes a overflow in <code>ResizeNearestNeighborGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907\">CVE-2022-41907</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>PyFunc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908\">CVE-2022-41908</a>)</li>\n<li>Fixes a segfault in <code>CompositeTensorVariantToComponents</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909\">CVE-2022-41909</a>)</li>\n<li>Fixes a invalid char to bool conversion in printing a tensor (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911\">CVE-2022-41911</a>)</li>\n<li>Fixes a heap overflow in <code>QuantizeAndDequantizeV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910\">CVE-2022-41910</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> via missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>TensorListScatter</code> and <code>TensorListScatterV2</code> in eager mode (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n</ul>\n<h1>Release 2.8.4</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/a5ed5f39b675a1c6f315e0caf3ad4b38478fa571\"><code>a5ed5f3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58584\">#58584</a> from tensorflow/vinila21-patch-2</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/258f9a1251346d93e129c53f82d21732df6067f5\"><code>258f9a1</code></a> Update py_func.cc</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/cd27cfb438b78a019ff8a215a9d6c58d10c062c3\"><code>cd27cfb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58580\">#58580</a> from tensorflow-jenkins/version-numbers-2.9.3-24474</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/3e75385ee6c9ef8f06d6848244e1421c603dd4a1\"><code>3e75385</code></a> Update version numbers to 2.9.3</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/bc72c39774b0a0cb38ed03e5ee09fa78103ed749\"><code>bc72c39</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58482\">#58482</a> from tensorflow-jenkins/relnotes-2.9.3-25695</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/3506c90f5ac0f471a6b1d60d4055b14ca3da170b\"><code>3506c90</code></a> Update RELEASE.md</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/8dcb48e384cd3914458f3c494f1da878ae8dc6d5\"><code>8dcb48e</code></a> Update RELEASE.md</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/4f34ec84994e63cf47c1d13748a404edd3d5a0d3\"><code>4f34ec8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58576\">#58576</a> from pak-laura/c2.99f03a9d3bafe902c1e6beb105b2f2417...</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/6fc67e408f239384d26acabc34d287911af92dc8\"><code>6fc67e4</code></a> Replace CHECK with returning an InternalError on failing to create python tuple</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/5dbe90ad21068007cbc31a56e8ed514ec27e0b26\"><code>5dbe90a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58570\">#58570</a> from tensorflow/r2.9-7b174a0f2e4</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tensorflow/tensorflow/compare/v1.7.0...v2.9.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tensorflow&package-manager=pip&previous-version=1.7&new-version=2.9.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/davidsandberg/facenet/network/alerts).\n\n</details>"))
                .body("[1].'payload'.'pull_request'.'created_at'", containsString("2022-11-21T22:20:15Z"))
                .body("[1].'payload'.'pull_request'.'updated_at'", containsString("2023-03-25T00:05:43Z"))
                .body("[1].'payload'.'pull_request'.'closed_at'", containsString("2023-03-25T00:05:43Z"))
                .body("[1].'payload'.'pull_request'.'merged_at'", nullValue())
                .body("[1].'payload'.'pull_request'.'merge_commit_sha'", containsString("9a7cde4596bd4e9c65a5cfee1481e40beca9dd4b"))
                .body("[1].'payload'.'pull_request'.'assignee'", nullValue())
                .body("[1].'payload'.'pull_request'.'assignees'.size()", equalTo(0))
                .body("[1].'payload'.'pull_request'.'requested_reviewers'.size()", equalTo(0))
                .body("[1].'payload'.'pull_request'.'requested_teams'.size()", equalTo(0))
                .body("[1].'payload'.'pull_request'.'labels'.size()", equalTo(1))
                .body("[1].'payload'.'pull_request'.'labels'[0].'node_id'", containsString("MDU6TGFiZWwxNjQ1ODY4ODk5"))
                .body("[1].'payload'.'pull_request'.'labels'[0].'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/labels/dependencies"))
                .body("[1].'payload'.'pull_request'.'labels'[0].'name'", containsString("dependencies"))
                .body("[1].'payload'.'pull_request'.'labels'[0].'color'", containsString("0366d6"))
                .body("[1].'payload'.'pull_request'.'labels'[0].'default'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'labels'[0].'description'", containsString("Pull requests that update a dependency file"))
                .body("[1].'payload'.'pull_request'.'milestone'", nullValue())
                .body("[1].'payload'.'pull_request'.'draft'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'commits_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230/commits"))
                .body("[1].'payload'.'pull_request'.'review_comments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230/comments"))
                .body("[1].'payload'.'pull_request'.'review_comment_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'comments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/comments"))
                .body("[1].'payload'.'pull_request'.'statuses_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/statuses/e0f08d6304f41ac95632887ad4780b81aaac6548"))
                .body("[1].'payload'.'pull_request'.'head'.'label'", containsString("davidsandberg:dependabot/pip/tensorflow-2.9.3"))
                .body("[1].'payload'.'pull_request'.'head'.'ref'", containsString("dependabot/pip/tensorflow-2.9.3"))
                .body("[1].'payload'.'pull_request'.'head'.'sha'", containsString("e0f08d6304f41ac95632887ad4780b81aaac6548"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'login'", containsString("davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'node_id'", containsString("MDQ6VXNlcjE1MTY5MDU4"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/15169058?v=4"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'url'", containsString("https://api.github.com/users/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'html_url'", containsString("https://github.com/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'followers_url'", containsString("https://api.github.com/users/davidsandberg/followers"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'following_url'", containsString("https://api.github.com/users/davidsandberg/following{/other_user}"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'gists_url'", containsString("https://api.github.com/users/davidsandberg/gists{/gist_id}"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'starred_url'", containsString("https://api.github.com/users/davidsandberg/starred{/owner}{/repo}"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/davidsandberg/subscriptions"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'organizations_url'", containsString("https://api.github.com/users/davidsandberg/orgs"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'repos_url'", containsString("https://api.github.com/users/davidsandberg/repos"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'events_url'", containsString("https://api.github.com/users/davidsandberg/events{/privacy}"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'received_events_url'", containsString("https://api.github.com/users/davidsandberg/received_events"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'pull_request'.'head'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnk1MTYyMDA4Nw=="))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'name'", containsString("facenet"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'full_name'", containsString("davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'private'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'login'", containsString("davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'node_id'", containsString("MDQ6VXNlcjE1MTY5MDU4"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/15169058?v=4"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'url'", containsString("https://api.github.com/users/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'html_url'", containsString("https://github.com/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'followers_url'", containsString("https://api.github.com/users/davidsandberg/followers"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'following_url'", containsString("https://api.github.com/users/davidsandberg/following{/other_user}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'gists_url'", containsString("https://api.github.com/users/davidsandberg/gists{/gist_id}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'starred_url'", containsString("https://api.github.com/users/davidsandberg/starred{/owner}{/repo}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/davidsandberg/subscriptions"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'organizations_url'", containsString("https://api.github.com/users/davidsandberg/orgs"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'repos_url'", containsString("https://api.github.com/users/davidsandberg/repos"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'events_url'", containsString("https://api.github.com/users/davidsandberg/events{/privacy}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'received_events_url'", containsString("https://api.github.com/users/davidsandberg/received_events"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'type'", containsString("User"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'owner'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'html_url'", containsString("https://github.com/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'description'", containsString("Face recognition using Tensorflow"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'fork'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'forks_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/forks"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'keys_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/keys{/key_id}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'collaborators_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/collaborators{/collaborator}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'teams_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/teams"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'hooks_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/hooks"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'issue_events_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/events{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'events_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/events"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'assignees_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/assignees{/user}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'branches_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/branches{/branch}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'tags_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/tags"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'blobs_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/blobs{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'git_tags_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/tags{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'git_refs_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/refs{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'trees_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/trees{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'statuses_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/statuses/{sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'languages_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/languages"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'stargazers_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/stargazers"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'contributors_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/contributors"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'subscribers_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/subscribers"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'subscription_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/subscription"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'commits_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/commits{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'git_commits_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/commits{/sha}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'comments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'issue_comment_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'contents_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/contents/{+path}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'compare_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/compare/{base}...{head}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'merges_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/merges"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'archive_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/{archive_format}{/ref}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'downloads_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/downloads"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'issues_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'pulls_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'milestones_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/milestones{/number}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'notifications_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/notifications{?since,all,participating}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'labels_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/labels{/name}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'releases_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/releases{/id}"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'deployments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/deployments"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'created_at'", containsString("2016-02-12T22:14:40Z"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'updated_at'", containsString("2023-03-24T14:01:44Z"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'pushed_at'", containsString("2023-03-25T00:05:38Z"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'git_url'", containsString("git://github.com/davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'ssh_url'", containsString("git@github.com:davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'clone_url'", containsString("https://github.com/davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'svn_url'", containsString("https://github.com/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'homepage'", containsString(""))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'size'", numberMatches(2991.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'stargazers_count'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'watchers_count'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'language'", containsString("Python"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_issues'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_projects'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_downloads'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_wiki'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_pages'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'has_discussions'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'forks_count'", numberMatches(4793.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'mirror_url'", nullValue())
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'archived'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'disabled'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'open_issues_count'", numberMatches(540.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'license'.'key'", containsString("mit"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'license'.'name'", containsString("MIT License"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'license'.'spdx_id'", containsString("MIT"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'license'.'url'", containsString("https://api.github.com/licenses/mit"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'license'.'node_id'", containsString("MDc6TGljZW5zZTEz"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'allow_forking'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'is_template'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'web_commit_signoff_required'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'topics'.size()", equalTo(7))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'topics'", hasItems("computer-vision", "deep-learning", "face-detection", "face-recognition", "facenet", "mtcnn", "tensorflow"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'visibility'", containsString("public"))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'forks'", numberMatches(4793.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'open_issues'", numberMatches(540.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'watchers'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'head'.'repo'.'default_branch'", containsString("master"))
                .body("[1].'payload'.'pull_request'.'base'.'label'", containsString("davidsandberg:master"))
                .body("[1].'payload'.'pull_request'.'base'.'ref'", containsString("master"))
                .body("[1].'payload'.'pull_request'.'base'.'sha'", containsString("096ed770f163957c1e56efa7feeb194773920f6e"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'login'", containsString("davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'node_id'", containsString("MDQ6VXNlcjE1MTY5MDU4"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/15169058?v=4"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'url'", containsString("https://api.github.com/users/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'html_url'", containsString("https://github.com/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'followers_url'", containsString("https://api.github.com/users/davidsandberg/followers"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'following_url'", containsString("https://api.github.com/users/davidsandberg/following{/other_user}"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'gists_url'", containsString("https://api.github.com/users/davidsandberg/gists{/gist_id}"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'starred_url'", containsString("https://api.github.com/users/davidsandberg/starred{/owner}{/repo}"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/davidsandberg/subscriptions"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'organizations_url'", containsString("https://api.github.com/users/davidsandberg/orgs"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'repos_url'", containsString("https://api.github.com/users/davidsandberg/repos"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'events_url'", containsString("https://api.github.com/users/davidsandberg/events{/privacy}"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'received_events_url'", containsString("https://api.github.com/users/davidsandberg/received_events"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'pull_request'.'base'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnk1MTYyMDA4Nw=="))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'name'", containsString("facenet"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'full_name'", containsString("davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'private'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'login'", containsString("davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'node_id'", containsString("MDQ6VXNlcjE1MTY5MDU4"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/15169058?v=4"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'url'", containsString("https://api.github.com/users/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'html_url'", containsString("https://github.com/davidsandberg"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'followers_url'", containsString("https://api.github.com/users/davidsandberg/followers"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'following_url'", containsString("https://api.github.com/users/davidsandberg/following{/other_user}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'gists_url'", containsString("https://api.github.com/users/davidsandberg/gists{/gist_id}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'starred_url'", containsString("https://api.github.com/users/davidsandberg/starred{/owner}{/repo}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/davidsandberg/subscriptions"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'organizations_url'", containsString("https://api.github.com/users/davidsandberg/orgs"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'repos_url'", containsString("https://api.github.com/users/davidsandberg/repos"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'events_url'", containsString("https://api.github.com/users/davidsandberg/events{/privacy}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'received_events_url'", containsString("https://api.github.com/users/davidsandberg/received_events"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'type'", containsString("User"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'owner'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'html_url'", containsString("https://github.com/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'description'", containsString("Face recognition using Tensorflow"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'fork'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'forks_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/forks"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'keys_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/keys{/key_id}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'collaborators_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/collaborators{/collaborator}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'teams_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/teams"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'hooks_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/hooks"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'issue_events_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/events{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'events_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/events"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'assignees_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/assignees{/user}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'branches_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/branches{/branch}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'tags_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/tags"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'blobs_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/blobs{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'git_tags_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/tags{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'git_refs_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/refs{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'trees_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/trees{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'statuses_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/statuses/{sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'languages_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/languages"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'stargazers_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/stargazers"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'contributors_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/contributors"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'subscribers_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/subscribers"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'subscription_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/subscription"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'commits_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/commits{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'git_commits_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/git/commits{/sha}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'comments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'issue_comment_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'contents_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/contents/{+path}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'compare_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/compare/{base}...{head}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'merges_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/merges"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'archive_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/{archive_format}{/ref}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'downloads_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/downloads"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'issues_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'pulls_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'milestones_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/milestones{/number}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'notifications_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/notifications{?since,all,participating}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'labels_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/labels{/name}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'releases_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/releases{/id}"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'deployments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/deployments"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'created_at'", containsString("2016-02-12T22:14:40Z"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'updated_at'", containsString("2023-03-24T14:01:44Z"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'pushed_at'", containsString("2023-03-25T00:05:38Z"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'git_url'", containsString("git://github.com/davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'ssh_url'", containsString("git@github.com:davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'clone_url'", containsString("https://github.com/davidsandberg/facenet.git"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'svn_url'", containsString("https://github.com/davidsandberg/facenet"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'homepage'", containsString(""))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'size'", numberMatches(2991.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'stargazers_count'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'watchers_count'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'language'", containsString("Python"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_issues'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_projects'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_downloads'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_wiki'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_pages'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'has_discussions'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'forks_count'", numberMatches(4793.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'mirror_url'", nullValue())
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'archived'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'disabled'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'open_issues_count'", numberMatches(540.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'license'.'key'", containsString("mit"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'license'.'name'", containsString("MIT License"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'license'.'spdx_id'", containsString("MIT"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'license'.'url'", containsString("https://api.github.com/licenses/mit"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'license'.'node_id'", containsString("MDc6TGljZW5zZTEz"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'allow_forking'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'is_template'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'web_commit_signoff_required'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'topics'.size()", equalTo(7))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'topics'", hasItems("computer-vision", "deep-learning", "face-detection", "face-recognition", "facenet", "mtcnn", "tensorflow"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'visibility'", containsString("public"))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'forks'", numberMatches(4793.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'open_issues'", numberMatches(540.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'watchers'", numberMatches(12946.0))
                .body("[1].'payload'.'pull_request'.'base'.'repo'.'default_branch'", containsString("master"))
                .body("[1].'payload'.'pull_request'.'_links'.'html'.'href'", containsString("https://github.com/davidsandberg/facenet/pull/1230"))
                .body("[1].'payload'.'pull_request'.'_links'.'issue'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230"))
                .body("[1].'payload'.'pull_request'.'_links'.'comments'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/comments"))
                .body("[1].'payload'.'pull_request'.'_links'.'review_comments'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230/comments"))
                .body("[1].'payload'.'pull_request'.'_links'.'review_comment'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/comments{/number}"))
                .body("[1].'payload'.'pull_request'.'_links'.'commits'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230/commits"))
                .body("[1].'payload'.'pull_request'.'_links'.'statuses'.'href'", containsString("https://api.github.com/repos/davidsandberg/facenet/statuses/e0f08d6304f41ac95632887ad4780b81aaac6548"))
                .body("[1].'payload'.'pull_request'.'author_association'", containsString("NONE"))
                .body("[1].'payload'.'pull_request'.'auto_merge'", nullValue())
                .body("[1].'payload'.'pull_request'.'active_lock_reason'", nullValue())
                .body("[1].'payload'.'pull_request'.'merged'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'mergeable'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'rebaseable'", equalTo(true))
                .body("[1].'payload'.'pull_request'.'mergeable_state'", containsString("clean"))
                .body("[1].'payload'.'pull_request'.'merged_by'", nullValue())
                .body("[1].'payload'.'pull_request'.'comments'", numberMatches(1.0))
                .body("[1].'payload'.'pull_request'.'review_comments'", numberMatches(0.0))
                .body("[1].'payload'.'pull_request'.'maintainer_can_modify'", equalTo(false))
                .body("[1].'payload'.'pull_request'.'commits'", numberMatches(1.0))
                .body("[1].'payload'.'pull_request'.'additions'", numberMatches(1.0))
                .body("[1].'payload'.'pull_request'.'deletions'", numberMatches(1.0))
                .body("[1].'payload'.'pull_request'.'changed_files'", numberMatches(1.0))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-03-25T00:05:43Z"))
                .body("[2].'type'", containsString("IssueCommentEvent"))
                .body("[2].'actor'.'login'", containsString("dependabot[bot]"))
                .body("[2].'actor'.'display_login'", containsString("dependabot"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/dependabot[bot]"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49699333?"))
                .body("[2].'repo'.'name'", containsString("davidsandberg/facenet"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[2].'payload'.'action'", containsString("created"))
                .body("[2].'payload'.'issue'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230"))
                .body("[2].'payload'.'issue'.'repository_url'", containsString("https://api.github.com/repos/davidsandberg/facenet"))
                .body("[2].'payload'.'issue'.'labels_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/labels{/name}"))
                .body("[2].'payload'.'issue'.'comments_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/comments"))
                .body("[2].'payload'.'issue'.'events_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/events"))
                .body("[2].'payload'.'issue'.'html_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230"))
                .body("[2].'payload'.'issue'.'node_id'", containsString("PR_kwDOAxOo985DZRYU"))
                .body("[2].'payload'.'issue'.'number'", numberMatches(1230.0))
                .body("[2].'payload'.'issue'.'title'", containsString("Bump tensorflow from 1.7 to 2.9.3"))
                .body("[2].'payload'.'issue'.'user'.'login'", containsString("dependabot[bot]"))
                .body("[2].'payload'.'issue'.'user'.'node_id'", containsString("MDM6Qm90NDk2OTkzMzM="))
                .body("[2].'payload'.'issue'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/29110?v=4"))
                .body("[2].'payload'.'issue'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'issue'.'user'.'url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D"))
                .body("[2].'payload'.'issue'.'user'.'html_url'", containsString("https://github.com/apps/dependabot"))
                .body("[2].'payload'.'issue'.'user'.'followers_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/followers"))
                .body("[2].'payload'.'issue'.'user'.'following_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}"))
                .body("[2].'payload'.'issue'.'user'.'gists_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}"))
                .body("[2].'payload'.'issue'.'user'.'starred_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[2].'payload'.'issue'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/subscriptions"))
                .body("[2].'payload'.'issue'.'user'.'organizations_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/orgs"))
                .body("[2].'payload'.'issue'.'user'.'repos_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/repos"))
                .body("[2].'payload'.'issue'.'user'.'events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}"))
                .body("[2].'payload'.'issue'.'user'.'received_events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/received_events"))
                .body("[2].'payload'.'issue'.'user'.'type'", containsString("Bot"))
                .body("[2].'payload'.'issue'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'issue'.'labels'.size()", equalTo(1))
                .body("[2].'payload'.'issue'.'labels'[0].'node_id'", containsString("MDU6TGFiZWwxNjQ1ODY4ODk5"))
                .body("[2].'payload'.'issue'.'labels'[0].'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/labels/dependencies"))
                .body("[2].'payload'.'issue'.'labels'[0].'name'", containsString("dependencies"))
                .body("[2].'payload'.'issue'.'labels'[0].'color'", containsString("0366d6"))
                .body("[2].'payload'.'issue'.'labels'[0].'default'", equalTo(false))
                .body("[2].'payload'.'issue'.'labels'[0].'description'", containsString("Pull requests that update a dependency file"))
                .body("[2].'payload'.'issue'.'state'", containsString("open"))
                .body("[2].'payload'.'issue'.'locked'", equalTo(false))
                .body("[2].'payload'.'issue'.'assignee'", nullValue())
                .body("[2].'payload'.'issue'.'assignees'.size()", equalTo(0))
                .body("[2].'payload'.'issue'.'milestone'", nullValue())
                .body("[2].'payload'.'issue'.'comments'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'created_at'", containsString("2022-11-21T22:20:15Z"))
                .body("[2].'payload'.'issue'.'updated_at'", containsString("2023-03-25T00:05:42Z"))
                .body("[2].'payload'.'issue'.'closed_at'", nullValue())
                .body("[2].'payload'.'issue'.'author_association'", containsString("NONE"))
                .body("[2].'payload'.'issue'.'active_lock_reason'", nullValue())
                .body("[2].'payload'.'issue'.'draft'", equalTo(false))
                .body("[2].'payload'.'issue'.'pull_request'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/pulls/1230"))
                .body("[2].'payload'.'issue'.'pull_request'.'html_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230"))
                .body("[2].'payload'.'issue'.'pull_request'.'diff_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230.diff"))
                .body("[2].'payload'.'issue'.'pull_request'.'patch_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230.patch"))
                .body("[2].'payload'.'issue'.'pull_request'.'merged_at'", nullValue())
                .body("[2].'payload'.'issue'.'body'", containsString("Bumps [tensorflow](https://github.com/tensorflow/tensorflow) from 1.7 to 2.9.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/tensorflow/tensorflow/releases\">tensorflow's releases</a>.</em></p>\n<blockquote>\n<h2>TensorFlow 2.9.3</h2>\n<h1>Release 2.9.3</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes an overflow in <code>tf.keras.losses.poisson</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887\">CVE-2022-41887</a>)</li>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalAvgPool</code> and <code>FractionalMaxPool</code>(<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900\">CVE-2022-41900</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> in <code>SparseMatrixNNZ</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901\">CVE-2022-41901</a>)</li>\n<li>Fixes an OOB write in grappler (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902\">CVE-2022-41902</a>)</li>\n<li>Fixes a overflow in <code>ResizeNearestNeighborGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907\">CVE-2022-41907</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>PyFunc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908\">CVE-2022-41908</a>)</li>\n<li>Fixes a segfault in <code>CompositeTensorVariantToComponents</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909\">CVE-2022-41909</a>)</li>\n<li>Fixes a invalid char to bool conversion in printing a tensor (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911\">CVE-2022-41911</a>)</li>\n<li>Fixes a heap overflow in <code>QuantizeAndDequantizeV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910\">CVE-2022-41910</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> via missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>TensorListScatter</code> and <code>TensorListScatterV2</code> in eager mode (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n</ul>\n<h2>TensorFlow 2.9.2</h2>\n<h1>Release 2.9.2</h1>\n<p>This releases introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes a <code>CHECK</code> failure in tf.reshape caused by overflows (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934\">CVE-2022-35934</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes an OOB read in <code>Gather_nd</code> op in TF Lite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937\">CVE-2022-35937</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>TensorListReserve</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960\">CVE-2022-35960</a>)</li>\n<li>Fixes an OOB write in <code>Scatter_nd</code> op in TF Lite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939\">CVE-2022-35939</a>)</li>\n<li>Fixes an integer overflow in <code>RaggedRangeOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940\">CVE-2022-35940</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>AvgPoolOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941\">CVE-2022-35941</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>UnbatchGradOp</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952\">CVE-2022-35952</a>)</li>\n<li>Fixes a segfault TFLite converter on per-channel quantized transposed convolutions (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027\">CVE-2022-36027</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>AvgPool3DGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959\">CVE-2022-35959</a>)</li>\n<li>Fixes a <code>CHECK</code> failures in <code>FractionalAvgPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963\">CVE-2022-35963</a>)</li>\n<li>Fixes a segfault in <code>BlockLSTMGradV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964\">CVE-2022-35964</a>)</li>\n<li>Fixes a segfault in <code>LowerBound</code> and <code>UpperBound</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965\">CVE-2022-35965</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md\">tensorflow's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 2.9.3</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes an overflow in <code>tf.keras.losses.poisson</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887\">CVE-2022-41887</a>)</li>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalAvgPool</code> and <code>FractionalMaxPool</code>(<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900\">CVE-2022-41900</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> in <code>SparseMatrixNNZ</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901\">CVE-2022-41901</a>)</li>\n<li>Fixes an OOB write in grappler (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902\">CVE-2022-41902</a>)</li>\n<li>Fixes a overflow in <code>ResizeNearestNeighborGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907\">CVE-2022-41907</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>PyFunc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908\">CVE-2022-41908</a>)</li>\n<li>Fixes a segfault in <code>CompositeTensorVariantToComponents</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909\">CVE-2022-41909</a>)</li>\n<li>Fixes a invalid char to bool conversion in printing a tensor (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911\">CVE-2022-41911</a>)</li>\n<li>Fixes a heap overflow in <code>QuantizeAndDequantizeV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910\">CVE-2022-41910</a>)</li>\n<li>Fixes a <code>CHECK</code> failure in <code>SobolSample</code> via missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>TensorListScatter</code> and <code>TensorListScatterV2</code> in eager mode (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935\">CVE-2022-35935</a>)</li>\n</ul>\n<h1>Release 2.8.4</h1>\n<p>This release introduces several vulnerability fixes:</p>\n<ul>\n<li>Fixes a heap OOB failure in <code>ThreadUnsafeUnigramCandidateSampler</code> caused by missing validation (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880\">CVE-2022-41880</a>)</li>\n<li>Fixes a segfault in <code>ndarray_tensor_bridge</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884\">CVE-2022-41884</a>)</li>\n<li>Fixes an overflow in <code>FusedResizeAndPadConv2D</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885\">CVE-2022-41885</a>)</li>\n<li>Fixes a overflow in <code>ImageProjectiveTransformV2</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886\">CVE-2022-41886</a>)</li>\n<li>Fixes an FPE in <code>tf.image.generate_bounding_box_proposals</code> on GPU (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888\">CVE-2022-41888</a>)</li>\n<li>Fixes a segfault in <code>pywrap_tfe_src</code> caused by invalid attributes (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889\">CVE-2022-41889</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>BCast</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890\">CVE-2022-41890</a>)</li>\n<li>Fixes a segfault in <code>TensorListConcat</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891\">CVE-2022-41891</a>)</li>\n<li>Fixes a <code>CHECK_EQ</code> fail in <code>TensorListResize</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893\">CVE-2022-41893</a>)</li>\n<li>Fixes an overflow in <code>CONV_3D_TRANSPOSE</code> on TFLite (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894\">CVE-2022-41894</a>)</li>\n<li>Fixes a heap OOB in <code>MirrorPadGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895\">CVE-2022-41895</a>)</li>\n<li>Fixes a crash in <code>Mfcc</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896\">CVE-2022-41896</a>)</li>\n<li>Fixes a heap OOB in <code>FractionalMaxPoolGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897\">CVE-2022-41897</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SparseFillEmptyRowsGrad</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898\">CVE-2022-41898</a>)</li>\n<li>Fixes a <code>CHECK</code> fail in <code>SdcaOptimizer</code> (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899\">CVE-2022-41899</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/a5ed5f39b675a1c6f315e0caf3ad4b38478fa571\"><code>a5ed5f3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58584\">#58584</a> from tensorflow/vinila21-patch-2</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/258f9a1251346d93e129c53f82d21732df6067f5\"><code>258f9a1</code></a> Update py_func.cc</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/cd27cfb438b78a019ff8a215a9d6c58d10c062c3\"><code>cd27cfb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58580\">#58580</a> from tensorflow-jenkins/version-numbers-2.9.3-24474</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/3e75385ee6c9ef8f06d6848244e1421c603dd4a1\"><code>3e75385</code></a> Update version numbers to 2.9.3</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/bc72c39774b0a0cb38ed03e5ee09fa78103ed749\"><code>bc72c39</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58482\">#58482</a> from tensorflow-jenkins/relnotes-2.9.3-25695</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/3506c90f5ac0f471a6b1d60d4055b14ca3da170b\"><code>3506c90</code></a> Update RELEASE.md</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/8dcb48e384cd3914458f3c494f1da878ae8dc6d5\"><code>8dcb48e</code></a> Update RELEASE.md</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/4f34ec84994e63cf47c1d13748a404edd3d5a0d3\"><code>4f34ec8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58576\">#58576</a> from pak-laura/c2.99f03a9d3bafe902c1e6beb105b2f2417...</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/6fc67e408f239384d26acabc34d287911af92dc8\"><code>6fc67e4</code></a> Replace CHECK with returning an InternalError on failing to create python tuple</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/5dbe90ad21068007cbc31a56e8ed514ec27e0b26\"><code>5dbe90a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tensorflow/tensorflow/issues/58570\">#58570</a> from tensorflow/r2.9-7b174a0f2e4</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tensorflow/tensorflow/compare/v1.7.0...v2.9.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tensorflow&package-manager=pip&previous-version=1.7&new-version=2.9.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/davidsandberg/facenet/network/alerts).\n\n</details>"))
                .body("[2].'payload'.'issue'.'reactions'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/reactions"))
                .body("[2].'payload'.'issue'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'+1'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'-1'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'confused'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'heart'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[2].'payload'.'issue'.'timeline_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230/timeline"))
                .body("[2].'payload'.'issue'.'performed_via_github_app'", nullValue())
                .body("[2].'payload'.'issue'.'state_reason'", nullValue())
                .body("[2].'payload'.'comment'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/comments/1483613278"))
                .body("[2].'payload'.'comment'.'html_url'", containsString("https://github.com/davidsandberg/facenet/pull/1230#issuecomment-1483613278"))
                .body("[2].'payload'.'comment'.'issue_url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/1230"))
                .body("[2].'payload'.'comment'.'node_id'", containsString("IC_kwDOAxOo985YbiRe"))
                .body("[2].'payload'.'comment'.'user'.'login'", containsString("dependabot[bot]"))
                .body("[2].'payload'.'comment'.'user'.'node_id'", containsString("MDM6Qm90NDk2OTkzMzM="))
                .body("[2].'payload'.'comment'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/29110?v=4"))
                .body("[2].'payload'.'comment'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'comment'.'user'.'url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D"))
                .body("[2].'payload'.'comment'.'user'.'html_url'", containsString("https://github.com/apps/dependabot"))
                .body("[2].'payload'.'comment'.'user'.'followers_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/followers"))
                .body("[2].'payload'.'comment'.'user'.'following_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}"))
                .body("[2].'payload'.'comment'.'user'.'gists_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}"))
                .body("[2].'payload'.'comment'.'user'.'starred_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[2].'payload'.'comment'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/subscriptions"))
                .body("[2].'payload'.'comment'.'user'.'organizations_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/orgs"))
                .body("[2].'payload'.'comment'.'user'.'repos_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/repos"))
                .body("[2].'payload'.'comment'.'user'.'events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}"))
                .body("[2].'payload'.'comment'.'user'.'received_events_url'", containsString("https://api.github.com/users/dependabot%5Bbot%5D/received_events"))
                .body("[2].'payload'.'comment'.'user'.'type'", containsString("Bot"))
                .body("[2].'payload'.'comment'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'comment'.'created_at'", containsString("2023-03-25T00:05:42Z"))
                .body("[2].'payload'.'comment'.'updated_at'", containsString("2023-03-25T00:05:42Z"))
                .body("[2].'payload'.'comment'.'author_association'", containsString("NONE"))
                .body("[2].'payload'.'comment'.'body'", containsString("Superseded by #1236."))
                .body("[2].'payload'.'comment'.'reactions'.'url'", containsString("https://api.github.com/repos/davidsandberg/facenet/issues/comments/1483613278/reactions"))
                .body("[2].'payload'.'comment'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'+1'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'-1'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'confused'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'heart'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[2].'payload'.'comment'.'performed_via_github_app'", nullValue())
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-03-25T00:05:42Z"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/AdWuvFJ6d0t42/g8BQ/actions/workflows/RpnNSGs/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Jq1p/M9pK/actions/artifacts/S8XIcnSHPCRB/cGvaLmoB4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/teams/720")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#update-a-team-legacy"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/notifications/threads/570/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#delete-a-thread-subscription"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/codes_of_conduct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'key'", containsString("contributor_covenant"))
                .body("[0].'name'", containsString("Contributor Covenant"))
                .body("[0].'html_url'", nullValue())
                .body("[0].'url'", containsString("https://api.github.com/codes_of_conduct/contributor_covenant"))
                .body("[1].'key'", containsString("citizen_code_of_conduct"))
                .body("[1].'name'", containsString("Citizen Code Of Conduct"))
                .body("[1].'html_url'", nullValue())
                .body("[1].'url'", containsString("https://api.github.com/codes_of_conduct/citizen_code_of_conduct"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/FgUBuWYkmKXc/8lXKoB/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/9IRvt1h7z6ZA/1AEgNnr/branches/zCBxS/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BLoD0kduNF/zE65uda6DxN2/actions/runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Vwlw8E_f0c/ReV2oAIPg/actions/runs/p25N8q6EHG4j/approvals")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dCX6pi0H5p6/H/commits?" + 
                    "sha=qOXIo4&" + 
                    "until=_6NXt_UAFnj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-commits"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"tag_name\": \"rCLIFEH7quDQzB\", " + 
                    " \"target_commitish\": \"bNdUgB0hKjK\", " + 
                    " \"draft\": true, " + 
                    " \"prerelease\": true " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/LPoopD2/QC6B/releases/6mnCnA3atomR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/repos/fsMMkXUfR/rKlVE/issues/1cFEpRMfyj/assignees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/repositories?" + 
                    "q=lcTb0bw0JMp2S_u&" + 
                    "order=asc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/apps/gWgud")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps/#get-an-app"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Wet1lIvP/Wv7HZlKtNH/milestones/zNz1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-milestone"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/2/public_members/t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/JRU9qYKzeurw/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/MsO327/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses?per_page=648")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(13))
                .body("[0].'key'", containsString("agpl-3.0"))
                .body("[0].'name'", containsString("GNU Affero General Public License v3.0"))
                .body("[0].'spdx_id'", containsString("AGPL-3.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/agpl-3.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTE="))
                .body("[1].'key'", containsString("apache-2.0"))
                .body("[1].'name'", containsString("Apache License 2.0"))
                .body("[1].'spdx_id'", containsString("Apache-2.0"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'key'", containsString("bsd-2-clause"))
                .body("[2].'name'", containsString("BSD 2-Clause \"Simplified\" License"))
                .body("[2].'spdx_id'", containsString("BSD-2-Clause"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/bsd-2-clause"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTQ="))
                ; // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Rs_zud4IuREbU0/Q0WftoREtH/branches/w/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ZDAjw/2lvOLob9ww/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_organization_ids\": [ " + 
                    " 476, " + 
                    " 370, " + 
                    " 96 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/JpZJc8pA/actions/runner-groups/MsSEc1y/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"We2Im\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/2BmHcHGDNMNN/zIB7F_/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-a-label"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/blocks/aI5q8IHseR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#unblock-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(13))
                .body("[0].'key'", containsString("agpl-3.0"))
                .body("[0].'name'", containsString("GNU Affero General Public License v3.0"))
                .body("[0].'spdx_id'", containsString("AGPL-3.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/agpl-3.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTE="))
                .body("[1].'key'", containsString("apache-2.0"))
                .body("[1].'name'", containsString("Apache License 2.0"))
                .body("[1].'spdx_id'", containsString("Apache-2.0"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'key'", containsString("bsd-2-clause"))
                .body("[2].'name'", containsString("BSD 2-Clause \"Simplified\" License"))
                .body("[2].'spdx_id'", containsString("BSD-2-Clause"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/bsd-2-clause"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTQ="))
                ; // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_Vfm/MGV/actions/runs/C2bMXG/jobs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/73fKDG/PIxh6K/issues/8wsvpc/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/riTMrviKITS/2XowDx3Q50mgdjX/milestones/Le0e")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/uCQwFnpKpSoRi1/S0BccRTMJAwY/compare/pHizaSF...UMlsvQHJL4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#compare-two-commits"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8j6V8zPs2PIj/ig/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 301, 404).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/p9FvKJXrHDvNUl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"new_name\": \"zeboRVEus7\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/cINLK3cJ0JUno/wk1bj_iFZ/branches/O_aW2S2NpB/rename")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#rename-a-branch"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/9KCY/r6T6wNH9eO/issues/JkkODkv2XqUF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/orgs?per_page=904")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"encrypted_value\": \"KcyumdFwWMNSyU\", " + 
                    " \"key_id\": \"_Jm\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repositories/119/environments/7rMmR/secrets/XtuwIg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/fjTebOM7HyPh/grants/S0mVo5TI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/wR9Eksej8/f06A/issues/eL05GJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/starred?sort=updated")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'node_id'", containsString("MDEwOlJlcG9zaXRvcnkyNTI0NTk4NTQ="))
                .body("[0].'name'", containsString("cats"))
                .body("[0].'full_name'", containsString("Endava/cats"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("Endava"))
                .body("[0].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjE5Mzk2MTQw"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/19396140?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/Endava"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/Endava"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/Endava/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/Endava/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/Endava/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/Endava/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/Endava/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/Endava/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/Endava/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/Endava/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/Endava/received_events"))
                .body("[0].'owner'.'type'", containsString("Organization"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/Endava/cats"))
                .body("[0].'description'", containsString("CATS is a REST API Fuzzer and negative testing tool for OpenAPI endpoints. CATS automatically  generates, runs and reports tests with minimum configuration and no coding effort. Tests are self-healing and do not require maintenance."))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/Endava/cats"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/Endava/cats/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/Endava/cats/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/Endava/cats/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/Endava/cats/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/Endava/cats/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/Endava/cats/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/Endava/cats/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/Endava/cats/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/Endava/cats/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/Endava/cats/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/Endava/cats/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/Endava/cats/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/Endava/cats/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/Endava/cats/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/Endava/cats/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/Endava/cats/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/Endava/cats/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/Endava/cats/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/Endava/cats/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/Endava/cats/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/Endava/cats/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/Endava/cats/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/Endava/cats/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/Endava/cats/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/Endava/cats/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/Endava/cats/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/Endava/cats/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/Endava/cats/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/Endava/cats/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/Endava/cats/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/Endava/cats/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/Endava/cats/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/Endava/cats/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/Endava/cats/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/Endava/cats/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/Endava/cats/deployments"))
                .body("[0].'created_at'", containsString("2020-04-02T13:14:39Z"))
                .body("[0].'updated_at'", containsString("2023-04-05T13:43:48Z"))
                .body("[0].'pushed_at'", containsString("2023-04-06T06:45:48Z"))
                .body("[0].'git_url'", containsString("git://github.com/Endava/cats.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:Endava/cats.git"))
                .body("[0].'clone_url'", containsString("https://github.com/Endava/cats.git"))
                .body("[0].'svn_url'", containsString("https://github.com/Endava/cats"))
                .body("[0].'homepage'", containsString(""))
                .body("[0].'size'", numberMatches(9145.0))
                .body("[0].'stargazers_count'", numberMatches(927.0))
                .body("[0].'watchers_count'", numberMatches(927.0))
                .body("[0].'language'", containsString("Java"))
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(true))
                .body("[0].'has_pages'", equalTo(true))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(61.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(2.0))
                .body("[0].'license'.'key'", containsString("apache-2.0"))
                .body("[0].'license'.'name'", containsString("Apache License 2.0"))
                .body("[0].'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[0].'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[0].'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(8))
                .body("[0].'topics'", hasItems("api", "fuzzer", "java", "openapi", "rest-api", "rest-fuzzer", "swagger", "testing"))
                .body("[0].'visibility'", containsString("public"))
                .body("[0].'forks'", numberMatches(61.0))
                .body("[0].'open_issues'", numberMatches(2.0))
                .body("[0].'watchers'", numberMatches(927.0))
                .body("[0].'default_branch'", containsString("master"))
                .body("[0].'permissions'.'admin'", equalTo(false))
                .body("[0].'permissions'.'maintain'", equalTo(false))
                .body("[0].'permissions'.'push'", equalTo(false))
                .body("[0].'permissions'.'triage'", equalTo(false))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOHlvlEg"))
                .body("[1].'name'", containsString("cf"))
                .body("[1].'full_name'", containsString("teamssix/cf"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("teamssix"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5MDg3NTY0"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49087564?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/teamssix"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/teamssix"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/teamssix/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/teamssix/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/teamssix/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/teamssix/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/teamssix/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/teamssix/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/teamssix/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/teamssix/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/teamssix/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/teamssix/cf"))
                .body("[1].'description'", containsString("Cloud Exploitation Framework 云环境利用框架，方便安全人员在获得 AK 的后续工作"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/teamssix/cf"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/teamssix/cf/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/teamssix/cf/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/teamssix/cf/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/teamssix/cf/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/teamssix/cf/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/teamssix/cf/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/teamssix/cf/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/teamssix/cf/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/teamssix/cf/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/teamssix/cf/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/teamssix/cf/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/teamssix/cf/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/teamssix/cf/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/teamssix/cf/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/teamssix/cf/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/teamssix/cf/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/teamssix/cf/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/teamssix/cf/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/teamssix/cf/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/teamssix/cf/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/teamssix/cf/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/teamssix/cf/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/teamssix/cf/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/teamssix/cf/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/teamssix/cf/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/teamssix/cf/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/teamssix/cf/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/teamssix/cf/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/teamssix/cf/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/teamssix/cf/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/teamssix/cf/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/teamssix/cf/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/teamssix/cf/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/teamssix/cf/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/teamssix/cf/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/teamssix/cf/deployments"))
                .body("[1].'created_at'", containsString("2022-07-01T06:02:57Z"))
                .body("[1].'updated_at'", containsString("2023-04-06T03:20:48Z"))
                .body("[1].'pushed_at'", containsString("2023-04-06T03:45:08Z"))
                .body("[1].'git_url'", containsString("git://github.com/teamssix/cf.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:teamssix/cf.git"))
                .body("[1].'clone_url'", containsString("https://github.com/teamssix/cf.git"))
                .body("[1].'svn_url'", containsString("https://github.com/teamssix/cf"))
                .body("[1].'homepage'", containsString("https://wiki.teamssix.com/cf"))
                .body("[1].'size'", numberMatches(3144.0))
                .body("[1].'stargazers_count'", numberMatches(1666.0))
                .body("[1].'watchers_count'", numberMatches(1666.0))
                .body("[1].'language'", containsString("Go"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(false))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(false))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(true))
                .body("[1].'forks_count'", numberMatches(165.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(5.0))
                .body("[1].'license'.'key'", containsString("apache-2.0"))
                .body("[1].'license'.'name'", containsString("Apache License 2.0"))
                .body("[1].'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[1].'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[1].'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(11))
                .body("[1].'topics'", hasItems("alibabacloud", "aliyun", "aws", "cloud", "cloud-security", "cloudsecurity", "cyber-security", "cybersecurity", "huaweicloud", "redteam", "tencentcloud"))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(165.0))
                .body("[1].'open_issues'", numberMatches(5.0))
                .body("[1].'watchers'", numberMatches(1666.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(false))
                .body("[1].'permissions'.'maintain'", equalTo(false))
                .body("[1].'permissions'.'push'", equalTo(false))
                .body("[1].'permissions'.'triage'", equalTo(false))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("MDEwOlJlcG9zaXRvcnkyODIzMjA3ODc="))
                .body("[2].'name'", containsString("restler-fuzzer"))
                .body("[2].'full_name'", containsString("microsoft/restler-fuzzer"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("microsoft"))
                .body("[2].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjYxNTQ3MjI="))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/6154722?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/microsoft"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/microsoft"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/microsoft/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/microsoft/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/microsoft/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/microsoft/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/microsoft/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/microsoft/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/microsoft/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/microsoft/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/microsoft/received_events"))
                .body("[2].'owner'.'type'", containsString("Organization"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/microsoft/restler-fuzzer"))
                .body("[2].'description'", containsString("RESTler is the first stateful REST API fuzzing tool for automatically testing cloud services through their REST APIs and finding security and reliability bugs in these services."))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/microsoft/restler-fuzzer/deployments"))
                .body("[2].'created_at'", containsString("2020-07-24T21:40:11Z"))
                .body("[2].'updated_at'", containsString("2023-04-06T07:32:33Z"))
                .body("[2].'pushed_at'", containsString("2023-04-05T22:06:55Z"))
                .body("[2].'git_url'", containsString("git://github.com/microsoft/restler-fuzzer.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:microsoft/restler-fuzzer.git"))
                .body("[2].'clone_url'", containsString("https://github.com/microsoft/restler-fuzzer.git"))
                .body("[2].'svn_url'", containsString("https://github.com/microsoft/restler-fuzzer"))
                .body("[2].'homepage'", containsString(""))
                .body("[2].'size'", numberMatches(4467.0))
                .body("[2].'stargazers_count'", numberMatches(2100.0))
                .body("[2].'watchers_count'", numberMatches(2100.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(true))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(233.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(185.0))
                .body("[2].'license'.'key'", containsString("mit"))
                .body("[2].'license'.'name'", containsString("MIT License"))
                .body("[2].'license'.'spdx_id'", containsString("MIT"))
                .body("[2].'license'.'url'", containsString("https://api.github.com/licenses/mit"))
                .body("[2].'license'.'node_id'", containsString("MDc6TGljZW5zZTEz"))
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("public"))
                .body("[2].'forks'", numberMatches(233.0))
                .body("[2].'open_issues'", numberMatches(185.0))
                .body("[2].'watchers'", numberMatches(2100.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(false))
                .body("[2].'permissions'.'maintain'", equalTo(false))
                .body("[2].'permissions'.'push'", equalTo(false))
                .body("[2].'permissions'.'triage'", equalTo(false))
                .body("[2].'permissions'.'pull'", equalTo(true))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(5)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(6)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(7)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(8)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(9)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(10)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(11)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(12)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(13)).keySet().containsAll(Arrays.asList("starred_at", "repo")));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/767/projects/Iv1Jel5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/eYoscRYg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/3_4C/teams/apr3xYmb8bmN/discussions/nD3uSxAfFW8zj/comments/GbCXz7cTkl0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/d0/DQIEFXJTywp/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#get-an-import-status"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/SZO_bD/teams/cUrLC3T/discussions/sj1sve24jMsleXs/comments/u7dK/reactions/zI1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/grants/948")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/vazRsoG3wifE4MYZ/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#unstar-a-gist"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dcTCYgRFEQoDY5QV/P54/stats/contributors")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"limit\": \"existing_users\", " + 
                    " \"expiry\": \"one_month\" " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/Df1AblCtfTBrfU/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", nullValue())
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", nullValue())
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(5.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-03-09T12:33:33Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("*/*")
                .put(baseUrlOfSut + "/orgs/mzJzGJqDuRoJ2gs9/public_members/oDP_YDvafs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/BTaHAeOerxezU2/m0Pu9C/statuses/Ea8T1C22")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/statuses#create-a-commit-status"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/N6A1kJZl/1/secret-scanning/alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events?per_page=224")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'type'", containsString("WatchEvent"))
                .body("[0].'actor'.'login'", containsString("ibenlim"))
                .body("[0].'actor'.'display_login'", containsString("ibenlim"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/ibenlim"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/6949419?"))
                .body("[0].'repo'.'name'", containsString("coolpace/V2EX_Polish"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/coolpace/V2EX_Polish"))
                .body("[0].'payload'.'action'", containsString("started"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:38:28Z"))
                .body("[0].'org'.'login'", containsString("coolpace"))
                .body("[0].'org'.'gravatar_id'", containsString(""))
                .body("[0].'org'.'url'", containsString("https://api.github.com/orgs/coolpace"))
                .body("[0].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/122415019?"))
                .body("[1].'type'", containsString("IssueCommentEvent"))
                .body("[1].'actor'.'login'", containsString("github-actions[bot]"))
                .body("[1].'actor'.'display_login'", containsString("github-actions"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/github-actions[bot]"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/41898282?"))
                .body("[1].'repo'.'name'", containsString("re-taro/ogp.re-taro.dev"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev"))
                .body("[1].'payload'.'action'", containsString("created"))
                .body("[1].'payload'.'issue'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263"))
                .body("[1].'payload'.'issue'.'repository_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev"))
                .body("[1].'payload'.'issue'.'labels_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263/labels{/name}"))
                .body("[1].'payload'.'issue'.'comments_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263/comments"))
                .body("[1].'payload'.'issue'.'events_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263/events"))
                .body("[1].'payload'.'issue'.'html_url'", containsString("https://github.com/re-taro/ogp.re-taro.dev/pull/263"))
                .body("[1].'payload'.'issue'.'node_id'", containsString("PR_kwDOIdzfgs5NwslT"))
                .body("[1].'payload'.'issue'.'number'", numberMatches(263.0))
                .body("[1].'payload'.'issue'.'title'", containsString("fix(deps): update dependency framer-motion to v10.11.2"))
                .body("[1].'payload'.'issue'.'user'.'login'", containsString("renovate[bot]"))
                .body("[1].'payload'.'issue'.'user'.'node_id'", containsString("MDM6Qm90MjkxMzk2MTQ="))
                .body("[1].'payload'.'issue'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/2740?v=4"))
                .body("[1].'payload'.'issue'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'issue'.'user'.'url'", containsString("https://api.github.com/users/renovate%5Bbot%5D"))
                .body("[1].'payload'.'issue'.'user'.'html_url'", containsString("https://github.com/apps/renovate"))
                .body("[1].'payload'.'issue'.'user'.'followers_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/followers"))
                .body("[1].'payload'.'issue'.'user'.'following_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/following{/other_user}"))
                .body("[1].'payload'.'issue'.'user'.'gists_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/gists{/gist_id}"))
                .body("[1].'payload'.'issue'.'user'.'starred_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[1].'payload'.'issue'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/subscriptions"))
                .body("[1].'payload'.'issue'.'user'.'organizations_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/orgs"))
                .body("[1].'payload'.'issue'.'user'.'repos_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/repos"))
                .body("[1].'payload'.'issue'.'user'.'events_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/events{/privacy}"))
                .body("[1].'payload'.'issue'.'user'.'received_events_url'", containsString("https://api.github.com/users/renovate%5Bbot%5D/received_events"))
                .body("[1].'payload'.'issue'.'user'.'type'", containsString("Bot"))
                .body("[1].'payload'.'issue'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'.size()", equalTo(1))
                .body("[1].'payload'.'issue'.'labels'[0].'node_id'", containsString("LA_kwDOIdzfgs8AAAABH68TyA"))
                .body("[1].'payload'.'issue'.'labels'[0].'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/labels/renovate"))
                .body("[1].'payload'.'issue'.'labels'[0].'name'", containsString("renovate"))
                .body("[1].'payload'.'issue'.'labels'[0].'color'", containsString("ededed"))
                .body("[1].'payload'.'issue'.'labels'[0].'default'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'[0].'description'", nullValue())
                .body("[1].'payload'.'issue'.'state'", containsString("open"))
                .body("[1].'payload'.'issue'.'locked'", equalTo(false))
                .body("[1].'payload'.'issue'.'assignee'", nullValue())
                .body("[1].'payload'.'issue'.'assignees'.size()", equalTo(0))
                .body("[1].'payload'.'issue'.'milestone'", nullValue())
                .body("[1].'payload'.'issue'.'comments'", numberMatches(1.0))
                .body("[1].'payload'.'issue'.'created_at'", containsString("2023-04-06T11:35:12Z"))
                .body("[1].'payload'.'issue'.'updated_at'", containsString("2023-04-06T11:38:28Z"))
                .body("[1].'payload'.'issue'.'closed_at'", nullValue())
                .body("[1].'payload'.'issue'.'author_association'", containsString("CONTRIBUTOR"))
                .body("[1].'payload'.'issue'.'active_lock_reason'", nullValue())
                .body("[1].'payload'.'issue'.'draft'", equalTo(false))
                .body("[1].'payload'.'issue'.'pull_request'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/pulls/263"))
                .body("[1].'payload'.'issue'.'pull_request'.'html_url'", containsString("https://github.com/re-taro/ogp.re-taro.dev/pull/263"))
                .body("[1].'payload'.'issue'.'pull_request'.'diff_url'", containsString("https://github.com/re-taro/ogp.re-taro.dev/pull/263.diff"))
                .body("[1].'payload'.'issue'.'pull_request'.'patch_url'", containsString("https://github.com/re-taro/ogp.re-taro.dev/pull/263.patch"))
                .body("[1].'payload'.'issue'.'pull_request'.'merged_at'", nullValue())
                .body("[1].'payload'.'issue'.'body'", containsString("[![Mend Renovate](https://app.renovatebot.com/images/banner.svg)](https://renovatebot.com)\n\nThis PR contains the following updates:\n\n| Package | Change | Age | Adoption | Passing | Confidence |\n|---|---|---|---|---|---|\n| [framer-motion](https://togithub.com/framer/motion) | [`10.10.0` -> `10.11.2`](https://renovatebot.com/diffs/npm/framer-motion/10.10.0/10.11.2) | [![age](https://badges.renovateapi.com/packages/npm/framer-motion/10.11.2/age-slim)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://badges.renovateapi.com/packages/npm/framer-motion/10.11.2/adoption-slim)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://badges.renovateapi.com/packages/npm/framer-motion/10.11.2/compatibility-slim/10.10.0)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://badges.renovateapi.com/packages/npm/framer-motion/10.11.2/confidence-slim/10.10.0)](https://docs.renovatebot.com/merge-confidence/) |\n\n---\n\n### Release Notes\n\n<details>\n<summary>framer/motion</summary>\n\n### [`v10.11.2`](https://togithub.com/framer/motion/blob/HEAD/CHANGELOG.md#&#8203;10112-2023-04-06)\n\n[Compare Source](https://togithub.com/framer/motion/compare/v10.11.1...v10.11.2)\n\n##### Fixed\n\n-   Fixing WAAPI offsets with springs in animation sequences.\n\n### [`v10.11.1`](https://togithub.com/framer/motion/compare/v10.11.0...v10.11.1)\n\n[Compare Source](https://togithub.com/framer/motion/compare/v10.11.0...v10.11.1)\n\n### [`v10.11.0`](https://togithub.com/framer/motion/blob/HEAD/CHANGELOG.md#&#8203;10110-2023-04-06)\n\n[Compare Source](https://togithub.com/framer/motion/compare/v10.10.0...v10.11.0)\n\n##### Added\n\n-   Adding springs to animation sequences.\n\n##### Fixed\n\n-   Fixing \"keyframes must be of same type\" error with some animation\n\n</details>\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - At any time (no schedule defined), Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Enabled.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n🔕 **Ignore**: Close this PR and you won't be reminded about this update again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Mend Renovate](https://www.mend.io/free-developer-tools/renovate/). View repository job log [here](https://app.renovatebot.com/dashboard#github/re-taro/ogp.re-taro.dev).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNS4zNC4xIiwidXBkYXRlZEluVmVyIjoiMzUuMzQuMSJ9-->\n"))
                .body("[1].'payload'.'issue'.'reactions'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263/reactions"))
                .body("[1].'payload'.'issue'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'timeline_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263/timeline"))
                .body("[1].'payload'.'issue'.'performed_via_github_app'", nullValue())
                .body("[1].'payload'.'issue'.'state_reason'", nullValue())
                .body("[1].'payload'.'comment'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/comments/1498927937"))
                .body("[1].'payload'.'comment'.'html_url'", containsString("https://github.com/re-taro/ogp.re-taro.dev/pull/263#issuecomment-1498927937"))
                .body("[1].'payload'.'comment'.'issue_url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/263"))
                .body("[1].'payload'.'comment'.'node_id'", containsString("IC_kwDOIdzfgs5ZV9NB"))
                .body("[1].'payload'.'comment'.'user'.'login'", containsString("github-actions[bot]"))
                .body("[1].'payload'.'comment'.'user'.'node_id'", containsString("MDM6Qm90NDE4OTgyODI="))
                .body("[1].'payload'.'comment'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/in/15368?v=4"))
                .body("[1].'payload'.'comment'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'comment'.'user'.'url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D"))
                .body("[1].'payload'.'comment'.'user'.'html_url'", containsString("https://github.com/apps/github-actions"))
                .body("[1].'payload'.'comment'.'user'.'followers_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/followers"))
                .body("[1].'payload'.'comment'.'user'.'following_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}"))
                .body("[1].'payload'.'comment'.'user'.'gists_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}"))
                .body("[1].'payload'.'comment'.'user'.'starred_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}"))
                .body("[1].'payload'.'comment'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/subscriptions"))
                .body("[1].'payload'.'comment'.'user'.'organizations_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/orgs"))
                .body("[1].'payload'.'comment'.'user'.'repos_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/repos"))
                .body("[1].'payload'.'comment'.'user'.'events_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}"))
                .body("[1].'payload'.'comment'.'user'.'received_events_url'", containsString("https://api.github.com/users/github-actions%5Bbot%5D/received_events"))
                .body("[1].'payload'.'comment'.'user'.'type'", containsString("Bot"))
                .body("[1].'payload'.'comment'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'comment'.'created_at'", containsString("2023-04-06T11:38:28Z"))
                .body("[1].'payload'.'comment'.'updated_at'", containsString("2023-04-06T11:38:28Z"))
                .body("[1].'payload'.'comment'.'author_association'", containsString("CONTRIBUTOR"))
                .body("[1].'payload'.'comment'.'body'", containsString("Deploy preview for _ogp-re-taro-dev_ ready!\n\n✅ Preview\nhttps://ogp-re-taro-f59ktgjmx-re-taro.vercel.app\n\nBuilt with commit f9a616e91c87540ea8bab75619b80f309c9594b1.\nThis pull request is being automatically deployed with [vercel-action](https://github.com/marketplace/actions/vercel-action)"))
                .body("[1].'payload'.'comment'.'reactions'.'url'", containsString("https://api.github.com/repos/re-taro/ogp.re-taro.dev/issues/comments/1498927937/reactions"))
                .body("[1].'payload'.'comment'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'performed_via_github_app'", nullValue())
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:38:28Z"))
                .body("[2].'type'", containsString("CreateEvent"))
                .body("[2].'actor'.'login'", containsString("SowMobo"))
                .body("[2].'actor'.'display_login'", containsString("SowMobo"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/SowMobo"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/85312195?"))
                .body("[2].'repo'.'name'", containsString("SowMobo/final-selenium-modibo"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/SowMobo/final-selenium-modibo"))
                .body("[2].'payload'.'ref'", nullValue())
                .body("[2].'payload'.'ref_type'", containsString("repository"))
                .body("[2].'payload'.'master_branch'", containsString("main"))
                .body("[2].'payload'.'description'", containsString("poi23  selenium webdriver final project to automate amazon web page tests "))
                .body("[2].'payload'.'pusher_type'", containsString("user"))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:38:28Z"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/VZgPm6m8wnRGi/W7u/community/code_of_conduct")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/997/collaborators/HpOpqctMQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#remove-project-collaborator"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/z/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/mUkDDQ5218St/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-organization-events"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5F0Pt/goguJj6XnDZDeRl/check-suites/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#get-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/7PU_xkYoG/migrations/xB5R/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/AaAB_1TX6rCmVk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/notifications")
                .then()
                .statusCode(205)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/qg0X/lFish2IdoxevrUz/deployments/9W04Z0V1M/statuses/810")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/n_a55Pj0o/following")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-the-people-a-user-follows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/codes_of_conduct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'key'", containsString("contributor_covenant"))
                .body("[0].'name'", containsString("Contributor Covenant"))
                .body("[0].'html_url'", nullValue())
                .body("[0].'url'", containsString("https://api.github.com/codes_of_conduct/contributor_covenant"))
                .body("[1].'key'", containsString("citizen_code_of_conduct"))
                .body("[1].'name'", containsString("Citizen Code Of Conduct"))
                .body("[1].'html_url'", nullValue())
                .body("[1].'url'", containsString("https://api.github.com/codes_of_conduct/citizen_code_of_conduct"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"use_lfs\": \"opt_out\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/jBImencqD/EXnsPsZT3mVzG/import/lfs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/sjdUa_YO_VGiavFd/rtUd5stdSXUtlr/issues/comments/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/350/projects/y4f0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/vITNYLP63g075Ryi/teams/hL/discussions/JEg/comments/mRAiVp8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/g8JVYU4ZM2gA/members/RjxSfuyj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/VCmr/ppQEmcAgPxedFcYF/issues/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/t_hBUqmcCS8hhPq/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/2cmckpj/packages/container/EpNfSCXTmgp0/versions/pz37cV_M_o_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/notifications?all=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/5GLwfyMjOTht/following/weqX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"9_wYdiZ87v0Ki\" " + 
                    " ], " + 
                    " \"Operations\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/enterprises/BYzGCN0B/Groups/C_syoM1IbSMOHpo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/yKMlMUe/pP/code-scanning/alerts/cG78fMXvX5V/instances")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/830/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#download-a-user-migration-archive"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302, 304, 401, 403).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/2tM/Prai/traffic/views")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-page-views"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/keys?per_page=232")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8_w8kk8wEn/8c8gxSHv2PXMLcU/commits/K00jWL4m2LRoS/check-suites?app_id=456")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/mI6JQq4BTeLe8x/Vcc8o_RfYwf/pulls/comments/j4TTgyqsPPL5pwUu/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 415, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/7BMhNBHSBh5/xX7LBLj85sxJos/hooks/v/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/V/failed_invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/7fSFTSwyTjLPZT/zivJeF1BUjxBQ9J/pulls/comments/1/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 415, 422).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/eycn2kSSLiy/EN/notifications")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/R1AB_8YC3ZZfS3I/VuSsCz/git/tags/xnAn")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/orgs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/721?exclude=ruxWoq64hccacKF&exclude=gcyRjZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#get-a-user-migration-status"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/X/actions/runner-groups/TcK0V7AkdWC4qML")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/vInIU/teams/ptA_xuZ/discussions/sX/comments/SxqvI/reactions/yM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/N9yEGsqCpgVNq/yV9ZpMJleCEKfZJ/actions/runs/4g/jobs?filter=all")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/XLowMQ0CSh56/S1s8791OlRP4/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#start-an-import"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/T733oTMIxF")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/starred/9zG66f/GwcxV77gblwyf4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/g/following/8Eu29EO4J7q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/Xn8v/wk1m6sB/comments/jC6bAMe9Mztb4pT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#update-a-commit-comment"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/eM5XPF9ng_OLs1/8QLkXyZsqKpBJBi2/collaborators/gQrJbr7NVAZKUtL2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204, 403, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"tag_name\": \"q\", " + 
                    " \"target_commitish\": \"mz\", " + 
                    " \"name\": \"HXfB\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/_IJqo2/CqeTBwTmwLtQ2X2H/releases/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/c7TOWCelzF4Qj4He/blocks/PmImZcyTFUN5ZoHS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"userName\": \"mjhlga3b\", " + 
                    " \"displayName\": \"oyS\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"K9OmCryiHA\", " + 
                    " \"familyName\": \"2i6d\", " + 
                    " \"formatted\": \"qENPjtCFrAum\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"k5UlX6x\", " + 
                    " \"primary\": false, " + 
                    " \"type\": \"9UxRRZ\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"MuFOlAgCDX\", " + 
                    " \"type\": \"chkhS\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"Umgpcl48Q6HN\", " + 
                    " \"primary\": false, " + 
                    " \"type\": \"hs85v\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"_swca8D90\", " + 
                    " \"type\": \"LWW3qbgW\" " + 
                    " } " + 
                    " ], " + 
                    " \"externalId\": \"a\" " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/organizations/SEcpMvG3/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"displayName\": \"NOOOcsCDUuwP\", " + 
                    " \"externalId\": \"kQG4mP3fzHM\", " + 
                    " \"groups\": [ " + 
                    " \"1Z6WZCMW_s5CWH\", " + 
                    " \"7ZUzaCt8Ck18\", " + 
                    " \"zE5_KN1O6GcfQrU\", " + 
                    " \"5ecV3dU5exxUloQk\" " + 
                    " ], " + 
                    " \"userName\": \"H9\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"57LaQ\", " + 
                    " \"familyName\": \"AvYIpHk\", " + 
                    " \"formatted\": \"Q\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"type\": \"zcfKktY9nb\", " + 
                    " \"value\": \"exC\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"AAZoL\", " + 
                    " \"value\": \"\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/organizations/fF/Users/6O9LQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#set-scim-information-for-a-provisioned-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Mqh35/NVWNh355LuTsFsu/labels/3sqPCwNk4vJi1TF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-label"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/installation/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to list repositories for an installation."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/IRw/teams/8AO38fMI84o/memberships/F4yQC4Oe0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_organization_ids\": [ " + 
                    " 797, " + 
                    " 193, " + 
                    " 637, " + 
                    " 970, " + 
                    " 346 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/PvpO0dW/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .get(baseUrlOfSut + "/zen")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Jj/hf/actions/workflows/aGKplRTg55/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories?since=454")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(100))
                .body("[0].'node_id'", containsString("MDEwOlJlcG9zaXRvcnk0Njk="))
                .body("[0].'name'", containsString("linthicum"))
                .body("[0].'full_name'", containsString("bryanl/linthicum"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("bryanl"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjI0MA=="))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/240?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/bryanl"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/bryanl"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/bryanl/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/bryanl/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/bryanl/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/bryanl/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/bryanl/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/bryanl/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/bryanl/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/bryanl/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/bryanl/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/bryanl/linthicum"))
                .body("[0].'description'", containsString("Linthicum"))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/bryanl/linthicum"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/bryanl/linthicum/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/bryanl/linthicum/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/bryanl/linthicum/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/bryanl/linthicum/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/bryanl/linthicum/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/bryanl/linthicum/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/bryanl/linthicum/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/bryanl/linthicum/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/bryanl/linthicum/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/bryanl/linthicum/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/bryanl/linthicum/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/bryanl/linthicum/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/bryanl/linthicum/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/bryanl/linthicum/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/bryanl/linthicum/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/bryanl/linthicum/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/bryanl/linthicum/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/bryanl/linthicum/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/bryanl/linthicum/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/bryanl/linthicum/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/bryanl/linthicum/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/bryanl/linthicum/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/bryanl/linthicum/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/bryanl/linthicum/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/bryanl/linthicum/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/bryanl/linthicum/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/bryanl/linthicum/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/bryanl/linthicum/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/bryanl/linthicum/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/bryanl/linthicum/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/bryanl/linthicum/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/bryanl/linthicum/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/bryanl/linthicum/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/bryanl/linthicum/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/bryanl/linthicum/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/bryanl/linthicum/deployments"))
                .body("[1].'node_id'", containsString("MDEwOlJlcG9zaXRvcnk0ODM="))
                .body("[1].'name'", containsString("textilizefu"))
                .body("[1].'full_name'", containsString("adelcambre/textilizefu"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("adelcambre"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjI0Mg=="))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/242?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/adelcambre"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/adelcambre"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/adelcambre/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/adelcambre/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/adelcambre/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/adelcambre/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/adelcambre/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/adelcambre/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/adelcambre/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/adelcambre/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/adelcambre/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/adelcambre/textilizefu"))
                .body("[1].'description'", containsString("Textilize plugin for rails, based on PermalinkFu"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/adelcambre/textilizefu"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/adelcambre/textilizefu/deployments"))
                .body("[2].'node_id'", containsString("MDEwOlJlcG9zaXRvcnk0OTE="))
                .body("[2].'name'", containsString("slate"))
                .body("[2].'full_name'", containsString("scharfie/slate"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("scharfie"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjIzMA=="))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/230?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/scharfie"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/scharfie"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/scharfie/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/scharfie/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/scharfie/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/scharfie/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/scharfie/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/scharfie/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/scharfie/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/scharfie/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/scharfie/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/scharfie/slate"))
                .body("[2].'description'", containsString("Rails-based content management system/framework"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/scharfie/slate"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/scharfie/slate/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/scharfie/slate/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/scharfie/slate/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/scharfie/slate/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/scharfie/slate/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/scharfie/slate/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/scharfie/slate/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/scharfie/slate/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/scharfie/slate/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/scharfie/slate/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/scharfie/slate/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/scharfie/slate/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/scharfie/slate/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/scharfie/slate/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/scharfie/slate/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/scharfie/slate/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/scharfie/slate/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/scharfie/slate/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/scharfie/slate/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/scharfie/slate/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/scharfie/slate/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/scharfie/slate/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/scharfie/slate/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/scharfie/slate/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/scharfie/slate/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/scharfie/slate/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/scharfie/slate/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/scharfie/slate/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/scharfie/slate/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/scharfie/slate/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/scharfie/slate/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/scharfie/slate/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/scharfie/slate/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/scharfie/slate/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/scharfie/slate/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/scharfie/slate/deployments"))
                ; // Skipping assertions on the remaining 97 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories/601/environments/YHu6/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-environment-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/repos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Body should be a JSON object"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"environment_ids\": [ " + 
                    " 969, " + 
                    " 652, " + 
                    " 65, " + 
                    " 48112699 " + 
                    " ], " + 
                    " \"state\": \"EVOMASTER\", " + 
                    " \"comment\": \"Ohr0UlLkWx5j\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/P8Sfk/kunnUN99LUoY/actions/runs/hzIg/pending_deployments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/UQSmrYIji/0__DQvE/actions/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-repository-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/u/mQZq/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/releases/releases#create-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/520?exclude=06m1mKVl4nLgni&exclude=1MON18id8vT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#get-a-user-migration-status"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/enterprises/IyOk/actions/runners/registration-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/teams?per_page=235")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"UUyiVQ7s_\", " + 
                    " \"description\": \"rbxsZaQRx1\", " + 
                    " \"permission\": \"push\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/teams/223")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#update-a-team-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/ZN/NWAFiH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-revision"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/gists/0zBVykcXDOZ1oZ/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#fork-a-gist"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"new_name\": \"6dixKuE9789\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/B4D2HdT/D6aqimt1E2s/branches/NGLWBYrq/rename")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#rename-a-branch"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/notifications")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/notifications/threads/215/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-thread-subscription"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/2hxP7U/Users/oxRH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"_uE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/gists/_uE/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#create-a-gist-comment"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/emails")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Emails must be an Array of String values."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/plns/1/import/authors")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/authorizations/611")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 304, 401, 403).contains(res_8.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/NTh4r5cKJF82ojM/issues?state=all")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses?" + 
                    "featured=false&" + 
                    "per_page=894")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'key'", containsString("agpl-3.0"))
                .body("[0].'name'", containsString("GNU Affero General Public License v3.0"))
                .body("[0].'spdx_id'", containsString("AGPL-3.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/agpl-3.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTE="))
                .body("[1].'key'", containsString("bsd-2-clause"))
                .body("[1].'name'", containsString("BSD 2-Clause \"Simplified\" License"))
                .body("[1].'spdx_id'", containsString("BSD-2-Clause"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/bsd-2-clause"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTQ="))
                .body("[2].'key'", containsString("bsd-3-clause"))
                .body("[2].'name'", containsString("BSD 3-Clause \"New\" or \"Revised\" License"))
                .body("[2].'spdx_id'", containsString("BSD-3-Clause"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/bsd-3-clause"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTU="))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/E1jraBcNgJtuVY3/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/hWFVqvmh/mULDJuF7FTcF/readme")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"base\": \"0TJC_7D3sIm7\", " + 
                    " \"head\": \"2m4iCkDQapNanLkQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/pdQ/m50aLguEgRC/merges")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#merge-a-branch"));
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/notifications/threads/602/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#delete-a-thread-subscription"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"private\": true, " + 
                    " \"has_wiki\": false, " + 
                    " \"is_template\": true, " + 
                    " \"default_branch\": \"bRZE09AtFUPf\", " + 
                    " \"delete_branch_on_merge\": true, " + 
                    " \"archived\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/6kEg7iF/qvg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/repos/repos#update-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Rcb\", " + 
                    " \"location\": \"XEY_FzIWqFmbE\", " + 
                    " \"hireable\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", containsString("Rcb"))
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", containsString("XEY_FzIWqFmbE"))
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(5.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-04-06T11:48:40Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/u2hT48jw2S/teams/wq/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/aZcLoI0/oNCFwGOyA5/deployments/6cVfLxTtk_el09/statuses")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/xk/duwY42n5ut9nhC/contributors?anon=B_7j8zF0Khog")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-contributors"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/y_A/4tRgnpFDDPjgg7c7/actions/runs/IpP/pending_deployments")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/marketplace_purchases")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/HYRmiIggig/public_members/VBVeJQWG9airSi")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/JMUF/wq/milestones?" + 
                    "state=all&" + 
                    "direction=desc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-milestones"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/679/projects/GW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/441/discussions/E7F/comments/gqn_9/reactions?content=rocket")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/Fx4ZSNco8aoICxi/F6FR/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .put(baseUrlOfSut + "/user/following/ZyfVnRy39brk3tD")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/313/columns")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'url'", containsString("https://api.github.com/projects/columns/849"))
                .body("[0].'project_url'", containsString("https://api.github.com/projects/313"))
                .body("[0].'cards_url'", containsString("https://api.github.com/projects/columns/849/cards"))
                .body("[0].'node_id'", containsString("MDEzOlByb2plY3RDb2x1bW44NDk="))
                .body("[0].'name'", containsString("Backlog"))
                .body("[0].'created_at'", containsString("2016-09-14T18:18:26Z"))
                .body("[0].'updated_at'", containsString("2017-06-30T17:35:47Z"))
                .body("[1].'url'", containsString("https://api.github.com/projects/columns/854"))
                .body("[1].'project_url'", containsString("https://api.github.com/projects/313"))
                .body("[1].'cards_url'", containsString("https://api.github.com/projects/columns/854/cards"))
                .body("[1].'node_id'", containsString("MDEzOlByb2plY3RDb2x1bW44NTQ="))
                .body("[1].'name'", containsString("In Progress"))
                .body("[1].'created_at'", containsString("2016-09-14T18:18:32Z"))
                .body("[1].'updated_at'", containsString("2017-06-30T17:35:49Z"))
                .body("[2].'url'", containsString("https://api.github.com/projects/columns/859"))
                .body("[2].'project_url'", containsString("https://api.github.com/projects/313"))
                .body("[2].'cards_url'", containsString("https://api.github.com/projects/columns/859/cards"))
                .body("[2].'node_id'", containsString("MDEzOlByb2plY3RDb2x1bW44NTk="))
                .body("[2].'name'", containsString("Ready for QA"))
                .body("[2].'created_at'", containsString("2016-09-14T18:18:36Z"))
                .body("[2].'updated_at'", containsString("2016-09-14T18:20:30Z"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/JtETxaJWcWb/95bdd0vg1x/pages/builds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#request-a-github-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/organizations?since=827")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'login'", containsString("railslove"))
                .body("[0].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjEwNjc="))
                .body("[0].'url'", containsString("https://api.github.com/orgs/railslove"))
                .body("[0].'repos_url'", containsString("https://api.github.com/orgs/railslove/repos"))
                .body("[0].'events_url'", containsString("https://api.github.com/orgs/railslove/events"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/orgs/railslove/hooks"))
                .body("[0].'issues_url'", containsString("https://api.github.com/orgs/railslove/issues"))
                .body("[0].'members_url'", containsString("https://api.github.com/orgs/railslove/members{/member}"))
                .body("[0].'public_members_url'", containsString("https://api.github.com/orgs/railslove/public_members{/member}"))
                .body("[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/1067?v=4"))
                .body("[0].'description'", containsString("We're an agile team building new products for the web. And oh boy, we're kind of good at it. Want to work with us?"))
                .body("[1].'login'", containsString("railsdog"))
                .body("[1].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjExMTk="))
                .body("[1].'url'", containsString("https://api.github.com/orgs/railsdog"))
                .body("[1].'repos_url'", containsString("https://api.github.com/orgs/railsdog/repos"))
                .body("[1].'events_url'", containsString("https://api.github.com/orgs/railsdog/events"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/orgs/railsdog/hooks"))
                .body("[1].'issues_url'", containsString("https://api.github.com/orgs/railsdog/issues"))
                .body("[1].'members_url'", containsString("https://api.github.com/orgs/railsdog/members{/member}"))
                .body("[1].'public_members_url'", containsString("https://api.github.com/orgs/railsdog/public_members{/member}"))
                .body("[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/1119?v=4"))
                .body("[1].'description'", containsString("Leading Spree Commerce Integration Partner"))
                .body("[2].'login'", containsString("netguru"))
                .body("[2].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjExNDY="))
                .body("[2].'url'", containsString("https://api.github.com/orgs/netguru"))
                .body("[2].'repos_url'", containsString("https://api.github.com/orgs/netguru/repos"))
                .body("[2].'events_url'", containsString("https://api.github.com/orgs/netguru/events"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/orgs/netguru/hooks"))
                .body("[2].'issues_url'", containsString("https://api.github.com/orgs/netguru/issues"))
                .body("[2].'members_url'", containsString("https://api.github.com/orgs/netguru/members{/member}"))
                .body("[2].'public_members_url'", containsString("https://api.github.com/orgs/netguru/public_members{/member}"))
                .body("[2].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/1146?v=4"))
                .body("[2].'description'", containsString("Building software for world changers"))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/TxYNDyU/1/pages/builds/latest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-latest-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/j/DDxpLKJBQjg7lZO/actions/runs/Gn3Kyjseb/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/dtKySsRL2ZV6/V8dmHOKi86WWlARg/hooks/UMG5771E9hHJ9/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/nuget/PSy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/rv3JMPUiWvOP/actions/runners/n")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/keys/499")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/P/gists")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'url'", containsString("https://api.github.com/gists/2d1c26560e63e8850d40"))
                .body("[0].'forks_url'", containsString("https://api.github.com/gists/2d1c26560e63e8850d40/forks"))
                .body("[0].'commits_url'", containsString("https://api.github.com/gists/2d1c26560e63e8850d40/commits"))
                .body("[0].'node_id'", containsString("MDQ6R2lzdDJkMWMyNjU2MGU2M2U4ODUwZDQw"))
                .body("[0].'git_pull_url'", containsString("https://gist.github.com/2d1c26560e63e8850d40.git"))
                .body("[0].'git_push_url'", containsString("https://gist.github.com/2d1c26560e63e8850d40.git"))
                .body("[0].'html_url'", containsString("https://gist.github.com/p/2d1c26560e63e8850d40"))
                .body("[0].'files'.'hai.rb'.'filename'", containsString("hai.rb"))
                .body("[0].'files'.'hai.rb'.'type'", containsString("application/x-ruby"))
                .body("[0].'files'.'hai.rb'.'language'", containsString("Ruby"))
                .body("[0].'files'.'hai.rb'.'raw_url'", containsString("https://gist.githubusercontent.com/p/2d1c26560e63e8850d40/raw/77f6eabf1a0466859475323839bc34baba1504d4/hai.rb"))
                .body("[0].'files'.'hai.rb'.'size'", numberMatches(380.0))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2015-12-15T02:18:15Z"))
                .body("[0].'updated_at'", containsString("2015-12-15T02:18:15Z"))
                .body("[0].'description'", containsString("Rails 64 bit primary key fix for sqlite"))
                .body("[0].'comments'", numberMatches(0.0))
                .body("[0].'user'", nullValue())
                .body("[0].'comments_url'", containsString("https://api.github.com/gists/2d1c26560e63e8850d40/comments"))
                .body("[0].'owner'.'login'", containsString("p"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjEyNTYxMg=="))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/125612?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/p"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/p"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/p/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/p/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/p/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/p/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/p/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/p/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/p/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/p/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/p/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'truncated'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/gists/4238044"))
                .body("[1].'forks_url'", containsString("https://api.github.com/gists/4238044/forks"))
                .body("[1].'commits_url'", containsString("https://api.github.com/gists/4238044/commits"))
                .body("[1].'node_id'", containsString("MDQ6R2lzdDQyMzgwNDQ="))
                .body("[1].'git_pull_url'", containsString("https://gist.github.com/4238044.git"))
                .body("[1].'git_push_url'", containsString("https://gist.github.com/4238044.git"))
                .body("[1].'html_url'", containsString("https://gist.github.com/p/4238044"))
                .body("[1].'files'.'1 launch command'.'filename'", containsString("1 launch command"))
                .body("[1].'files'.'1 launch command'.'type'", containsString("text/plain"))
                .body("[1].'files'.'1 launch command'.'language'", nullValue())
                .body("[1].'files'.'1 launch command'.'raw_url'", containsString("https://gist.githubusercontent.com/p/4238044/raw/24a090a53b644bf27344bac3b74272754dc8c50c/1%20launch%20command"))
                .body("[1].'files'.'1 launch command'.'size'", numberMatches(34.0))
                .body("[1].'files'.'2 doc-unicorn.rb'.'filename'", containsString("2 doc-unicorn.rb"))
                .body("[1].'files'.'2 doc-unicorn.rb'.'type'", containsString("application/x-ruby"))
                .body("[1].'files'.'2 doc-unicorn.rb'.'language'", containsString("Ruby"))
                .body("[1].'files'.'2 doc-unicorn.rb'.'raw_url'", containsString("https://gist.githubusercontent.com/p/4238044/raw/0a507b57ebe3a83e1187cb06098689b4ceae1938/2%20doc-unicorn.rb"))
                .body("[1].'files'.'2 doc-unicorn.rb'.'size'", numberMatches(79.0))
                .body("[1].'files'.'3 integrity-init.rb'.'filename'", containsString("3 integrity-init.rb"))
                .body("[1].'files'.'3 integrity-init.rb'.'type'", containsString("application/x-ruby"))
                .body("[1].'files'.'3 integrity-init.rb'.'language'", containsString("Ruby"))
                .body("[1].'files'.'3 integrity-init.rb'.'raw_url'", containsString("https://gist.githubusercontent.com/p/4238044/raw/fd3b984d08446ce149d38bb6de69b9f823b6f437/3%20integrity-init.rb"))
                .body("[1].'files'.'3 integrity-init.rb'.'size'", numberMatches(1006.0))
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2012-12-08T01:24:31Z"))
                .body("[1].'updated_at'", containsString("2015-10-13T18:28:13Z"))
                .body("[1].'description'", containsString("Integrity via Unicorn"))
                .body("[1].'comments'", numberMatches(0.0))
                .body("[1].'user'", nullValue())
                .body("[1].'comments_url'", containsString("https://api.github.com/gists/4238044/comments"))
                .body("[1].'owner'.'login'", containsString("p"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjEyNTYxMg=="))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/125612?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/p"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/p"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/p/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/p/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/p/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/p/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/p/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/p/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/p/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/p/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/p/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'truncated'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/gists/4231787"))
                .body("[2].'forks_url'", containsString("https://api.github.com/gists/4231787/forks"))
                .body("[2].'commits_url'", containsString("https://api.github.com/gists/4231787/commits"))
                .body("[2].'node_id'", containsString("MDQ6R2lzdDQyMzE3ODc="))
                .body("[2].'git_pull_url'", containsString("https://gist.github.com/4231787.git"))
                .body("[2].'git_push_url'", containsString("https://gist.github.com/4231787.git"))
                .body("[2].'html_url'", containsString("https://gist.github.com/p/4231787"))
                .body("[2].'files'.'kill-user.php'.'filename'", containsString("kill-user.php"))
                .body("[2].'files'.'kill-user.php'.'type'", containsString("application/x-httpd-php"))
                .body("[2].'files'.'kill-user.php'.'language'", containsString("PHP"))
                .body("[2].'files'.'kill-user.php'.'raw_url'", containsString("https://gist.githubusercontent.com/p/4231787/raw/21bab3dde097bd03754cb18f73eb63d822d0203d/kill-user.php"))
                .body("[2].'files'.'kill-user.php'.'size'", numberMatches(296.0))
                .body("[2].'files'.'script_init.php'.'filename'", containsString("script_init.php"))
                .body("[2].'files'.'script_init.php'.'type'", containsString("application/x-httpd-php"))
                .body("[2].'files'.'script_init.php'.'language'", containsString("PHP"))
                .body("[2].'files'.'script_init.php'.'raw_url'", containsString("https://gist.githubusercontent.com/p/4231787/raw/e94794d5145a2b2fb194c9567153b16710405ecc/script_init.php"))
                .body("[2].'files'.'script_init.php'.'size'", numberMatches(372.0))
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2012-12-07T08:27:42Z"))
                .body("[2].'updated_at'", containsString("2015-10-13T17:38:13Z"))
                .body("[2].'description'", containsString("phpbb kill user script"))
                .body("[2].'comments'", numberMatches(0.0))
                .body("[2].'user'", nullValue())
                .body("[2].'comments_url'", containsString("https://api.github.com/gists/4231787/comments"))
                .body("[2].'owner'.'login'", containsString("p"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjEyNTYxMg=="))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/125612?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/p"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/p"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/p/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/p/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/p/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/p/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/p/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/p/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/p/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/p/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/p/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'truncated'", equalTo(false))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/632/discussions/pMRAx0Cb8PN0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"wait_timer\": 606, " + 
                    " \"deployment_branch_policy\": { " + 
                    " \"protected_branches\": false, " + 
                    " \"custom_branch_policies\": true " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/Wx/HkAQKVQiTyZZaR1/environments/cOjEeOC1DsXa35Ns")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#create-or-update-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/1k7mKhAKSYtf4B/actions/permissions/organizations/BaF4msm94HEE_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/CV0X/LYhAhyk6cfcS/actions/secrets")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/jZ1jM8pWJlJYhit/teams/1/discussions/wk323RddH6Bqy78")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/i9gL5Bq/YPCFU0gbanK_/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/13v_KjUta/0Pnb5c/traffic/popular/referrers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_organization_ids\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/rKzvN0vcXpqUB/actions/runner-groups/dOUeQIXFmO9/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/820/discussions/Z1iOeBFuNp/comments/YKcVoNV_FV29/reactions?content=heart")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .delete(baseUrlOfSut + "/orgs/m22/migrations/uUHp7AxCYQ/repos/jgbw/lock")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requires authentication"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses?" + 
                    "featured=false&" + 
                    "per_page=382")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'key'", containsString("agpl-3.0"))
                .body("[0].'name'", containsString("GNU Affero General Public License v3.0"))
                .body("[0].'spdx_id'", containsString("AGPL-3.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/agpl-3.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTE="))
                .body("[1].'key'", containsString("bsd-2-clause"))
                .body("[1].'name'", containsString("BSD 2-Clause \"Simplified\" License"))
                .body("[1].'spdx_id'", containsString("BSD-2-Clause"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/bsd-2-clause"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTQ="))
                .body("[2].'key'", containsString("bsd-3-clause"))
                .body("[2].'name'", containsString("BSD 3-Clause \"New\" or \"Revised\" License"))
                .body("[2].'spdx_id'", containsString("BSD-3-Clause"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/bsd-3-clause"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTU="))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/jqxVJW/Users/ZxuxB88bBo9Cp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/fP0X3iLRK7cHm9K/XfkKi0Tr/milestones/_FLIrlQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-milestone"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/U8ZkQCbNda_D/hf5c3QL97o0_9i/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-releases"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/MsmmI_/WgxkrP76AVHjpcc/contents/asncaU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-or-update-file-contents"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/62VnfSseElw6/repos?" + 
                    "type=EVOMASTER&" + 
                    "sort=created")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repositories-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/582/repos/oCEVCAirwyD/hnom8QbF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/issues?" + 
                    "filter=assigned&" + 
                    "state=open&" + 
                    "labels=gCuOEjN3WcX&" + 
                    "sort=created")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/FoWpNkWGahvQa/1/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-repository-project"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6hEj0/ePjj4a5QrlLYvl/actions/runs/bmRGUmEHP/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/swRmYPcxk4/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/8D8FHDjF/Groups/gRChm2Q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/repos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Body should be a JSON object"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/commits?" + 
                    "q=LWMhs&" + 
                    "sort=committer-date")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/VwyC/following")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-the-people-a-user-follows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/B2txO8rsS9XMCb/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"bFhpRfStPjY7CNl\", " + 
                    " \"email\": \"MS\", " + 
                    " \"twitter_username\": \"FuDW0Kf\", " + 
                    " \"company\": \"o7DKK\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Validation Failed"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'resource'", containsString("User"))
                .body("'errors'[0].'code'", containsString("custom"))
                .body("'errors'[0].'field'", containsString("profile_email"))
                .body("'errors'[0].'message'", containsString("profile_email must be one of the user's verified email addresses"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#update-the-authenticated-user"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/8lSOUZvpjMZw/actions/permissions/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/organizations/iryoM/Users/sYBh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/nK657JQJWKhn70Jw/starred")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/yBO5bJL8pm/xdgBYnrY/branches/aiKOEwW/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/nVpgbVUMLvRc04Am/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/WG2B8/WvuZf7J/pulls/Q5W6o1cs/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [], " + 
                    " \"Operations\": [ " + 
                    " { " + 
                    " \"op\": \"Add\" " + 
                    " }, " + 
                    " { " + 
                    " \"op\": \"Remove\", " + 
                    " \"value\": \"2I3B\" " + 
                    " }, " + 
                    " { " + 
                    " \"op\": \"add\", " + 
                    " \"value\": \"IiczHPyAo\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/enterprises/N7zCQOrH3Bip_9/Groups/Lzf7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses?" + 
                    "featured=true&" + 
                    "per_page=559")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'key'", containsString("apache-2.0"))
                .body("[0].'name'", containsString("Apache License 2.0"))
                .body("[0].'spdx_id'", containsString("Apache-2.0"))
                .body("[0].'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[0].'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[1].'key'", containsString("gpl-3.0"))
                .body("[1].'name'", containsString("GNU General Public License v3.0"))
                .body("[1].'spdx_id'", containsString("GPL-3.0"))
                .body("[1].'url'", containsString("https://api.github.com/licenses/gpl-3.0"))
                .body("[1].'node_id'", containsString("MDc6TGljZW5zZTk="))
                .body("[2].'key'", containsString("mit"))
                .body("[2].'name'", containsString("MIT License"))
                .body("[2].'spdx_id'", containsString("MIT"))
                .body("[2].'url'", containsString("https://api.github.com/licenses/mit"))
                .body("[2].'node_id'", containsString("MDc6TGljZW5zZTEz"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/2CCm/actions/runners")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/lIVwJj/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/q8E/FnCSOT/comments/12NA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#get-a-commit-comment"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/J")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("j"))
                .body("'node_id'", containsString("MDQ6VXNlcjU4OTQxMA=="))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/589410?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/j"))
                .body("'html_url'", containsString("https://github.com/j"))
                .body("'followers_url'", containsString("https://api.github.com/users/j/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/j/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/j/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/j/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/j/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/j/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/j/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/j/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/j/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", containsString("Jordan Stout"))
                .body("'company'", containsString("@andalways"))
                .body("'blog'", containsString("jrdn.org"))
                .body("'location'", containsString("San Diego, CA"))
                .body("'email'", containsString("j@jrdn.org"))
                .body("'hireable'", equalTo(true))
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(42.0))
                .body("'public_gists'", numberMatches(31.0))
                .body("'followers'", numberMatches(82.0))
                .body("'following'", numberMatches(11.0))
                .body("'created_at'", containsString("2011-01-29T03:10:46Z"))
                .body("'updated_at'", containsString("2023-03-06T03:21:48Z"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/iyUbuGKLGBax9v/D1a1Y61mgOmx/git/tags")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-tag-object"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/issues?" + 
                    "state=open&" + 
                    "labels=BGZFtkE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/installations")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an access token authorized to a GitHub App in order to list installations"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/728")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#get-a-team-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/v6umessC4M/i/secret-scanning/alerts/X3S3SsryjIl5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/V5j8K/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/641/repos")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Kfb7mj5/N8hZdgHcUBz/stats/code_frequency")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/emails")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Emails must be an Array of String values."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"utBuzzSc8NSsExC\", " + 
                    " \"\", " + 
                    " \"v2\", " + 
                    " \"haXoyX\" " + 
                    " ], " + 
                    " \"userName\": \"WJ7669\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"xw_D\", " + 
                    " \"familyName\": \"\" " + 
                    " }, " + 
                    " \"emails\": [], " + 
                    " \"groups\": [ " + 
                    " { " + 
                    " \"value\": \"4LWA0Qba76sz9D8c\" " + 
                    " }, " + 
                    " {}, " + 
                    " {}, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/enterprises/ilE9Mr/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("This Enterprise account does not support membership provisioning."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/users?q=vEL9_E6u0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/topics?q=_X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'total_count'", numberMatches(0.0))
                .body("'incomplete_results'", equalTo(false))
                .body("'items'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/installations/253/repositories/clyzvx21")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/lol6pKCamhI7j6J/w/generate")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/to6p/qh4RRydD/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/812/columns")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-columns"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/rfigjrS5dxw8pNp/Users/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/oBNLHZ9/06B2NUrRtQ8VH/traffic/views")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-page-views"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/teams/903/memberships/YpecIzji8wP")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must be an organization owner or team maintainer to add a team membership."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/vhs/HZ4_zYPK3vIQ4fz/branches/aHIN_scT47vei/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_organization_ids\": [ " + 
                    " 396, " + 
                    " 146, " + 
                    " -572569624, " + 
                    " 621, " + 
                    " 402 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/cRcJH6w/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/fLDzXPbc7/comments/bXupjhu6yWOtAS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-comment"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/authorizations/139")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/subscriptions")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'node_id'", containsString("R_kgDOHV7fxQ"))
                .body("[0].'name'", containsString("Cajviewer-crash"))
                .body("[0].'full_name'", containsString("painsAgains/Cajviewer-crash"))
                .body("[0].'private'", equalTo(true))
                .body("[0].'owner'.'login'", containsString("painsAgains"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'description'", containsString("find  crashs in cajviewer "))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/Cajviewer-crash/deployments"))
                .body("[0].'created_at'", containsString("2022-05-16T08:58:01Z"))
                .body("[0].'updated_at'", containsString("2022-05-20T03:07:07Z"))
                .body("[0].'pushed_at'", containsString("2022-05-16T09:04:43Z"))
                .body("[0].'git_url'", containsString("git://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:painsAgains/Cajviewer-crash.git"))
                .body("[0].'clone_url'", containsString("https://github.com/painsAgains/Cajviewer-crash.git"))
                .body("[0].'svn_url'", containsString("https://github.com/painsAgains/Cajviewer-crash"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1340.0))
                .body("[0].'stargazers_count'", numberMatches(0.0))
                .body("[0].'watchers_count'", numberMatches(0.0))
                .body("[0].'language'", nullValue())
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(false))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(0.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(0.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("private"))
                .body("[0].'forks'", numberMatches(0.0))
                .body("[0].'open_issues'", numberMatches(0.0))
                .body("[0].'watchers'", numberMatches(0.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(true))
                .body("[0].'permissions'.'maintain'", equalTo(true))
                .body("[0].'permissions'.'push'", equalTo(true))
                .body("[0].'permissions'.'triage'", equalTo(true))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIV78aQ"))
                .body("[1].'name'", containsString("hack"))
                .body("[1].'full_name'", containsString("painsAgains/hack"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("painsAgains"))
                .body("[1].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[1].'owner'.'type'", containsString("User"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'description'", containsString("hack_js"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/painsAgains/hack"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/painsAgains/hack/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/painsAgains/hack/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/hack/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/painsAgains/hack/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/hack/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/painsAgains/hack/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/hack/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/painsAgains/hack/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/hack/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/painsAgains/hack/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/hack/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/hack/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/hack/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/hack/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/painsAgains/hack/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/painsAgains/hack/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/painsAgains/hack/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/painsAgains/hack/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/painsAgains/hack/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/hack/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/painsAgains/hack/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/hack/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/hack/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/hack/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/painsAgains/hack/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/painsAgains/hack/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/hack/deployments"))
                .body("[1].'created_at'", containsString("2022-10-31T09:24:23Z"))
                .body("[1].'updated_at'", containsString("2022-10-31T09:38:12Z"))
                .body("[1].'pushed_at'", containsString("2022-11-01T02:14:43Z"))
                .body("[1].'git_url'", containsString("git://github.com/painsAgains/hack.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:painsAgains/hack.git"))
                .body("[1].'clone_url'", containsString("https://github.com/painsAgains/hack.git"))
                .body("[1].'svn_url'", containsString("https://github.com/painsAgains/hack"))
                .body("[1].'homepage'", nullValue())
                .body("[1].'size'", numberMatches(20835.0))
                .body("[1].'stargazers_count'", numberMatches(0.0))
                .body("[1].'watchers_count'", numberMatches(0.0))
                .body("[1].'language'", containsString("JavaScript"))
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(0.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(0.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(0))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(0.0))
                .body("[1].'open_issues'", numberMatches(0.0))
                .body("[1].'watchers'", numberMatches(0.0))
                .body("[1].'default_branch'", containsString("main"))
                .body("[1].'permissions'.'admin'", equalTo(true))
                .body("[1].'permissions'.'maintain'", equalTo(true))
                .body("[1].'permissions'.'push'", equalTo(true))
                .body("[1].'permissions'.'triage'", equalTo(true))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOIaDp1Q"))
                .body("[2].'name'", containsString("my_script"))
                .body("[2].'full_name'", containsString("painsAgains/my_script"))
                .body("[2].'private'", equalTo(true))
                .body("[2].'owner'.'login'", containsString("painsAgains"))
                .body("[2].'owner'.'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/painsAgains"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("[2].'owner'.'type'", containsString("User"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'description'", containsString("实验脚本"))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/painsAgains/my_script"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/painsAgains/my_script/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/painsAgains/my_script/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/painsAgains/my_script/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/painsAgains/my_script/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/painsAgains/my_script/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/painsAgains/my_script/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/painsAgains/my_script/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/painsAgains/my_script/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/painsAgains/my_script/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/painsAgains/my_script/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/painsAgains/my_script/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/painsAgains/my_script/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/painsAgains/my_script/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/painsAgains/my_script/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/painsAgains/my_script/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/painsAgains/my_script/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/painsAgains/my_script/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/painsAgains/my_script/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/painsAgains/my_script/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/painsAgains/my_script/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/painsAgains/my_script/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/painsAgains/my_script/deployments"))
                .body("[2].'created_at'", containsString("2022-11-10T07:33:53Z"))
                .body("[2].'updated_at'", containsString("2022-11-15T09:36:46Z"))
                .body("[2].'pushed_at'", containsString("2023-03-02T03:33:01Z"))
                .body("[2].'git_url'", containsString("git://github.com/painsAgains/my_script.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:painsAgains/my_script.git"))
                .body("[2].'clone_url'", containsString("https://github.com/painsAgains/my_script.git"))
                .body("[2].'svn_url'", containsString("https://github.com/painsAgains/my_script"))
                .body("[2].'homepage'", nullValue())
                .body("[2].'size'", numberMatches(931.0))
                .body("[2].'stargazers_count'", numberMatches(0.0))
                .body("[2].'watchers_count'", numberMatches(0.0))
                .body("[2].'language'", containsString("Python"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(false))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(0.0))
                .body("[2].'license'", nullValue())
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("private"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(0.0))
                .body("[2].'watchers'", numberMatches(0.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(true))
                .body("[2].'permissions'.'maintain'", equalTo(true))
                .body("[2].'permissions'.'push'", equalTo(true))
                .body("[2].'permissions'.'triage'", equalTo(true))
                .body("[2].'permissions'.'pull'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_3.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_3.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")))
            .that(rso, ((Map) ((List) res_3.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "node_id", "name", "full_name", "owner", "private", "html_url", "description", "fork", "url", "archive_url", "assignees_url", "blobs_url", "branches_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "deployments_url", "downloads_url", "events_url", "forks_url", "git_commits_url", "git_refs_url", "git_tags_url", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "languages_url", "merges_url", "milestones_url", "notifications_url", "pulls_url", "releases_url", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "tags_url", "teams_url", "trees_url", "hooks_url")));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"XB8ty3hiEj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/SriV/FdG/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-a-label"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/mLSoJvgo6CNri4X/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/cHi9DZCL2u1/iKJhA/collaborators?affiliation=direct")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/xc0/migrations/1/repos/DPUzr8MDzL_s/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/eNL_YGBPDP6ol/starred")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"FShVC4O21rrSk\", " + 
                    " \"dBQwb_UzjCZ\", " + 
                    " \"jfzxFuQXb_\", " + 
                    " \"R5k682\" " + 
                    " ], " + 
                    " \"userName\": \"BR0Vlg1e1aH\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"bfjEAU_e\", " + 
                    " \"familyName\": \"FmUd9uiP8Ym8DxU3\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"JefO1ix11Q7MhPC\", " + 
                    " \"type\": \"LRPwDX\", " + 
                    " \"primary\": false " + 
                    " } " + 
                    " ], " + 
                    " \"groups\": [ " + 
                    " { " + 
                    " \"value\": \"jpbqseFnv56\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/enterprises/Ok79/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("This Enterprise account does not support membership provisioning."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/following?per_page=928")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'login'", containsString("amimo"))
                .body("[0].'node_id'", containsString("MDQ6VXNlcjQxMDA0ODU="))
                .body("[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/4100485?v=4"))
                .body("[0].'gravatar_id'", containsString(""))
                .body("[0].'url'", containsString("https://api.github.com/users/amimo"))
                .body("[0].'html_url'", containsString("https://github.com/amimo"))
                .body("[0].'followers_url'", containsString("https://api.github.com/users/amimo/followers"))
                .body("[0].'following_url'", containsString("https://api.github.com/users/amimo/following{/other_user}"))
                .body("[0].'gists_url'", containsString("https://api.github.com/users/amimo/gists{/gist_id}"))
                .body("[0].'starred_url'", containsString("https://api.github.com/users/amimo/starred{/owner}{/repo}"))
                .body("[0].'subscriptions_url'", containsString("https://api.github.com/users/amimo/subscriptions"))
                .body("[0].'organizations_url'", containsString("https://api.github.com/users/amimo/orgs"))
                .body("[0].'repos_url'", containsString("https://api.github.com/users/amimo/repos"))
                .body("[0].'events_url'", containsString("https://api.github.com/users/amimo/events{/privacy}"))
                .body("[0].'received_events_url'", containsString("https://api.github.com/users/amimo/received_events"))
                .body("[0].'type'", containsString("User"))
                .body("[0].'site_admin'", equalTo(false))
                .body("[1].'login'", containsString("AML14"))
                .body("[1].'node_id'", containsString("MDQ6VXNlcjE3NjEwNTkz"))
                .body("[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/17610593?v=4"))
                .body("[1].'gravatar_id'", containsString(""))
                .body("[1].'url'", containsString("https://api.github.com/users/AML14"))
                .body("[1].'html_url'", containsString("https://github.com/AML14"))
                .body("[1].'followers_url'", containsString("https://api.github.com/users/AML14/followers"))
                .body("[1].'following_url'", containsString("https://api.github.com/users/AML14/following{/other_user}"))
                .body("[1].'gists_url'", containsString("https://api.github.com/users/AML14/gists{/gist_id}"))
                .body("[1].'starred_url'", containsString("https://api.github.com/users/AML14/starred{/owner}{/repo}"))
                .body("[1].'subscriptions_url'", containsString("https://api.github.com/users/AML14/subscriptions"))
                .body("[1].'organizations_url'", containsString("https://api.github.com/users/AML14/orgs"))
                .body("[1].'repos_url'", containsString("https://api.github.com/users/AML14/repos"))
                .body("[1].'events_url'", containsString("https://api.github.com/users/AML14/events{/privacy}"))
                .body("[1].'received_events_url'", containsString("https://api.github.com/users/AML14/received_events"))
                .body("[1].'type'", containsString("User"))
                .body("[1].'site_admin'", equalTo(false))
                .body("[2].'login'", containsString("Esonhugh"))
                .body("[2].'node_id'", containsString("MDQ6VXNlcjMyNjc3MjQw"))
                .body("[2].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/32677240?v=4"))
                .body("[2].'gravatar_id'", containsString(""))
                .body("[2].'url'", containsString("https://api.github.com/users/Esonhugh"))
                .body("[2].'html_url'", containsString("https://github.com/Esonhugh"))
                .body("[2].'followers_url'", containsString("https://api.github.com/users/Esonhugh/followers"))
                .body("[2].'following_url'", containsString("https://api.github.com/users/Esonhugh/following{/other_user}"))
                .body("[2].'gists_url'", containsString("https://api.github.com/users/Esonhugh/gists{/gist_id}"))
                .body("[2].'starred_url'", containsString("https://api.github.com/users/Esonhugh/starred{/owner}{/repo}"))
                .body("[2].'subscriptions_url'", containsString("https://api.github.com/users/Esonhugh/subscriptions"))
                .body("[2].'organizations_url'", containsString("https://api.github.com/users/Esonhugh/orgs"))
                .body("[2].'repos_url'", containsString("https://api.github.com/users/Esonhugh/repos"))
                .body("[2].'events_url'", containsString("https://api.github.com/users/Esonhugh/events{/privacy}"))
                .body("[2].'received_events_url'", containsString("https://api.github.com/users/Esonhugh/received_events"))
                .body("[2].'type'", containsString("User"))
                .body("[2].'site_admin'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"groups\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/s94rUkhLBCHaWxh/teams/1rFBNip5G57Dlazv/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"access_token\": \"Gra_6Q1J\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/applications/k0/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/a09mwX3KyN/vvR5Ka05CJXDSIVK/commits/eYQrWYgt65/pulls")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/hqUah/teams/Mr9DYQEDlt/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/1yj/comments/Mr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#delete-a-gist-comment"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/KgzFPnKx_/teams/IH/discussions/IVT7gD1FFg1P/comments/PuaHeCTz1f0rG4Q/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"ahFcNLG3dkBeeq\", " + 
                    " \"runners\": [ " + 
                    " 909, " + 
                    " 158, " + 
                    " 313, " + 
                    " 265 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/enterprises/Jhk5EO4jU_D59/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/V0984GU76RmmZFv/teams/4q6YA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-a-team-by-name"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/app/installations/643/suspended")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/events")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'type'", containsString("PushEvent"))
                .body("[0].'actor'.'login'", containsString("Brycee0101"))
                .body("[0].'actor'.'display_login'", containsString("Brycee0101"))
                .body("[0].'actor'.'gravatar_id'", containsString(""))
                .body("[0].'actor'.'url'", containsString("https://api.github.com/users/Brycee0101"))
                .body("[0].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/92190187?"))
                .body("[0].'repo'.'name'", containsString("Brycee0101/CS1552L"))
                .body("[0].'repo'.'url'", containsString("https://api.github.com/repos/Brycee0101/CS1552L"))
                .body("[0].'payload'.'repository_id'", numberMatches(6.11477833E8))
                .body("[0].'payload'.'push_id'", numberMatches(1.3211207629E10))
                .body("[0].'payload'.'size'", numberMatches(1.0))
                .body("[0].'payload'.'distinct_size'", numberMatches(1.0))
                .body("[0].'payload'.'ref'", containsString("refs/heads/master"))
                .body("[0].'payload'.'head'", containsString("4d426c650bb5b4a2f92839a636b42159d9d714e8"))
                .body("[0].'payload'.'before'", containsString("ca4ab7910dc109d0461303ef0a62d1ce2bef4cf2"))
                .body("[0].'payload'.'commits'.size()", equalTo(1))
                .body("[0].'payload'.'commits'[0].'sha'", containsString("4d426c650bb5b4a2f92839a636b42159d9d714e8"))
                .body("[0].'payload'.'commits'[0].'author'.'email'", containsString("brycestephenhalnin1521@gmail.com"))
                .body("[0].'payload'.'commits'[0].'author'.'name'", containsString("Bryce2"))
                .body("[0].'payload'.'commits'[0].'message'", containsString("Add tbl_cart to Database"))
                .body("[0].'payload'.'commits'[0].'distinct'", equalTo(true))
                .body("[0].'payload'.'commits'[0].'url'", containsString("https://api.github.com/repos/Brycee0101/CS1552L/commits/4d426c650bb5b4a2f92839a636b42159d9d714e8"))
                .body("[0].'public'", equalTo(true))
                .body("[0].'created_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[1].'type'", containsString("IssueCommentEvent"))
                .body("[1].'actor'.'login'", containsString("ti-chi-bot"))
                .body("[1].'actor'.'display_login'", containsString("ti-chi-bot"))
                .body("[1].'actor'.'gravatar_id'", containsString(""))
                .body("[1].'actor'.'url'", containsString("https://api.github.com/users/ti-chi-bot"))
                .body("[1].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/71242396?"))
                .body("[1].'repo'.'name'", containsString("pingcap/tiflow"))
                .body("[1].'repo'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow"))
                .body("[1].'payload'.'action'", containsString("created"))
                .body("[1].'payload'.'issue'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407"))
                .body("[1].'payload'.'issue'.'repository_url'", containsString("https://api.github.com/repos/pingcap/tiflow"))
                .body("[1].'payload'.'issue'.'labels_url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407/labels{/name}"))
                .body("[1].'payload'.'issue'.'comments_url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407/comments"))
                .body("[1].'payload'.'issue'.'events_url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407/events"))
                .body("[1].'payload'.'issue'.'html_url'", containsString("https://github.com/pingcap/tiflow/pull/8407"))
                .body("[1].'payload'.'issue'.'node_id'", containsString("PR_kwDODAH3lM5LAsXZ"))
                .body("[1].'payload'.'issue'.'number'", numberMatches(8407.0))
                .body("[1].'payload'.'issue'.'title'", containsString("redo(ticdc): simplify reader initialization"))
                .body("[1].'payload'.'issue'.'user'.'login'", containsString("CharlesCheung96"))
                .body("[1].'payload'.'issue'.'user'.'node_id'", containsString("MDQ6VXNlcjYxNzI2NjQ5"))
                .body("[1].'payload'.'issue'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/61726649?v=4"))
                .body("[1].'payload'.'issue'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'issue'.'user'.'url'", containsString("https://api.github.com/users/CharlesCheung96"))
                .body("[1].'payload'.'issue'.'user'.'html_url'", containsString("https://github.com/CharlesCheung96"))
                .body("[1].'payload'.'issue'.'user'.'followers_url'", containsString("https://api.github.com/users/CharlesCheung96/followers"))
                .body("[1].'payload'.'issue'.'user'.'following_url'", containsString("https://api.github.com/users/CharlesCheung96/following{/other_user}"))
                .body("[1].'payload'.'issue'.'user'.'gists_url'", containsString("https://api.github.com/users/CharlesCheung96/gists{/gist_id}"))
                .body("[1].'payload'.'issue'.'user'.'starred_url'", containsString("https://api.github.com/users/CharlesCheung96/starred{/owner}{/repo}"))
                .body("[1].'payload'.'issue'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/CharlesCheung96/subscriptions"))
                .body("[1].'payload'.'issue'.'user'.'organizations_url'", containsString("https://api.github.com/users/CharlesCheung96/orgs"))
                .body("[1].'payload'.'issue'.'user'.'repos_url'", containsString("https://api.github.com/users/CharlesCheung96/repos"))
                .body("[1].'payload'.'issue'.'user'.'events_url'", containsString("https://api.github.com/users/CharlesCheung96/events{/privacy}"))
                .body("[1].'payload'.'issue'.'user'.'received_events_url'", containsString("https://api.github.com/users/CharlesCheung96/received_events"))
                .body("[1].'payload'.'issue'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'issue'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'.size()", equalTo(5))
                .body("[1].'payload'.'issue'.'labels'[0].'node_id'", containsString("MDU6TGFiZWwyMTk5NzM2ODAy"))
                .body("[1].'payload'.'issue'.'labels'[0].'url'", containsString("https://api.github.com/repos/pingcap/tiflow/labels/status/LGT2"))
                .body("[1].'payload'.'issue'.'labels'[0].'name'", containsString("status/LGT2"))
                .body("[1].'payload'.'issue'.'labels'[0].'color'", containsString("00ff00"))
                .body("[1].'payload'.'issue'.'labels'[0].'default'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'[0].'description'", containsString("Indicates that a PR has LGTM 2."))
                .body("[1].'payload'.'issue'.'labels'[1].'node_id'", containsString("MDU6TGFiZWwyMTk5NzM5OTUy"))
                .body("[1].'payload'.'issue'.'labels'[1].'url'", containsString("https://api.github.com/repos/pingcap/tiflow/labels/status/can-merge"))
                .body("[1].'payload'.'issue'.'labels'[1].'name'", containsString("status/can-merge"))
                .body("[1].'payload'.'issue'.'labels'[1].'color'", containsString("0ffa16"))
                .body("[1].'payload'.'issue'.'labels'[1].'default'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'[1].'description'", containsString("Indicates a PR has been approved by a committer."))
                .body("[1].'payload'.'issue'.'labels'[2].'node_id'", containsString("MDU6TGFiZWwyODUyOTEzODIx"))
                .body("[1].'payload'.'issue'.'labels'[2].'url'", containsString("https://api.github.com/repos/pingcap/tiflow/labels/size/XXL"))
                .body("[1].'payload'.'issue'.'labels'[2].'name'", containsString("size/XXL"))
                .body("[1].'payload'.'issue'.'labels'[2].'color'", containsString("ee0000"))
                .body("[1].'payload'.'issue'.'labels'[2].'default'", equalTo(false))
                .body("[1].'payload'.'issue'.'labels'[2].'description'", containsString("Denotes a PR that changes 1000+ lines, ignoring generated files."))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'payload'.'issue'.'state'", containsString("closed"))
                .body("[1].'payload'.'issue'.'locked'", equalTo(false))
                .body("[1].'payload'.'issue'.'assignee'", nullValue())
                .body("[1].'payload'.'issue'.'assignees'.size()", equalTo(0))
                .body("[1].'payload'.'issue'.'milestone'", nullValue())
                .body("[1].'payload'.'issue'.'comments'", numberMatches(11.0))
                .body("[1].'payload'.'issue'.'created_at'", containsString("2023-03-01T09:18:17Z"))
                .body("[1].'payload'.'issue'.'updated_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[1].'payload'.'issue'.'closed_at'", containsString("2023-04-02T08:22:56Z"))
                .body("[1].'payload'.'issue'.'author_association'", containsString("MEMBER"))
                .body("[1].'payload'.'issue'.'active_lock_reason'", nullValue())
                .body("[1].'payload'.'issue'.'draft'", equalTo(false))
                .body("[1].'payload'.'issue'.'pull_request'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow/pulls/8407"))
                .body("[1].'payload'.'issue'.'pull_request'.'html_url'", containsString("https://github.com/pingcap/tiflow/pull/8407"))
                .body("[1].'payload'.'issue'.'pull_request'.'diff_url'", containsString("https://github.com/pingcap/tiflow/pull/8407.diff"))
                .body("[1].'payload'.'issue'.'pull_request'.'patch_url'", containsString("https://github.com/pingcap/tiflow/pull/8407.patch"))
                .body("[1].'payload'.'issue'.'pull_request'.'merged_at'", containsString("2023-04-02T08:22:56Z"))
                .body("[1].'payload'.'issue'.'body'", containsString("<!--\r\nThank you for contributing to TiFlow! \r\nPlease read MD's [CONTRIBUTING](https://github.com/pingcap/tiflow/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.\r\n-->\r\n\r\n### What problem does this PR solve?\r\n<!--\r\nPlease create an issue first to describe the problem.\r\n\r\nThere MUST be one line starting with \"Issue Number:  \" and \r\nlinking the relevant issues via the \"close\" or \"ref\".\r\n\r\nFor more info, check https://pingcap.github.io/tidb-dev-guide/contribute-to-tidb/contribute-code.html#referring-to-an-issue.\r\n -->\r\n\r\nIssue Number: ref #8056\r\n\r\n### What is changed and how it works?\r\n1. After downloading a file, sort the file before writing it to the local disk to [avoid multiple disk access](https://github.com/pingcap/tiflow/pull/8407/files#diff-702fc02e577e50bc8109e25c72a283bd7cb82f4f9ce76e34aac437be0bedcd59R116).\r\n\r\n### Check List <!--REMOVE the items that are not applicable-->\r\n\r\n#### Tests <!-- At least one of them must be included. -->\r\n\r\n - Unit test\r\n - Integration test\r\n - Manual test (add detailed scripts or steps below)\r\n - No code\r\n\r\n#### Questions <!-- Authors should answer these questions and reviewers should consider these questions. -->\r\n\r\n##### Will it cause performance regression or break compatibility?\r\n\r\n##### Do you need to update user documentation, design documentation or monitoring documentation?\r\n\r\n### Release note <!-- bugfixes or new features need a release note -->\r\n\r\n```release-note\r\n`None`.\r\n```\r\n"))
                .body("[1].'payload'.'issue'.'reactions'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407/reactions"))
                .body("[1].'payload'.'issue'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'issue'.'timeline_url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407/timeline"))
                .body("[1].'payload'.'issue'.'performed_via_github_app'", nullValue())
                .body("[1].'payload'.'issue'.'state_reason'", nullValue())
                .body("[1].'payload'.'comment'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/comments/1498930103"))
                .body("[1].'payload'.'comment'.'html_url'", containsString("https://github.com/pingcap/tiflow/pull/8407#issuecomment-1498930103"))
                .body("[1].'payload'.'comment'.'issue_url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/8407"))
                .body("[1].'payload'.'comment'.'node_id'", containsString("IC_kwDODAH3lM5ZV9u3"))
                .body("[1].'payload'.'comment'.'user'.'login'", containsString("ti-chi-bot"))
                .body("[1].'payload'.'comment'.'user'.'node_id'", containsString("MDQ6VXNlcjcxMjQyMzk2"))
                .body("[1].'payload'.'comment'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/71242396?v=4"))
                .body("[1].'payload'.'comment'.'user'.'gravatar_id'", containsString(""))
                .body("[1].'payload'.'comment'.'user'.'url'", containsString("https://api.github.com/users/ti-chi-bot"))
                .body("[1].'payload'.'comment'.'user'.'html_url'", containsString("https://github.com/ti-chi-bot"))
                .body("[1].'payload'.'comment'.'user'.'followers_url'", containsString("https://api.github.com/users/ti-chi-bot/followers"))
                .body("[1].'payload'.'comment'.'user'.'following_url'", containsString("https://api.github.com/users/ti-chi-bot/following{/other_user}"))
                .body("[1].'payload'.'comment'.'user'.'gists_url'", containsString("https://api.github.com/users/ti-chi-bot/gists{/gist_id}"))
                .body("[1].'payload'.'comment'.'user'.'starred_url'", containsString("https://api.github.com/users/ti-chi-bot/starred{/owner}{/repo}"))
                .body("[1].'payload'.'comment'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/ti-chi-bot/subscriptions"))
                .body("[1].'payload'.'comment'.'user'.'organizations_url'", containsString("https://api.github.com/users/ti-chi-bot/orgs"))
                .body("[1].'payload'.'comment'.'user'.'repos_url'", containsString("https://api.github.com/users/ti-chi-bot/repos"))
                .body("[1].'payload'.'comment'.'user'.'events_url'", containsString("https://api.github.com/users/ti-chi-bot/events{/privacy}"))
                .body("[1].'payload'.'comment'.'user'.'received_events_url'", containsString("https://api.github.com/users/ti-chi-bot/received_events"))
                .body("[1].'payload'.'comment'.'user'.'type'", containsString("User"))
                .body("[1].'payload'.'comment'.'user'.'site_admin'", equalTo(false))
                .body("[1].'payload'.'comment'.'created_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[1].'payload'.'comment'.'updated_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[1].'payload'.'comment'.'author_association'", containsString("MEMBER"))
                .body("[1].'payload'.'comment'.'body'", containsString("@CharlesCheung96: The following test **failed**, say `/retest` to rerun all failed tests or `/retest-required` to rerun all mandatory failed tests:\n\nTest name | Commit | Details | Required | Rerun command\n--- | --- | --- | --- | ---\njenkins-ticdc/verify | 559c003a24c20ffecf4c885c17bca268131d384d | [link](https://do.pingcap.net/jenkins/job/pingcap/job/tiflow/job/ghpr_verify/4017/display/redirect) | true | `/test verify`\n\n[Full PR test history](https://prow.tidb.net/pr-history?org=pingcap&repo=tiflow&pr=8407). [Your PR dashboard](https://prow.tidb.net/pr?query=is%3Apr%20state%3Aopen%20author%3ACharlesCheung96).\n\n<details>\n\nInstructions for interacting with me using PR comments are available [here](https://git.k8s.io/community/contributors/guide/pull-requests.md).  If you have questions or suggestions related to my behavior, please file an issue against the [kubernetes/test-infra](https://github.com/kubernetes/test-infra/issues/new?title=Prow%20issue:) repository. I understand the commands that are listed [here](https://go.k8s.io/bot-commands).\n</details>\n<!-- test report -->"))
                .body("[1].'payload'.'comment'.'reactions'.'url'", containsString("https://api.github.com/repos/pingcap/tiflow/issues/comments/1498930103/reactions"))
                .body("[1].'payload'.'comment'.'reactions'.'total_count'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'+1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'-1'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'laugh'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'hooray'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'confused'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'heart'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'rocket'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'reactions'.'eyes'", numberMatches(0.0))
                .body("[1].'payload'.'comment'.'performed_via_github_app'", nullValue())
                .body("[1].'public'", equalTo(true))
                .body("[1].'created_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[1].'org'.'login'", containsString("pingcap"))
                .body("[1].'org'.'gravatar_id'", containsString(""))
                .body("[1].'org'.'url'", containsString("https://api.github.com/orgs/pingcap"))
                .body("[1].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/11855343?"))
                .body("[2].'type'", containsString("PullRequestReviewEvent"))
                .body("[2].'actor'.'login'", containsString("mattbennett"))
                .body("[2].'actor'.'display_login'", containsString("mattbennett"))
                .body("[2].'actor'.'gravatar_id'", containsString(""))
                .body("[2].'actor'.'url'", containsString("https://api.github.com/users/mattbennett"))
                .body("[2].'actor'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/107611?"))
                .body("[2].'repo'.'name'", containsString("nameko/nameko-grpc"))
                .body("[2].'repo'.'url'", containsString("https://api.github.com/repos/nameko/nameko-grpc"))
                .body("[2].'payload'.'action'", containsString("created"))
                .body("[2].'payload'.'review'.'node_id'", containsString("PRR_kwDOCQaUxc5R8BNu"))
                .body("[2].'payload'.'review'.'user'.'login'", containsString("mattbennett"))
                .body("[2].'payload'.'review'.'user'.'node_id'", containsString("MDQ6VXNlcjEwNzYxMQ=="))
                .body("[2].'payload'.'review'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/107611?v=4"))
                .body("[2].'payload'.'review'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'review'.'user'.'url'", containsString("https://api.github.com/users/mattbennett"))
                .body("[2].'payload'.'review'.'user'.'html_url'", containsString("https://github.com/mattbennett"))
                .body("[2].'payload'.'review'.'user'.'followers_url'", containsString("https://api.github.com/users/mattbennett/followers"))
                .body("[2].'payload'.'review'.'user'.'following_url'", containsString("https://api.github.com/users/mattbennett/following{/other_user}"))
                .body("[2].'payload'.'review'.'user'.'gists_url'", containsString("https://api.github.com/users/mattbennett/gists{/gist_id}"))
                .body("[2].'payload'.'review'.'user'.'starred_url'", containsString("https://api.github.com/users/mattbennett/starred{/owner}{/repo}"))
                .body("[2].'payload'.'review'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/mattbennett/subscriptions"))
                .body("[2].'payload'.'review'.'user'.'organizations_url'", containsString("https://api.github.com/users/mattbennett/orgs"))
                .body("[2].'payload'.'review'.'user'.'repos_url'", containsString("https://api.github.com/users/mattbennett/repos"))
                .body("[2].'payload'.'review'.'user'.'events_url'", containsString("https://api.github.com/users/mattbennett/events{/privacy}"))
                .body("[2].'payload'.'review'.'user'.'received_events_url'", containsString("https://api.github.com/users/mattbennett/received_events"))
                .body("[2].'payload'.'review'.'user'.'type'", containsString("User"))
                .body("[2].'payload'.'review'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'review'.'body'", containsString("Nice catch! Small suggestion on the function names."))
                .body("[2].'payload'.'review'.'commit_id'", containsString("22c75d8780e09dbcd3b24ec153d81ccba8dc7f12"))
                .body("[2].'payload'.'review'.'submitted_at'", containsString("2023-04-06T11:40:38Z"))
                .body("[2].'payload'.'review'.'state'", containsString("changes_requested"))
                .body("[2].'payload'.'review'.'html_url'", containsString("https://github.com/nameko/nameko-grpc/pull/51#pullrequestreview-1374688110"))
                .body("[2].'payload'.'review'.'pull_request_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51"))
                .body("[2].'payload'.'review'.'author_association'", containsString("MEMBER"))
                .body("[2].'payload'.'review'.'_links'.'html'.'href'", containsString("https://github.com/nameko/nameko-grpc/pull/51#pullrequestreview-1374688110"))
                .body("[2].'payload'.'review'.'_links'.'pull_request'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51"))
                .body("[2].'payload'.'pull_request'.'url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51"))
                .body("[2].'payload'.'pull_request'.'node_id'", containsString("PR_kwDOCQaUxc5NfumW"))
                .body("[2].'payload'.'pull_request'.'html_url'", containsString("https://github.com/nameko/nameko-grpc/pull/51"))
                .body("[2].'payload'.'pull_request'.'diff_url'", containsString("https://github.com/nameko/nameko-grpc/pull/51.diff"))
                .body("[2].'payload'.'pull_request'.'patch_url'", containsString("https://github.com/nameko/nameko-grpc/pull/51.patch"))
                .body("[2].'payload'.'pull_request'.'issue_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/51"))
                .body("[2].'payload'.'pull_request'.'number'", numberMatches(51.0))
                .body("[2].'payload'.'pull_request'.'state'", containsString("open"))
                .body("[2].'payload'.'pull_request'.'locked'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'title'", containsString("Escape error message header"))
                .body("[2].'payload'.'pull_request'.'user'.'login'", containsString("stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'user'.'node_id'", containsString("U_kgDOBp5uQw"))
                .body("[2].'payload'.'pull_request'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/111046211?v=4"))
                .body("[2].'payload'.'pull_request'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'pull_request'.'user'.'url'", containsString("https://api.github.com/users/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'user'.'html_url'", containsString("https://github.com/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'user'.'followers_url'", containsString("https://api.github.com/users/stephenc-pace/followers"))
                .body("[2].'payload'.'pull_request'.'user'.'following_url'", containsString("https://api.github.com/users/stephenc-pace/following{/other_user}"))
                .body("[2].'payload'.'pull_request'.'user'.'gists_url'", containsString("https://api.github.com/users/stephenc-pace/gists{/gist_id}"))
                .body("[2].'payload'.'pull_request'.'user'.'starred_url'", containsString("https://api.github.com/users/stephenc-pace/starred{/owner}{/repo}"))
                .body("[2].'payload'.'pull_request'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/stephenc-pace/subscriptions"))
                .body("[2].'payload'.'pull_request'.'user'.'organizations_url'", containsString("https://api.github.com/users/stephenc-pace/orgs"))
                .body("[2].'payload'.'pull_request'.'user'.'repos_url'", containsString("https://api.github.com/users/stephenc-pace/repos"))
                .body("[2].'payload'.'pull_request'.'user'.'events_url'", containsString("https://api.github.com/users/stephenc-pace/events{/privacy}"))
                .body("[2].'payload'.'pull_request'.'user'.'received_events_url'", containsString("https://api.github.com/users/stephenc-pace/received_events"))
                .body("[2].'payload'.'pull_request'.'user'.'type'", containsString("User"))
                .body("[2].'payload'.'pull_request'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'body'", containsString("When a server raises an unhandled exception we catch it as a GrpcError message and pass it along in the grpc-message header. This header field is restricted to mostly printable ASCII characters + Space.\r\n\r\nhttps://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests\r\n\r\nWe need to percent encode this value (and reverse) when returning from client.\r\n\r\nThis doesn't appear to cause any issues with the nameko reference tests but we discovered it in production when returning tracebacks due to new lines. Linkerd fails to decode the header so it sends a GO_AWAY with error code 1 which causes nameko to shutdown the connection immedietly. \r\n\r\nThe load testing GHZ also fails to decode the header when it contains invalid characters (Eg, a new line)\r\n```\r\nError distribution:\r\n  [1]   rpc error: code = Internal desc = invalid header field value for \"grpc-message\" \r\n```"))
                .body("[2].'payload'.'pull_request'.'created_at'", containsString("2023-04-03T14:20:48Z"))
                .body("[2].'payload'.'pull_request'.'updated_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[2].'payload'.'pull_request'.'closed_at'", nullValue())
                .body("[2].'payload'.'pull_request'.'merged_at'", nullValue())
                .body("[2].'payload'.'pull_request'.'merge_commit_sha'", containsString("0832d1c917536a95a3101e302f0c4d82d02cc900"))
                .body("[2].'payload'.'pull_request'.'assignee'", nullValue())
                .body("[2].'payload'.'pull_request'.'assignees'.size()", equalTo(0))
                .body("[2].'payload'.'pull_request'.'requested_reviewers'.size()", equalTo(0))
                .body("[2].'payload'.'pull_request'.'requested_teams'.size()", equalTo(0))
                .body("[2].'payload'.'pull_request'.'labels'.size()", equalTo(0))
                .body("[2].'payload'.'pull_request'.'milestone'", nullValue())
                .body("[2].'payload'.'pull_request'.'draft'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'commits_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51/commits"))
                .body("[2].'payload'.'pull_request'.'review_comments_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51/comments"))
                .body("[2].'payload'.'pull_request'.'review_comment_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'comments_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/51/comments"))
                .body("[2].'payload'.'pull_request'.'statuses_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/statuses/22c75d8780e09dbcd3b24ec153d81ccba8dc7f12"))
                .body("[2].'payload'.'pull_request'.'head'.'label'", containsString("stephenc-pace:fix/invalid-headers"))
                .body("[2].'payload'.'pull_request'.'head'.'ref'", containsString("fix/invalid-headers"))
                .body("[2].'payload'.'pull_request'.'head'.'sha'", containsString("22c75d8780e09dbcd3b24ec153d81ccba8dc7f12"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'login'", containsString("stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'node_id'", containsString("U_kgDOBp5uQw"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/111046211?v=4"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'url'", containsString("https://api.github.com/users/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'html_url'", containsString("https://github.com/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'followers_url'", containsString("https://api.github.com/users/stephenc-pace/followers"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'following_url'", containsString("https://api.github.com/users/stephenc-pace/following{/other_user}"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'gists_url'", containsString("https://api.github.com/users/stephenc-pace/gists{/gist_id}"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'starred_url'", containsString("https://api.github.com/users/stephenc-pace/starred{/owner}{/repo}"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/stephenc-pace/subscriptions"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'organizations_url'", containsString("https://api.github.com/users/stephenc-pace/orgs"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'repos_url'", containsString("https://api.github.com/users/stephenc-pace/repos"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'events_url'", containsString("https://api.github.com/users/stephenc-pace/events{/privacy}"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'received_events_url'", containsString("https://api.github.com/users/stephenc-pace/received_events"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'type'", containsString("User"))
                .body("[2].'payload'.'pull_request'.'head'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'node_id'", containsString("R_kgDOIcBdeg"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'name'", containsString("nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'full_name'", containsString("stephenc-pace/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'private'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'login'", containsString("stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'node_id'", containsString("U_kgDOBp5uQw"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/111046211?v=4"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'url'", containsString("https://api.github.com/users/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'html_url'", containsString("https://github.com/stephenc-pace"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'followers_url'", containsString("https://api.github.com/users/stephenc-pace/followers"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'following_url'", containsString("https://api.github.com/users/stephenc-pace/following{/other_user}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'gists_url'", containsString("https://api.github.com/users/stephenc-pace/gists{/gist_id}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'starred_url'", containsString("https://api.github.com/users/stephenc-pace/starred{/owner}{/repo}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/stephenc-pace/subscriptions"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'organizations_url'", containsString("https://api.github.com/users/stephenc-pace/orgs"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'repos_url'", containsString("https://api.github.com/users/stephenc-pace/repos"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'events_url'", containsString("https://api.github.com/users/stephenc-pace/events{/privacy}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'received_events_url'", containsString("https://api.github.com/users/stephenc-pace/received_events"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'type'", containsString("User"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'owner'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'html_url'", containsString("https://github.com/stephenc-pace/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'description'", containsString("GRPC Extensions for Nameko"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'fork'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'forks_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/forks"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'keys_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/keys{/key_id}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'collaborators_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/collaborators{/collaborator}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'teams_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/teams"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'hooks_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/hooks"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'issue_events_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/issues/events{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'events_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/events"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'assignees_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/assignees{/user}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'branches_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/branches{/branch}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'tags_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/tags"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'blobs_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/git/blobs{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'git_tags_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/git/tags{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'git_refs_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/git/refs{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'trees_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/git/trees{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'statuses_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/statuses/{sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'languages_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/languages"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'stargazers_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/stargazers"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'contributors_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/contributors"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'subscribers_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/subscribers"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'subscription_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/subscription"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'commits_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/commits{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'git_commits_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/git/commits{/sha}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'comments_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'issue_comment_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/issues/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'contents_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/contents/{+path}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'compare_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/compare/{base}...{head}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'merges_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/merges"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'archive_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/{archive_format}{/ref}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'downloads_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/downloads"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'issues_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/issues{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'pulls_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/pulls{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'milestones_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/milestones{/number}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'notifications_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/notifications{?since,all,participating}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'labels_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/labels{/name}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'releases_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/releases{/id}"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'deployments_url'", containsString("https://api.github.com/repos/stephenc-pace/nameko-grpc/deployments"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'created_at'", containsString("2022-11-15T09:39:19Z"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'updated_at'", containsString("2022-11-23T14:55:48Z"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'pushed_at'", containsString("2023-04-03T15:10:38Z"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'git_url'", containsString("git://github.com/stephenc-pace/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'ssh_url'", containsString("git@github.com:stephenc-pace/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'clone_url'", containsString("https://github.com/stephenc-pace/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'svn_url'", containsString("https://github.com/stephenc-pace/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'homepage'", nullValue())
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'size'", numberMatches(398.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'stargazers_count'", numberMatches(0.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'watchers_count'", numberMatches(0.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'language'", containsString("Python"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_issues'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_projects'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_downloads'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_wiki'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_pages'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'has_discussions'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'forks_count'", numberMatches(0.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'mirror_url'", nullValue())
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'archived'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'disabled'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'open_issues_count'", numberMatches(1.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'license'.'key'", containsString("apache-2.0"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'license'.'name'", containsString("Apache License 2.0"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'allow_forking'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'is_template'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'web_commit_signoff_required'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'topics'.size()", equalTo(0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'visibility'", containsString("public"))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'forks'", numberMatches(0.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'open_issues'", numberMatches(1.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'watchers'", numberMatches(0.0))
                .body("[2].'payload'.'pull_request'.'head'.'repo'.'default_branch'", containsString("master"))
                .body("[2].'payload'.'pull_request'.'base'.'label'", containsString("nameko:master"))
                .body("[2].'payload'.'pull_request'.'base'.'ref'", containsString("master"))
                .body("[2].'payload'.'pull_request'.'base'.'sha'", containsString("08c27b2a704d58652d00b2816ab01099e68d9df9"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'login'", containsString("nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjEyNzI4Mzgw"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/12728380?v=4"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'url'", containsString("https://api.github.com/users/nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'html_url'", containsString("https://github.com/nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'followers_url'", containsString("https://api.github.com/users/nameko/followers"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'following_url'", containsString("https://api.github.com/users/nameko/following{/other_user}"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'gists_url'", containsString("https://api.github.com/users/nameko/gists{/gist_id}"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'starred_url'", containsString("https://api.github.com/users/nameko/starred{/owner}{/repo}"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'subscriptions_url'", containsString("https://api.github.com/users/nameko/subscriptions"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'organizations_url'", containsString("https://api.github.com/users/nameko/orgs"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'repos_url'", containsString("https://api.github.com/users/nameko/repos"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'events_url'", containsString("https://api.github.com/users/nameko/events{/privacy}"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'received_events_url'", containsString("https://api.github.com/users/nameko/received_events"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'type'", containsString("Organization"))
                .body("[2].'payload'.'pull_request'.'base'.'user'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'node_id'", containsString("MDEwOlJlcG9zaXRvcnkxNTE0MjYyNDU="))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'name'", containsString("nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'full_name'", containsString("nameko/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'private'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'login'", containsString("nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjEyNzI4Mzgw"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/12728380?v=4"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'gravatar_id'", containsString(""))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'url'", containsString("https://api.github.com/users/nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'html_url'", containsString("https://github.com/nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'followers_url'", containsString("https://api.github.com/users/nameko/followers"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'following_url'", containsString("https://api.github.com/users/nameko/following{/other_user}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'gists_url'", containsString("https://api.github.com/users/nameko/gists{/gist_id}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'starred_url'", containsString("https://api.github.com/users/nameko/starred{/owner}{/repo}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'subscriptions_url'", containsString("https://api.github.com/users/nameko/subscriptions"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'organizations_url'", containsString("https://api.github.com/users/nameko/orgs"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'repos_url'", containsString("https://api.github.com/users/nameko/repos"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'events_url'", containsString("https://api.github.com/users/nameko/events{/privacy}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'received_events_url'", containsString("https://api.github.com/users/nameko/received_events"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'type'", containsString("Organization"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'owner'.'site_admin'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'html_url'", containsString("https://github.com/nameko/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'description'", containsString("GRPC Extensions for Nameko"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'fork'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'url'", containsString("https://api.github.com/repos/nameko/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'forks_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/forks"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'keys_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/keys{/key_id}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'collaborators_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/collaborators{/collaborator}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'teams_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/teams"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'hooks_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/hooks"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'issue_events_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/events{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'events_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/events"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'assignees_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/assignees{/user}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'branches_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/branches{/branch}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'tags_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/tags"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'blobs_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/git/blobs{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'git_tags_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/git/tags{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'git_refs_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/git/refs{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'trees_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/git/trees{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'statuses_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/statuses/{sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'languages_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/languages"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'stargazers_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/stargazers"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'contributors_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/contributors"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'subscribers_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/subscribers"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'subscription_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/subscription"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'commits_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/commits{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'git_commits_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/git/commits{/sha}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'comments_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'issue_comment_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'contents_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/contents/{+path}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'compare_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/compare/{base}...{head}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'merges_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/merges"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'archive_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/{archive_format}{/ref}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'downloads_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/downloads"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'issues_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'pulls_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'milestones_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/milestones{/number}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'notifications_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/notifications{?since,all,participating}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'labels_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/labels{/name}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'releases_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/releases{/id}"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'deployments_url'", containsString("https://api.github.com/repos/nameko/nameko-grpc/deployments"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'created_at'", containsString("2018-10-03T14:29:37Z"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'updated_at'", containsString("2023-01-04T13:43:38Z"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'pushed_at'", containsString("2023-04-03T15:10:41Z"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'git_url'", containsString("git://github.com/nameko/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'ssh_url'", containsString("git@github.com:nameko/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'clone_url'", containsString("https://github.com/nameko/nameko-grpc.git"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'svn_url'", containsString("https://github.com/nameko/nameko-grpc"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'homepage'", nullValue())
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'size'", numberMatches(308.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'stargazers_count'", numberMatches(55.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'watchers_count'", numberMatches(55.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'language'", containsString("Python"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_issues'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_projects'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_downloads'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_wiki'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_pages'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'has_discussions'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'forks_count'", numberMatches(10.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'mirror_url'", nullValue())
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'archived'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'disabled'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'open_issues_count'", numberMatches(12.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'license'.'key'", containsString("apache-2.0"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'license'.'name'", containsString("Apache License 2.0"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'allow_forking'", equalTo(true))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'is_template'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'web_commit_signoff_required'", equalTo(false))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'topics'.size()", equalTo(3))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'topics'", hasItems("grpc", "nameko", "protobuf"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'visibility'", containsString("public"))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'forks'", numberMatches(10.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'open_issues'", numberMatches(12.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'watchers'", numberMatches(55.0))
                .body("[2].'payload'.'pull_request'.'base'.'repo'.'default_branch'", containsString("master"))
                .body("[2].'payload'.'pull_request'.'_links'.'html'.'href'", containsString("https://github.com/nameko/nameko-grpc/pull/51"))
                .body("[2].'payload'.'pull_request'.'_links'.'issue'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/51"))
                .body("[2].'payload'.'pull_request'.'_links'.'comments'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/issues/51/comments"))
                .body("[2].'payload'.'pull_request'.'_links'.'review_comments'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51/comments"))
                .body("[2].'payload'.'pull_request'.'_links'.'review_comment'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/comments{/number}"))
                .body("[2].'payload'.'pull_request'.'_links'.'commits'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/pulls/51/commits"))
                .body("[2].'payload'.'pull_request'.'_links'.'statuses'.'href'", containsString("https://api.github.com/repos/nameko/nameko-grpc/statuses/22c75d8780e09dbcd3b24ec153d81ccba8dc7f12"))
                .body("[2].'payload'.'pull_request'.'author_association'", containsString("CONTRIBUTOR"))
                .body("[2].'payload'.'pull_request'.'auto_merge'", nullValue())
                .body("[2].'payload'.'pull_request'.'active_lock_reason'", nullValue())
                .body("[2].'public'", equalTo(true))
                .body("[2].'created_at'", containsString("2023-04-06T11:40:39Z"))
                .body("[2].'org'.'login'", containsString("nameko"))
                .body("[2].'org'.'gravatar_id'", containsString(""))
                .body("[2].'org'.'url'", containsString("https://api.github.com/orgs/nameko"))
                .body("[2].'org'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/12728380?"))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/hZGHHjLH/lPNYP6q70D/pulls/comments/6N0F4m8BC8u1V/reactions?content=%2B1")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 415).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/issues?" + 
                    "filter=subscribed&" + 
                    "state=open&" + 
                    "sort=comments&" + 
                    "orgs=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/289/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/cBRukYKnQhhBL/sJj_8A/releases/CTw4HL4id45")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/zFFIU9z/0wkf/releases/latest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-the-latest-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/3Do6VnOFhnGQDeL/xbErJugpY2R9/stats/commit_activity")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/teams?per_page=155")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pessefgiDqOTNCx/Fivwg83s_5MzGnJm/actions/workflows/AB4M7pyjugJgvcf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/rate_limit")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resources'.'core'.'limit'", numberMatches(5000.0))
                .body("'resources'.'core'.'used'", numberMatches(909.0))
                .body("'resources'.'core'.'remaining'", numberMatches(4091.0))
                .body("'resources'.'core'.'reset'", numberMatches(1.680784976E9))
                .body("'resources'.'search'.'limit'", numberMatches(30.0))
                .body("'resources'.'search'.'used'", numberMatches(1.0))
                .body("'resources'.'search'.'remaining'", numberMatches(29.0))
                .body("'resources'.'search'.'reset'", numberMatches(1.680781789E9))
                .body("'resources'.'graphql'.'limit'", numberMatches(5000.0))
                .body("'resources'.'graphql'.'used'", numberMatches(0.0))
                .body("'resources'.'graphql'.'remaining'", numberMatches(5000.0))
                .body("'resources'.'graphql'.'reset'", numberMatches(1.680785335E9))
                .body("'resources'.'integration_manifest'.'limit'", numberMatches(5000.0))
                .body("'resources'.'integration_manifest'.'used'", numberMatches(2.0))
                .body("'resources'.'integration_manifest'.'remaining'", numberMatches(4998.0))
                .body("'resources'.'integration_manifest'.'reset'", numberMatches(1.680785004E9))
                .body("'resources'.'source_import'.'limit'", numberMatches(100.0))
                .body("'resources'.'source_import'.'used'", numberMatches(0.0))
                .body("'resources'.'source_import'.'remaining'", numberMatches(100.0))
                .body("'resources'.'source_import'.'reset'", numberMatches(1.680781795E9))
                .body("'resources'.'code_scanning_upload'.'limit'", numberMatches(1000.0))
                .body("'resources'.'code_scanning_upload'.'used'", numberMatches(3.0))
                .body("'resources'.'code_scanning_upload'.'remaining'", numberMatches(997.0))
                .body("'resources'.'code_scanning_upload'.'reset'", numberMatches(1.680784984E9))
                .body("'resources'.'actions_runner_registration'.'limit'", numberMatches(10000.0))
                .body("'resources'.'actions_runner_registration'.'used'", numberMatches(0.0))
                .body("'resources'.'actions_runner_registration'.'remaining'", numberMatches(10000.0))
                .body("'resources'.'actions_runner_registration'.'reset'", numberMatches(1.680785335E9))
                .body("'resources'.'scim'.'limit'", numberMatches(15000.0))
                .body("'resources'.'scim'.'used'", numberMatches(14.0))
                .body("'resources'.'scim'.'remaining'", numberMatches(14986.0))
                .body("'resources'.'scim'.'reset'", numberMatches(1.680784983E9))
                .body("'resources'.'dependency_snapshots'.'limit'", numberMatches(100.0))
                .body("'resources'.'dependency_snapshots'.'used'", numberMatches(0.0))
                .body("'resources'.'dependency_snapshots'.'remaining'", numberMatches(100.0))
                .body("'resources'.'dependency_snapshots'.'reset'", numberMatches(1.680781795E9))
                .body("'rate'.'limit'", numberMatches(5000.0))
                .body("'rate'.'used'", numberMatches(909.0))
                .body("'rate'.'remaining'", numberMatches(4091.0))
                .body("'rate'.'reset'", numberMatches(1.680784976E9));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"github_owned_allowed\": true, " + 
                    " \"verified_allowed\": true, " + 
                    " \"patterns_allowed\": [ " + 
                    " \"dqdTL\", " + 
                    " \"3mEgjNHwD2nwvys\", " + 
                    " \"Kel2iOUP4T\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/4_cD8lFHR0NeWbo/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", containsString("Rcb"))
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", containsString("XEY_FzIWqFmbE"))
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(5.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-04-06T11:48:40Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/8iETTKXu/public_members/13rHY4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/NJx4NnKuPioh7J/repos?" + 
                    "sort=pushed&" + 
                    "direction=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-organization-repositories"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/s/G8cVYQ/actions/runs/Whm68vI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/17/repos/9K6cFbsL/A_Iev0UNJqz1vD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/codes_of_conduct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'key'", containsString("contributor_covenant"))
                .body("[0].'name'", containsString("Contributor Covenant"))
                .body("[0].'html_url'", nullValue())
                .body("[0].'url'", containsString("https://api.github.com/codes_of_conduct/contributor_covenant"))
                .body("[1].'key'", containsString("citizen_code_of_conduct"))
                .body("[1].'name'", containsString("Citizen Code Of Conduct"))
                .body("[1].'html_url'", nullValue())
                .body("[1].'url'", containsString("https://api.github.com/codes_of_conduct/citizen_code_of_conduct"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/users/TR4/received_events")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/bmeLLkN_C/OeT9W6CAQRNm/invitations/D7APi1qnzmVJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/mCxmJUI/outside_collaborators/1BbVcsyX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/1zSKhoDIaq/orgs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/2n2TYIMBJEpP/g7/pulls/1/reviews/_K5qVLs/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/PPFDoT4n/actions/runner-groups/z64LbUXkIKxzoZo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/EPShOz_vWUV7gqn/1/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-repository-subscription"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Mu0BqSfuundzg/yL7SEbsEArVl7t/code-scanning/analyses/341")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/4SnUmddRIBp1/actions/secrets/z01MFNl7Osa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/HkVqNccDM/7DMuo4FgN7KRtU/actions/secrets/c_kawNmhowwZ_9mC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repositories/5/environments/1/secrets/afgOUHGh0Sr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/eq15/KspVfY/check-suites/W6euxnIDk/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/jF0kKVLo9Zw/6EeaMFtZNsA2L/branches/W3MmSBTi2Wnpt/protection/required_signatures")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/9UgHySeonOKoKV/zckRCCGQ/pulls/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/MGNjoSJUj_o0/LGFsreax_pNE/pulls/E9/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/nRA0xG0SDX/YT12hm/check-runs/nVnPo/annotations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-run-annotations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'login'", containsString("painsAgains"))
                .body("'node_id'", containsString("MDQ6VXNlcjQ5NjA3ODAz"))
                .body("'avatar_url'", containsString("https://avatars.githubusercontent.com/u/49607803?v=4"))
                .body("'gravatar_id'", containsString(""))
                .body("'url'", containsString("https://api.github.com/users/painsAgains"))
                .body("'html_url'", containsString("https://github.com/painsAgains"))
                .body("'followers_url'", containsString("https://api.github.com/users/painsAgains/followers"))
                .body("'following_url'", containsString("https://api.github.com/users/painsAgains/following{/other_user}"))
                .body("'gists_url'", containsString("https://api.github.com/users/painsAgains/gists{/gist_id}"))
                .body("'starred_url'", containsString("https://api.github.com/users/painsAgains/starred{/owner}{/repo}"))
                .body("'subscriptions_url'", containsString("https://api.github.com/users/painsAgains/subscriptions"))
                .body("'organizations_url'", containsString("https://api.github.com/users/painsAgains/orgs"))
                .body("'repos_url'", containsString("https://api.github.com/users/painsAgains/repos"))
                .body("'events_url'", containsString("https://api.github.com/users/painsAgains/events{/privacy}"))
                .body("'received_events_url'", containsString("https://api.github.com/users/painsAgains/received_events"))
                .body("'type'", containsString("User"))
                .body("'site_admin'", equalTo(false))
                .body("'name'", nullValue())
                .body("'company'", nullValue())
                .body("'blog'", containsString(""))
                .body("'location'", nullValue())
                .body("'email'", nullValue())
                .body("'hireable'", nullValue())
                .body("'bio'", nullValue())
                .body("'twitter_username'", nullValue())
                .body("'public_repos'", numberMatches(6.0))
                .body("'public_gists'", numberMatches(0.0))
                .body("'followers'", numberMatches(0.0))
                .body("'following'", numberMatches(4.0))
                .body("'created_at'", containsString("2019-04-14T08:35:15Z"))
                .body("'updated_at'", containsString("2023-03-09T12:33:33Z"))
                .body("'private_gists'", numberMatches(0.0))
                .body("'total_private_repos'", numberMatches(2.0))
                .body("'owned_private_repos'", numberMatches(2.0))
                .body("'disk_usage'", numberMatches(23106.0))
                .body("'collaborators'", numberMatches(0.0))
                .body("'two_factor_authentication'", equalTo(false))
                .body("'plan'.'name'", containsString("free"))
                .body("'plan'.'space'", numberMatches(9.76562499E8))
                .body("'plan'.'collaborators'", numberMatches(0.0))
                .body("'plan'.'private_repos'", numberMatches(10000.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/263?exclude=W2BG&exclude=2rYvP4pLD&exclude=_sJltn90HERM&exclude=keF5FGVLTen&exclude=Ew29")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#get-a-user-migration-status"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/app/installations/635/suspended")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/aLVENO/m8fJ_73ZigN1N/commits/IQh_OT3mNvR1XzGK/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#create-a-commit-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/80/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/organizations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(30))
                .body("[0].'login'", containsString("errfree"))
                .body("[0].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjQ0"))
                .body("[0].'url'", containsString("https://api.github.com/orgs/errfree"))
                .body("[0].'repos_url'", containsString("https://api.github.com/orgs/errfree/repos"))
                .body("[0].'events_url'", containsString("https://api.github.com/orgs/errfree/events"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/orgs/errfree/hooks"))
                .body("[0].'issues_url'", containsString("https://api.github.com/orgs/errfree/issues"))
                .body("[0].'members_url'", containsString("https://api.github.com/orgs/errfree/members{/member}"))
                .body("[0].'public_members_url'", containsString("https://api.github.com/orgs/errfree/public_members{/member}"))
                .body("[0].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/44?v=4"))
                .body("[0].'description'", nullValue())
                .body("[1].'login'", containsString("engineyard"))
                .body("[1].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjgx"))
                .body("[1].'url'", containsString("https://api.github.com/orgs/engineyard"))
                .body("[1].'repos_url'", containsString("https://api.github.com/orgs/engineyard/repos"))
                .body("[1].'events_url'", containsString("https://api.github.com/orgs/engineyard/events"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/orgs/engineyard/hooks"))
                .body("[1].'issues_url'", containsString("https://api.github.com/orgs/engineyard/issues"))
                .body("[1].'members_url'", containsString("https://api.github.com/orgs/engineyard/members{/member}"))
                .body("[1].'public_members_url'", containsString("https://api.github.com/orgs/engineyard/public_members{/member}"))
                .body("[1].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/81?v=4"))
                .body("[1].'description'", containsString(""))
                .body("[2].'login'", containsString("ministrycentered"))
                .body("[2].'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjExOQ=="))
                .body("[2].'url'", containsString("https://api.github.com/orgs/ministrycentered"))
                .body("[2].'repos_url'", containsString("https://api.github.com/orgs/ministrycentered/repos"))
                .body("[2].'events_url'", containsString("https://api.github.com/orgs/ministrycentered/events"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/orgs/ministrycentered/hooks"))
                .body("[2].'issues_url'", containsString("https://api.github.com/orgs/ministrycentered/issues"))
                .body("[2].'members_url'", containsString("https://api.github.com/orgs/ministrycentered/members{/member}"))
                .body("[2].'public_members_url'", containsString("https://api.github.com/orgs/ministrycentered/public_members{/member}"))
                .body("[2].'avatar_url'", containsString("https://avatars.githubusercontent.com/u/119?v=4"))
                .body("[2].'description'", containsString(""))
                ; // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/ZflXCEHR/Groups/K8FbY2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/gtaF2CdsHTw290HT")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dg0W/WERQrp0Ry97sl7/pages/builds/latest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-latest-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/maven/hFg4oUEqoU8S6PhY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/ISr9APIkIFRmiB/tJrQmBl7G/labels/97DuZngX63")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/695/discussions/Yb/comments/ON774rLmi555vzkN/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/cJZhdps/14iuqi/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/starred/Rs/nhHdVXEFij8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/starred")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'node_id'", containsString("R_kgDOGFy_-Q"))
                .body("[0].'name'", containsString("golang-interview"))
                .body("[0].'full_name'", containsString("iswbm/golang-interview"))
                .body("[0].'private'", equalTo(false))
                .body("[0].'owner'.'login'", containsString("iswbm"))
                .body("[0].'owner'.'node_id'", containsString("MDQ6VXNlcjIyMzExNDE5"))
                .body("[0].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/22311419?v=4"))
                .body("[0].'owner'.'gravatar_id'", containsString(""))
                .body("[0].'owner'.'url'", containsString("https://api.github.com/users/iswbm"))
                .body("[0].'owner'.'html_url'", containsString("https://github.com/iswbm"))
                .body("[0].'owner'.'followers_url'", containsString("https://api.github.com/users/iswbm/followers"))
                .body("[0].'owner'.'following_url'", containsString("https://api.github.com/users/iswbm/following{/other_user}"))
                .body("[0].'owner'.'gists_url'", containsString("https://api.github.com/users/iswbm/gists{/gist_id}"))
                .body("[0].'owner'.'starred_url'", containsString("https://api.github.com/users/iswbm/starred{/owner}{/repo}"))
                .body("[0].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/iswbm/subscriptions"))
                .body("[0].'owner'.'organizations_url'", containsString("https://api.github.com/users/iswbm/orgs"))
                .body("[0].'owner'.'repos_url'", containsString("https://api.github.com/users/iswbm/repos"))
                .body("[0].'owner'.'events_url'", containsString("https://api.github.com/users/iswbm/events{/privacy}"))
                .body("[0].'owner'.'received_events_url'", containsString("https://api.github.com/users/iswbm/received_events"))
                .body("[0].'owner'.'type'", containsString("User"))
                .body("[0].'owner'.'site_admin'", equalTo(false))
                .body("[0].'html_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'description'", containsString("Go语言面试题集"))
                .body("[0].'fork'", equalTo(false))
                .body("[0].'url'", containsString("https://api.github.com/repos/iswbm/golang-interview"))
                .body("[0].'forks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/forks"))
                .body("[0].'keys_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/keys{/key_id}"))
                .body("[0].'collaborators_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/collaborators{/collaborator}"))
                .body("[0].'teams_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/teams"))
                .body("[0].'hooks_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/hooks"))
                .body("[0].'issue_events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/events{/number}"))
                .body("[0].'events_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/events"))
                .body("[0].'assignees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/assignees{/user}"))
                .body("[0].'branches_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/branches{/branch}"))
                .body("[0].'tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/tags"))
                .body("[0].'blobs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/blobs{/sha}"))
                .body("[0].'git_tags_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/tags{/sha}"))
                .body("[0].'git_refs_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/refs{/sha}"))
                .body("[0].'trees_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/trees{/sha}"))
                .body("[0].'statuses_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/statuses/{sha}"))
                .body("[0].'languages_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/languages"))
                .body("[0].'stargazers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/stargazers"))
                .body("[0].'contributors_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contributors"))
                .body("[0].'subscribers_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscribers"))
                .body("[0].'subscription_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/subscription"))
                .body("[0].'commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/commits{/sha}"))
                .body("[0].'git_commits_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/git/commits{/sha}"))
                .body("[0].'comments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/comments{/number}"))
                .body("[0].'issue_comment_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues/comments{/number}"))
                .body("[0].'contents_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/contents/{+path}"))
                .body("[0].'compare_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/compare/{base}...{head}"))
                .body("[0].'merges_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/merges"))
                .body("[0].'archive_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/{archive_format}{/ref}"))
                .body("[0].'downloads_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/downloads"))
                .body("[0].'issues_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/issues{/number}"))
                .body("[0].'pulls_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/pulls{/number}"))
                .body("[0].'milestones_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/milestones{/number}"))
                .body("[0].'notifications_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/notifications{?since,all,participating}"))
                .body("[0].'labels_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/labels{/name}"))
                .body("[0].'releases_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/releases{/id}"))
                .body("[0].'deployments_url'", containsString("https://api.github.com/repos/iswbm/golang-interview/deployments"))
                .body("[0].'created_at'", containsString("2021-09-21T07:47:39Z"))
                .body("[0].'updated_at'", containsString("2023-04-06T08:36:21Z"))
                .body("[0].'pushed_at'", containsString("2022-03-15T11:50:16Z"))
                .body("[0].'git_url'", containsString("git://github.com/iswbm/golang-interview.git"))
                .body("[0].'ssh_url'", containsString("git@github.com:iswbm/golang-interview.git"))
                .body("[0].'clone_url'", containsString("https://github.com/iswbm/golang-interview.git"))
                .body("[0].'svn_url'", containsString("https://github.com/iswbm/golang-interview"))
                .body("[0].'homepage'", nullValue())
                .body("[0].'size'", numberMatches(1282.0))
                .body("[0].'stargazers_count'", numberMatches(171.0))
                .body("[0].'watchers_count'", numberMatches(171.0))
                .body("[0].'language'", containsString("Python"))
                .body("[0].'has_issues'", equalTo(true))
                .body("[0].'has_projects'", equalTo(true))
                .body("[0].'has_downloads'", equalTo(true))
                .body("[0].'has_wiki'", equalTo(true))
                .body("[0].'has_pages'", equalTo(false))
                .body("[0].'has_discussions'", equalTo(false))
                .body("[0].'forks_count'", numberMatches(48.0))
                .body("[0].'mirror_url'", nullValue())
                .body("[0].'archived'", equalTo(false))
                .body("[0].'disabled'", equalTo(false))
                .body("[0].'open_issues_count'", numberMatches(4.0))
                .body("[0].'license'", nullValue())
                .body("[0].'allow_forking'", equalTo(true))
                .body("[0].'is_template'", equalTo(false))
                .body("[0].'web_commit_signoff_required'", equalTo(false))
                .body("[0].'topics'.size()", equalTo(0))
                .body("[0].'visibility'", containsString("public"))
                .body("[0].'forks'", numberMatches(48.0))
                .body("[0].'open_issues'", numberMatches(4.0))
                .body("[0].'watchers'", numberMatches(171.0))
                .body("[0].'default_branch'", containsString("main"))
                .body("[0].'permissions'.'admin'", equalTo(false))
                .body("[0].'permissions'.'maintain'", equalTo(false))
                .body("[0].'permissions'.'push'", equalTo(false))
                .body("[0].'permissions'.'triage'", equalTo(false))
                .body("[0].'permissions'.'pull'", equalTo(true))
                .body("[1].'node_id'", containsString("R_kgDOIXlNqw"))
                .body("[1].'name'", containsString("scalpel"))
                .body("[1].'full_name'", containsString("StarCrossPortal/scalpel"))
                .body("[1].'private'", equalTo(false))
                .body("[1].'owner'.'login'", containsString("StarCrossPortal"))
                .body("[1].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjgyMDg0NTA4"))
                .body("[1].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/82084508?v=4"))
                .body("[1].'owner'.'gravatar_id'", containsString(""))
                .body("[1].'owner'.'url'", containsString("https://api.github.com/users/StarCrossPortal"))
                .body("[1].'owner'.'html_url'", containsString("https://github.com/StarCrossPortal"))
                .body("[1].'owner'.'followers_url'", containsString("https://api.github.com/users/StarCrossPortal/followers"))
                .body("[1].'owner'.'following_url'", containsString("https://api.github.com/users/StarCrossPortal/following{/other_user}"))
                .body("[1].'owner'.'gists_url'", containsString("https://api.github.com/users/StarCrossPortal/gists{/gist_id}"))
                .body("[1].'owner'.'starred_url'", containsString("https://api.github.com/users/StarCrossPortal/starred{/owner}{/repo}"))
                .body("[1].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/StarCrossPortal/subscriptions"))
                .body("[1].'owner'.'organizations_url'", containsString("https://api.github.com/users/StarCrossPortal/orgs"))
                .body("[1].'owner'.'repos_url'", containsString("https://api.github.com/users/StarCrossPortal/repos"))
                .body("[1].'owner'.'events_url'", containsString("https://api.github.com/users/StarCrossPortal/events{/privacy}"))
                .body("[1].'owner'.'received_events_url'", containsString("https://api.github.com/users/StarCrossPortal/received_events"))
                .body("[1].'owner'.'type'", containsString("Organization"))
                .body("[1].'owner'.'site_admin'", equalTo(false))
                .body("[1].'html_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'description'", containsString("scalpel是一款命令行漏洞扫描工具，支持深度参数注入，拥有一个强大的数据解析和变异算法，可以将常见的数据格式（json, xml, form等）解析为树结构，然后根据poc中的规则，对树进行变异，包括对叶子节点和树结构 的变异。变异完成之后，将树结构还原为原始的数据格式。 原理：https://mp.weixin.qq.com/s/U_llBwC05vb84U9wb8NZog"))
                .body("[1].'fork'", equalTo(false))
                .body("[1].'url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel"))
                .body("[1].'forks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/forks"))
                .body("[1].'keys_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/keys{/key_id}"))
                .body("[1].'collaborators_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/collaborators{/collaborator}"))
                .body("[1].'teams_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/teams"))
                .body("[1].'hooks_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/hooks"))
                .body("[1].'issue_events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/events{/number}"))
                .body("[1].'events_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/events"))
                .body("[1].'assignees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/assignees{/user}"))
                .body("[1].'branches_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/branches{/branch}"))
                .body("[1].'tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/tags"))
                .body("[1].'blobs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/blobs{/sha}"))
                .body("[1].'git_tags_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/tags{/sha}"))
                .body("[1].'git_refs_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/refs{/sha}"))
                .body("[1].'trees_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/trees{/sha}"))
                .body("[1].'statuses_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/statuses/{sha}"))
                .body("[1].'languages_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/languages"))
                .body("[1].'stargazers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/stargazers"))
                .body("[1].'contributors_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contributors"))
                .body("[1].'subscribers_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscribers"))
                .body("[1].'subscription_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/subscription"))
                .body("[1].'commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/commits{/sha}"))
                .body("[1].'git_commits_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/git/commits{/sha}"))
                .body("[1].'comments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/comments{/number}"))
                .body("[1].'issue_comment_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues/comments{/number}"))
                .body("[1].'contents_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/contents/{+path}"))
                .body("[1].'compare_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/compare/{base}...{head}"))
                .body("[1].'merges_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/merges"))
                .body("[1].'archive_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/{archive_format}{/ref}"))
                .body("[1].'downloads_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/downloads"))
                .body("[1].'issues_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/issues{/number}"))
                .body("[1].'pulls_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/pulls{/number}"))
                .body("[1].'milestones_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/milestones{/number}"))
                .body("[1].'notifications_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/notifications{?since,all,participating}"))
                .body("[1].'labels_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/labels{/name}"))
                .body("[1].'releases_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/releases{/id}"))
                .body("[1].'deployments_url'", containsString("https://api.github.com/repos/StarCrossPortal/scalpel/deployments"))
                .body("[1].'created_at'", containsString("2022-11-04T03:19:29Z"))
                .body("[1].'updated_at'", containsString("2023-04-03T10:44:24Z"))
                .body("[1].'pushed_at'", containsString("2023-02-28T06:35:01Z"))
                .body("[1].'git_url'", containsString("git://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'ssh_url'", containsString("git@github.com:StarCrossPortal/scalpel.git"))
                .body("[1].'clone_url'", containsString("https://github.com/StarCrossPortal/scalpel.git"))
                .body("[1].'svn_url'", containsString("https://github.com/StarCrossPortal/scalpel"))
                .body("[1].'homepage'", containsString(""))
                .body("[1].'size'", numberMatches(2948.0))
                .body("[1].'stargazers_count'", numberMatches(616.0))
                .body("[1].'watchers_count'", numberMatches(616.0))
                .body("[1].'language'", nullValue())
                .body("[1].'has_issues'", equalTo(true))
                .body("[1].'has_projects'", equalTo(true))
                .body("[1].'has_downloads'", equalTo(true))
                .body("[1].'has_wiki'", equalTo(true))
                .body("[1].'has_pages'", equalTo(false))
                .body("[1].'has_discussions'", equalTo(false))
                .body("[1].'forks_count'", numberMatches(72.0))
                .body("[1].'mirror_url'", nullValue())
                .body("[1].'archived'", equalTo(false))
                .body("[1].'disabled'", equalTo(false))
                .body("[1].'open_issues_count'", numberMatches(12.0))
                .body("[1].'license'", nullValue())
                .body("[1].'allow_forking'", equalTo(true))
                .body("[1].'is_template'", equalTo(false))
                .body("[1].'web_commit_signoff_required'", equalTo(false))
                .body("[1].'topics'.size()", equalTo(7))
                .body("[1].'topics'", hasItems("cve", "exploits", "fuzzing", "poc", "scanner", "vulnerabilities", "vulnerability"))
                .body("[1].'visibility'", containsString("public"))
                .body("[1].'forks'", numberMatches(72.0))
                .body("[1].'open_issues'", numberMatches(12.0))
                .body("[1].'watchers'", numberMatches(616.0))
                .body("[1].'default_branch'", containsString("master"))
                .body("[1].'permissions'.'admin'", equalTo(false))
                .body("[1].'permissions'.'maintain'", equalTo(false))
                .body("[1].'permissions'.'push'", equalTo(false))
                .body("[1].'permissions'.'triage'", equalTo(false))
                .body("[1].'permissions'.'pull'", equalTo(true))
                .body("[2].'node_id'", containsString("R_kgDOGlB2bg"))
                .body("[2].'name'", containsString("RestTestGen"))
                .body("[2].'full_name'", containsString("SeUniVr/RestTestGen"))
                .body("[2].'private'", equalTo(false))
                .body("[2].'owner'.'login'", containsString("SeUniVr"))
                .body("[2].'owner'.'node_id'", containsString("MDEyOk9yZ2FuaXphdGlvbjc1MDI3NzY0"))
                .body("[2].'owner'.'avatar_url'", containsString("https://avatars.githubusercontent.com/u/75027764?v=4"))
                .body("[2].'owner'.'gravatar_id'", containsString(""))
                .body("[2].'owner'.'url'", containsString("https://api.github.com/users/SeUniVr"))
                .body("[2].'owner'.'html_url'", containsString("https://github.com/SeUniVr"))
                .body("[2].'owner'.'followers_url'", containsString("https://api.github.com/users/SeUniVr/followers"))
                .body("[2].'owner'.'following_url'", containsString("https://api.github.com/users/SeUniVr/following{/other_user}"))
                .body("[2].'owner'.'gists_url'", containsString("https://api.github.com/users/SeUniVr/gists{/gist_id}"))
                .body("[2].'owner'.'starred_url'", containsString("https://api.github.com/users/SeUniVr/starred{/owner}{/repo}"))
                .body("[2].'owner'.'subscriptions_url'", containsString("https://api.github.com/users/SeUniVr/subscriptions"))
                .body("[2].'owner'.'organizations_url'", containsString("https://api.github.com/users/SeUniVr/orgs"))
                .body("[2].'owner'.'repos_url'", containsString("https://api.github.com/users/SeUniVr/repos"))
                .body("[2].'owner'.'events_url'", containsString("https://api.github.com/users/SeUniVr/events{/privacy}"))
                .body("[2].'owner'.'received_events_url'", containsString("https://api.github.com/users/SeUniVr/received_events"))
                .body("[2].'owner'.'type'", containsString("Organization"))
                .body("[2].'owner'.'site_admin'", equalTo(false))
                .body("[2].'html_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'description'", containsString("A framework for automated black-box testing of RESTful APIs."))
                .body("[2].'fork'", equalTo(false))
                .body("[2].'url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen"))
                .body("[2].'forks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/forks"))
                .body("[2].'keys_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/keys{/key_id}"))
                .body("[2].'collaborators_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/collaborators{/collaborator}"))
                .body("[2].'teams_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/teams"))
                .body("[2].'hooks_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/hooks"))
                .body("[2].'issue_events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/events{/number}"))
                .body("[2].'events_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/events"))
                .body("[2].'assignees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/assignees{/user}"))
                .body("[2].'branches_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/branches{/branch}"))
                .body("[2].'tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/tags"))
                .body("[2].'blobs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/blobs{/sha}"))
                .body("[2].'git_tags_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/tags{/sha}"))
                .body("[2].'git_refs_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/refs{/sha}"))
                .body("[2].'trees_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/trees{/sha}"))
                .body("[2].'statuses_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/statuses/{sha}"))
                .body("[2].'languages_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/languages"))
                .body("[2].'stargazers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/stargazers"))
                .body("[2].'contributors_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contributors"))
                .body("[2].'subscribers_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscribers"))
                .body("[2].'subscription_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/subscription"))
                .body("[2].'commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/commits{/sha}"))
                .body("[2].'git_commits_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/git/commits{/sha}"))
                .body("[2].'comments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/comments{/number}"))
                .body("[2].'issue_comment_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues/comments{/number}"))
                .body("[2].'contents_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/contents/{+path}"))
                .body("[2].'compare_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/compare/{base}...{head}"))
                .body("[2].'merges_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/merges"))
                .body("[2].'archive_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/{archive_format}{/ref}"))
                .body("[2].'downloads_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/downloads"))
                .body("[2].'issues_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/issues{/number}"))
                .body("[2].'pulls_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/pulls{/number}"))
                .body("[2].'milestones_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/milestones{/number}"))
                .body("[2].'notifications_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/notifications{?since,all,participating}"))
                .body("[2].'labels_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/labels{/name}"))
                .body("[2].'releases_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/releases{/id}"))
                .body("[2].'deployments_url'", containsString("https://api.github.com/repos/SeUniVr/RestTestGen/deployments"))
                .body("[2].'created_at'", containsString("2021-12-24T14:04:59Z"))
                .body("[2].'updated_at'", containsString("2023-03-26T04:11:59Z"))
                .body("[2].'pushed_at'", containsString("2023-02-20T10:05:14Z"))
                .body("[2].'git_url'", containsString("git://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'ssh_url'", containsString("git@github.com:SeUniVr/RestTestGen.git"))
                .body("[2].'clone_url'", containsString("https://github.com/SeUniVr/RestTestGen.git"))
                .body("[2].'svn_url'", containsString("https://github.com/SeUniVr/RestTestGen"))
                .body("[2].'homepage'", containsString(""))
                .body("[2].'size'", numberMatches(10313.0))
                .body("[2].'stargazers_count'", numberMatches(10.0))
                .body("[2].'watchers_count'", numberMatches(10.0))
                .body("[2].'language'", containsString("Java"))
                .body("[2].'has_issues'", equalTo(true))
                .body("[2].'has_projects'", equalTo(true))
                .body("[2].'has_downloads'", equalTo(true))
                .body("[2].'has_wiki'", equalTo(true))
                .body("[2].'has_pages'", equalTo(false))
                .body("[2].'has_discussions'", equalTo(false))
                .body("[2].'forks_count'", numberMatches(0.0))
                .body("[2].'mirror_url'", nullValue())
                .body("[2].'archived'", equalTo(false))
                .body("[2].'disabled'", equalTo(false))
                .body("[2].'open_issues_count'", numberMatches(1.0))
                .body("[2].'license'.'key'", containsString("apache-2.0"))
                .body("[2].'license'.'name'", containsString("Apache License 2.0"))
                .body("[2].'license'.'spdx_id'", containsString("Apache-2.0"))
                .body("[2].'license'.'url'", containsString("https://api.github.com/licenses/apache-2.0"))
                .body("[2].'license'.'node_id'", containsString("MDc6TGljZW5zZTI="))
                .body("[2].'allow_forking'", equalTo(true))
                .body("[2].'is_template'", equalTo(false))
                .body("[2].'web_commit_signoff_required'", equalTo(false))
                .body("[2].'topics'.size()", equalTo(0))
                .body("[2].'visibility'", containsString("public"))
                .body("[2].'forks'", numberMatches(0.0))
                .body("[2].'open_issues'", numberMatches(1.0))
                .body("[2].'watchers'", numberMatches(10.0))
                .body("[2].'default_branch'", containsString("main"))
                .body("[2].'permissions'.'admin'", equalTo(false))
                .body("[2].'permissions'.'maintain'", equalTo(false))
                .body("[2].'permissions'.'push'", equalTo(false))
                .body("[2].'permissions'.'triage'", equalTo(false))
                .body("[2].'permissions'.'pull'", equalTo(true))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(5)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(6)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(7)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(8)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(9)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(10)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(11)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(12)).keySet().containsAll(Arrays.asList("starred_at", "repo")))
            .that(rso, ((Map) ((List) res_4.extract().response().jsonPath().getJsonObject("")).get(13)).keySet().containsAll(Arrays.asList("starred_at", "repo")));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Ee7cgNeeHzA/v5vVljTijgV1G16/stats/punch_card")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/uQCwoAZsQ/actions/permissions/organizations/MhMRrAoQYvKVebf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/following/5x4jf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#unfollow-a-user"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/4jWTFh91mX7MUD/kaEX/traffic/views")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-page-views"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/yb568s/qcyVa0HK6QD/actions/workflows/KMnfoNqNVJnhN/enable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/KtJc2cV1/ykWbmI5Qj5/deployments/TUPAuAnbK/statuses/410")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/_ZFYBLMN1p/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/_rHw4I_YHwz8IK/0Bm9WBDlMTYZR/secret-scanning/alerts/6NKM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/following/z")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/K0raYnOk/_Wo/pages/builds/latest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-latest-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/uzHnRGTVp3/h5BgLMoC/readme")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-repository-readme"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/qppysXh/NlYQ5sd/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/gpg_keys/465")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/blocks/PICD")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"add_scopes\": [ " + 
                    " \"qPJ1O\", " + 
                    " \"sYU0s\", " + 
                    " \"sDbTQGkWAjL\" " + 
                    " ], " + 
                    " \"remove_scopes\": [ " + 
                    " \"THm\", " + 
                    " \"FypAc1VTMe1b3FsU\", " + 
                    " \"4pmPOvj2MQ\", " + 
                    " \"Z_by\", " + 
                    " \"olxTI4qI\" " + 
                    " ], " + 
                    " \"note\": \"Utc6BFo0QDGF\", " + 
                    " \"fingerprint\": \"iT5RJ\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/authorizations/285")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/3ke9/wN4k0RO9/branches/KMFSEDHw45LLU/protection/restrictions/apps")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"N1Q\", " + 
                    " \"head_sha\": \"Ovml\", " + 
                    " \"details_url\": \"AEzJSZRNz\", " + 
                    " \"external_id\": \"W1V\", " + 
                    " \"status\": \"queued\", " + 
                    " \"completed_at\": \"Hn\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/HISohrzi2sRD/rKN7LsH/check-runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/KW3kckpxPFQcQ/fCckr19kHFn/issues/Ns5ebP5aXYOjrc5/events")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8/IjdT/releases/tags/gAK7HP3bt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"contexts\": [ " + 
                    " \"yoeUjynHtyKrSb\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/nI0K4Dh_h0cOZ/cQka/branches/06seOAO/protection/required_status_checks/contexts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/labels?" + 
                    "repository_id=933&" + 
                    "q=ZLtr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/search#search-labels"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/scim/v2/organizations/RK0fv3dygQVm5/Users/ufH4kek9I7uJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/repos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Body should be a JSON object"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/825/discussions/YwE_c/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/j5sJ/cDc/actions/runners/MRP8U")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/lGwvvoo/Al/actions/runners/LC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/sERbJvQy/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [], " + 
                    " \"displayName\": \"tNqZfWLtyBmI\", " + 
                    " \"members\": [ " + 
                    " { " + 
                    " \"value\": \"_K1IJX\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/enterprises/tHPb/Groups")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("This Enterprise account does not support membership provisioning."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/3OVNEU/eKl/branches/B5f7/protection/restrictions/apps")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/cO/4sl/commits/cD1XcSLd/branches-where-head")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-branches-for-head-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415, 422).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BvC9F3wm2uc93/C0YJjXiUwS7qn3/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 301, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"repository_ids\": [ " + 
                    " 28, " + 
                    " 6, " + 
                    " 795 " + 
                    " ], " + 
                    " \"permissions\": { " + 
                    " \"checks\": \"read\", " + 
                    " \"content_references\": \"write\", " + 
                    " \"contents\": \"EVOMASTER\", " + 
                    " \"deployments\": \"EVOMASTER\", " + 
                    " \"repository_hooks\": \"EVOMASTER\", " + 
                    " \"repository_projects\": \"EVOMASTER\", " + 
                    " \"secrets\": \"EVOMASTER\", " + 
                    " \"security_events\": \"read\", " + 
                    " \"single_file\": \"EVOMASTER\", " + 
                    " \"workflows\": \"write\", " + 
                    " \"members\": \"read\", " + 
                    " \"organization_hooks\": \"read\", " + 
                    " \"organization_plan\": \"read\", " + 
                    " \"organization_user_blocking\": \"EVOMASTER\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/installations/683/access_tokens")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/1KgO46CpcQjbB/outside_collaborators/OfZLMe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/L9/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/y89r26vU/UNPb93T/code-scanning/analyses/981")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"runners\": [ " + 
                    " 316, " + 
                    " 125, " + 
                    " 836 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/RWRZ5pwdiA9g8WFM/actions/runner-groups/OgBR4KhyiT/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/stubbed/accounts/128")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"url\": \"KZVhVuxK2ATplQ\", " + 
                    " \"content_type\": \"WJsg02\", " + 
                    " \"insecure_ssl\": \"I\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/app/hook/config")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content_type\": \"arUimuC\", " + 
                    " \"secret\": \"x58DcMSbeO4\", " + 
                    " \"insecure_ssl\": \"\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/app/hook/config")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/mcq/u0RjT/issues/comments/ZTa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/teams/599")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#update-a-team-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/944/cards?archived_state=archived")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-cards"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/QF8Z6Y0/pgSjbo/vulnerability-alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/installations/793/repositories/xTJuQzeQTzJy7h0k")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"repository_ids\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/app/installations/647/access_tokens")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ML5TClGLbZ1rDJg/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/OS8lI_rDhxTap4L/teams/PDU32WCQRcP/members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"message\": \"tivcigb_Xd\", " + 
                    " \"content\": \"_WXsS6iJKV\", " + 
                    " \"sha\": \"kN7\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/vxk2J1oS1rG/_WXsS6iJKV/contents/NU0reNrl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-or-update-file-contents"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/oNhuSNf5so/following")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-the-people-a-user-follows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"8v\" " + 
                    " } ")
                .post(baseUrlOfSut + "/user/projects")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requires authentication"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-user-project"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/GTNP_4XnfVun6/XhlUxuwLOyGiNDP/actions/runs/WRfo7UGtuBz9g")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/aIZ/Bt59C_yNeKy8LI/git/blobs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-blob"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/4d/teams/bN/discussions/BY2PGb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/E/members/nt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-an-organization-member"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/plans/876/accounts?direction=EVOMASTER")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/1/kgjI4FZsxpAU995N/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 301, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/authorizations/clients/HRwCqUw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 304, 401, 403, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/authorizations?per_page=419")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"limit\": \"contributors_only\", " + 
                    " \"expiry\": \"one_day\" " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/k11yB6yKPt7OxJ/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/rubygems/Udr951g643Nz5MuJ/versions/JKATjEdXp1PuPEy")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/AwK8zGQO06W/KvAiMUg/issues/0f0eEAhCZkE4/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/s/teams/8MEC2VkMMcgH8pc/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/x/x9bDjFOPP/stats/commit_activity")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/z7BndFzI6Swomez/n/actions/runs/_eLKrD/jobs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BaM/PbGdnJ7fCqs_x/issues/comments/9IiGje3ASVFKJA1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-comment"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/FYrzBqblc6FpD5/Rxl37Jy0mcWY_/pulls/WeYBc/files")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-pull-requests-files"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422, 500).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"insecure_ssl\": \"3PF8P1i\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/app/hook/config")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/wp83mtoR6uv/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/I1fFubFP/Xzfypl_2THEM7d/actions/runs/dJe3sMCV/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"-1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/148/discussions/OO/comments/A1qkX_T7F5Y/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/gists/Tl9aYIRQcETr/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#create-a-gist-comment"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app/hook/config")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/wRJhPwx/hooks/txP6AUp8hZlkT/pings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"aZlIYozIjNsJ3\", " + 
                    " \"body\": \"3l2tvQ96A0H1QN67\" " + 
                    " } ")
                .post(baseUrlOfSut + "/user/projects")
                .then()
                .statusCode(410)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Projects are disabled for this user"))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 415, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/Oph0gW_jIMox/hovercard?subject_type=repository")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/mn0BJ4CL6_Zuhpg/XZTDIvMPLW/actions/workflows/UNnYvzi7ecA/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/migrations")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nFor 'links/1/schema', nil is not an object."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#start-a-user-migration"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/columns/677")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app/installations?per_page=929")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/keys/390")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/ZHY4aVLefl7OcK/BDwUBgLjcBsz/branches/uwLGcv4GxjHj/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/5qMFMLo/actions/runner-groups/ntSqz/organizations/0Trgh4ZbaX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/dx/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-an-organization-project"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/w2ciQ_xbdezqa/ALbejB/actions/runners/1vzPYQpRC6E2ApvU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/repos/Cbi6ijt5qfV/1/issues/4Xv8h05xZnDLpuf7/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#lock-an-issue"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/2q1XY_K_/packages/maven/7VMtI/versions/4a7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/search/labels?" + 
                    "repository_id=725&" + 
                    "q=j&" + 
                    "sort=created")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/search#search-labels"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/4FOZje34_pE/1NQdqy95JGMIm0n/actions/runs/TiWFy3bzWR/pending_deployments")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/gpg_keys/804")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"tag_name\": \"rtli6c5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/YXZsnAJSRXuw/c/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/releases/releases#create-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/f1oVu6PS256/9IzNwuTd/issues/oVs9DugJ/labels/1w")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/app/installations/450")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/lAd/qUu6_/keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#create-a-deploy-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/O7qlnpU2c9lcNzuN/vKGJH59s79sQ/vulnerability-alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/t_k1cBNn5ozMdUi8/typguh4/pulls/comments/SfE3pH3OZ2Ik")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/p0EkP/hooks/ec4RsQhzrP")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/mhB7sM8SVwob_I/jDGOfb/generate")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Dr03r/56x2D3jDwqC16/automated-security-fixes")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#disable-automated-security-fixes"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"repository_ids\": [ " + 
                    " 70, " + 
                    " 244 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/app/installations/204/access_tokens")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/BOHwtMCbNWp/actions/runners/AvL8MgSHE7Lzcti")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/enterprises/xVh9YYlSXAKjWmx/audit-log")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"ref\": \"Rw\", " + 
                    " \"inputs\": { " + 
                    " \"i\": \"mbZG2JvC\", " + 
                    " \"ucI5eWG_AIa6GaH\": \"GJFwntMP9\", " + 
                    " \"3Qnp\": \"achzGpjan\", " + 
                    " \"UL5B5L\": \"VsLz\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/_eP7/TH5/actions/workflows/x2yJCvthQK/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/K5rJ_dPrJNug5/qbBG/actions/workflows/sVYm/enable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ktCr8xNP9/packages/docker/cSql/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-an-organization"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/IRNi0I0kSzaiM/qh7v1/labels/ehnieP3S1a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"organization\": \"AwQ2dcjJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/QK6soW2/jh8d_9DsyI13C/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-fork"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/app/installations/571")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/4UHCU0GortiI1oy/nVlqUKI93oMv/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/VZU/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-commits"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"UU9Zxtv\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/projects/columns/413")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#update-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/e6f_qaNvVht1f/Xe7SRPoCRoF/branches/YSZtP5k7pT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#get-a-branch"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/stubbed/plans?per_page=29")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"role\": \"maintainer\" " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/n4LEiKsdDvdSsp/teams/q7TSr/memberships/MgEfxc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/L3S3JSS4Z8/CysLmc3SdfcBg/actions/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-repository-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/FKrEHGDpr36RpH/actions/secrets/r/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"subscribed\": false " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/CGP3X8xW5tV/1/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-repository-subscription"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/Ff/invitations/2jzIjXT/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/yqRfRRiQXSf9/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/pORWkd/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/authorizations/459")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/F1YDBu2BE25y3/Wj6YwUBxlXUR29/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 301, 404).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/emails")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Emails must be an Array of String values."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/eTJ19q/Gy/branches/DVCkKxVFSnDCO/protection/restrictions")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8HqTkyjDjTmk/1/releases/7aS15tDXAZ7DSmu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"last_read_at\": \"7\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/Q/1/notifications")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/PAPgAC/hooks/GszD91I7XN2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ky/vnM90IPrjV/hooks/0r_3RnDX1TCQGwq")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#get-a-repository-webhook"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/app/installations/724")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"Gpx\", " + 
                    " \"body\": \"SB1f3PA8_3ESU5Vs\" " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/zEMXB/teams/SB1f3PA8_3ESU5Vs/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/aG9sA/hooks/gdfucunNk/pings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/mWdEBYIbZ9Eh/J/issues/comments/V/reactions/CpZZj8jRg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/415/cards?archived_state=archived")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-cards"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6rahNZb5xFh1_/PlxK1qc0Puy/releases/ksiYbT04G/assets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-release-assets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"repository_ids\": [ " + 
                    " 489, " + 
                    " 433, " + 
                    " 34 " + 
                    " ], " + 
                    " \"permissions\": { " + 
                    " \"content_references\": \"read\", " + 
                    " \"contents\": \"read\", " + 
                    " \"environments\": \"EVOMASTER\", " + 
                    " \"packages\": \"write\", " + 
                    " \"pages\": \"write\", " + 
                    " \"pull_requests\": \"read\", " + 
                    " \"repository_hooks\": \"read\", " + 
                    " \"secret_scanning_alerts\": \"write\", " + 
                    " \"vulnerability_alerts\": \"read\", " + 
                    " \"workflows\": \"EVOMASTER\", " + 
                    " \"members\": \"EVOMASTER\", " + 
                    " \"organization_administration\": \"read\", " + 
                    " \"organization_plan\": \"EVOMASTER\", " + 
                    " \"organization_self_hosted_runners\": \"EVOMASTER\", " + 
                    " \"organization_user_blocking\": \"write\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/installations/870/access_tokens")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/organizations/WNLP/Users/xVok2VPOXXBpqJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/d1r/0h5rsRv16WlcMGN/pulls/comments/rqxbXp4cjgSei/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/l/MN3obh/actions/runs/uTkloU65p_b/pending_deployments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/c8PXf0VDAW/2zO/git/tags")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-tag-object"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/B/MpIKARLW4SPvRl/comments/FKmop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#update-a-commit-comment"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .put(baseUrlOfSut + "/enterprises/OkDzkZ/actions/permissions/organizations/ExctUX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5hIODzKH/Y/environments/SLVe2w8rYkCz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#get-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/app/installations/541/suspended")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/ER/public_members/sLe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ilh3DZgo9i55i/NpQEiVpe0/check-runs/d")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#get-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/j3e4i1J7weSpqXU/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/HJ/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/H3zV48_jzoE90U/OCR/check-runs/TwTw7dhMvHIFAO/annotations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-run-annotations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/content_references/121/attachments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/grants/345")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Add12kPAKnEx/zyRwXz0Fw708zCRP/actions/artifacts/sKax3eW0Wctl/m")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/ek_ut/lSF7BZ8YNI/branches/gCfApT1hE9w/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/rMB4WRSDDrdtIhcd/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/cJTxc/qOSMy0MRuRwv5K/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/hncErkCi/NPS/issues/zQ4qDMmk/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"apps\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/n/rgD8KtWJMsnC/branches/WMCXKzJ9itWY/protection/restrictions/apps")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/XTZX_thzhh0DMm/TvBilx/labels/Nfvg_jQy8N")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/hhSSNdDkzZ/gTc6KERIC2WGWjku/actions/workflows")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-workflows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/x5EwFJcEWbORS2t/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/xTfyk/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/cbejsF8vzc/ojTNI38kDXM7X/code-scanning/alerts/2Cnzk8EPa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/EVOMASTER/ksDHBNcesFe")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The package_type parameter is invalid."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Kw/C6/commits/tiaXKQrvT/branches-where-head")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-branches-for-head-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/authorizations/clients/gkGAAeJ7ndZz940Y/JNgZyeJy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/OkYgYQuTuLfqhsu/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/4kn/actions/runner-groups/GRp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/app/installations?outdated=w2bDPRYEk1oNMJ1")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/wNsA/events/orgs/r5cL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/dLUciXFe8egAxH/D/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/q/actions/runners/MBjKTGoQm2CxQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/z0zk/1/milestones/zDwFhpsabEjmcmy/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .put(baseUrlOfSut + "/orgs/v/public_members/_KwGXvuNTwZ_1LGs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/plans")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Px4Y0HMp\" " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/kD4R5nra774v/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-an-organization-project"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/sDg6yLE/teams/4aMyw2N9DkzpEb1/discussions/vpnHYcU/comments/Stu1AlcyuMG/reactions/V")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requires authentication"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/pvBq/actions/runner-groups/k0yJJ_uA0n/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Ca/ByHL1RsC/issues/V2kVprdd/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 410).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XBOg/SPSo/commits/11R8o/check-runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dfY/zd37RlBe0m3CFR/pulls/DCrN0k1eCQ/reviews/ypCSUN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/858/cards")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-cards"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/Eldb3b1D49D0Z6K4/V4TkH/releases/nKnVj/assets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"0\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/K7ZFb4b/LXCdC7/issues/comments/0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/ggN2V_D6/blocks/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/w3KD7pQ0s9t2T8zq/fPvoYv7Qjx90c_dK/branches/B/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/228R4EBaXPbn9l/actions/runner-groups/WaUQtL2wNz5XfEe4/organizations/sZYY4mO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/yVLT2SLMQF80NE/2g3EkNJp7g/milestones?" + 
                    "state=EVOMASTER&" + 
                    "sort=due_on")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/QXH/actions/runners/registration-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repositories/385/environments/R4CiOnyrg2MDSC1/secrets/rWM3mOXuzci8j")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/gfflch4DaeQ/1/issues?" + 
                    "milestone=zD2cbPnGE9xnkRns&" + 
                    "state=open&" + 
                    "assignee=vYb9m3N8Gym2tOxQ&" + 
                    "creator=W0yxBgjSKwME&" + 
                    "sort=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-repository-issues"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/marketplace_listing/stubbed/accounts/984")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/zen")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'text/plain'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/kXDgp8FSwkf_De/M3jA6RooFTb/issues/MnnjV1uIi63hfD7j/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 415, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/RNUGM6QztgNfr5xZ/uLiLf3p/actions/workflows/EVrqI5Jxzq/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BwnO/NrgPmnz/pages/builds/49")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-github-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/LtyLdiSPpk/wPDnF6U/code-scanning/analyses/847?confirm_delete=1VrF6T")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/IuYyy47yYOI0/teams/ey00BRR/discussions/wIHcwN/comments/xyd5KsNBsqc")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/DXLzk/m6npLkVmUT/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/gCmyJc0jUPK4/AEhY7LPVxuyqFn/pulls/x3uvsVWdBE/reviews/B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/RToZVfC2YCtWbG7/OP5OcbGnYSnt/installation")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("A JSON web token could not be decoded"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 301, 404).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"vcs_username\": \"2aMDD7vYb\", " + 
                    " \"vcs_password\": \"wbgItp3lXFZ\", " + 
                    " \"tfvc_project\": \"XQf\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/OJBIkJNHfEq/JE2t43IiT/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#update-an-import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/KUeMBEN0N1Z/SwYeBI/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-a-label"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/82/columns")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-columns"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nFor 'links/4/schema', nil is not an object."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/20/invitations")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must be an organization owner or team maintainer to list team invitations."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/mD/JG7_J4o/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-releases"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/mWH_6LMje1wHwZ/1/deployments/qaOcJrDnsOJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#get-a-deployment"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/fWnhNN4E4QemSX/teams")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/jVnD/SMPbYyp9SX/milestones/Z5EhtKzBT21")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-milestone"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/user/repository_invitations/-2009260979")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/FkxG6Xt/teams/zxRD_RdDcUehf/discussions/X/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_110() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/78/members/AAqK_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-team-member-legacy"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .delete(baseUrlOfSut + "/repos/eoCx/oH/contents/DonLUh4FB")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 409, 422, 503).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/f/99f/branches/6HPjMx2Ya2MhLK/protection/required_signatures")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_111() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/projects/columns/13")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#update-a-project-column"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/oHULtKBb4ZsAf/blocks/PCRz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/L/teams/hNlDlQ/discussions/5/comments/WzgcKumX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_112() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/GRUnV4qu5fFs/i56/keys")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/C6Ak/66r7H6Xxf2VcGAlR/automated-security-fixes")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#disable-automated-security-fixes"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_113() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/LZdvH5qXc_nx/actions/secrets/q3mED/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"\", " + 
                    " \"y0VcdGkOWH8w\" " + 
                    " ], " + 
                    " \"Operations\": [ " + 
                    " { " + 
                    " \"ftZU\": \"\", " + 
                    " \"audAS\": \"EG\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"G\": \"c1DutH2Hx\", " + 
                    " \"LlU0ZiUHQ\": \"\", " + 
                    " \"rgrL\": \"Th\", " + 
                    " \"gSqxoqQ\": \"vGuSCY\", " + 
                    " \"dSO\": \"AYuIcFCZ9dcQ0\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/enterprises/AXtvuZ/Users/ViNZE4TtbQirh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_114() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/966/team-sync/group-mappings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must be an organization owner or team maintainer to view team sync status."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/xKAgof6/WJ9qxY1/actions/workflows/slr/disable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dZuYy/vDRx7Dw7F/environments/KRF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#get-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_115() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/vWb/dLQGaK/import/large_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/74LubTo4BpDROsq5/migrations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#start-an-organization-migration"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/_/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_116() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/sFHk8VHm8LljyBJ5/issues?" + 
                    "filter=created&" + 
                    "state=open")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/KljGGwlztEn/packages/npm/VhCzhvQkBa/restore")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/CcELZxZ7zSBkI/teams/28D4Uk5JCQY/projects/Xf8idnbByRWtd9T")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/YVDPc/9lbEF02IfR7AwMC/actions/workflows/v/enable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_117() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/LCHZzKOqDpzs/members?role=admin")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 302, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/33BW9hWT3P/QFC98zv/pulls/ktatk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls/#update-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"armored_public_key\": \"zBK2KEhukG\" " + 
                    " } ")
                .post(baseUrlOfSut + "/user/gpg_keys")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Validation Failed"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'resource'", containsString("GpgKey"))
                .body("'errors'[0].'code'", containsString("custom"))
                .body("'errors'[0].'message'", containsString("We got an error doing that."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/users/gpg_keys"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/GKRyxLlAN4UVp2/L8y2_pGrVhEA6yvq/branches?protected=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#list-branches"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_118() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_title\": \"B9V\", " + 
                    " \"commit_message\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/8UFt/5RYicjSpYBUnwAq/pulls/D/merge")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#merge-a-pull-request"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/RcJ3qp9HOKc/YZ7eGl3XqcKsEj9/pulls/5W5a8_L/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/DLLmxln/1ktMu9e7u6yjTKr2/labels/kxKMX1c")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-label"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/projects/201/columns")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_119() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/gGFLTLvbvp/teams/s/repos/i5z6X_j4494Bm8/HXmrDMzi02Qzm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/notifications/threads/422/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-thread-subscription"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"+1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/906/discussions/o48P_81aq1GbVWK/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/Z2ZMp0_AG/Trwly/pages/builds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#request-a-github-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_120() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/repos/j/DuKGsnw1Jydm/code-scanning/alerts/x7fLpJJRriu2A/instances")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_title\": \"PfizEa7LOpjvZ\", " + 
                    " \"commit_message\": \"xV\", " + 
                    " \"merge_method\": \"EVOMASTER\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/mBtUXrMwahK/gQkgmBYN1Onp/pulls/cWc2_/merge")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#merge-a-pull-request"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/618/repos/7IN5/Yp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/8S4hFCHPH/PrF/hooks/KrbeCWn")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/x/ukm7cwNb/milestones?" + 
                    "state=all&" + 
                    "sort=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-milestones"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_121() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"XMEmsgzkXec9XX_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/rrZDwI0JXg/teams/f9ZamSytcqSv/discussions/XMEmsgzkXec9XX_/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/keys")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Validation Failed"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'resource'", containsString("PublicKey"))
                .body("'errors'[0].'code'", containsString("custom"))
                .body("'errors'[0].'field'", containsString("key"))
                .body("'errors'[0].'message'", containsString("key is invalid. You must supply a key in OpenSSH public key format"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/3DS/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .post(baseUrlOfSut + "/repos/sbQf/slvd/actions/runners/remove-token")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_122() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/CFwYyW1/B9LURD/actions/runs/l78zZ/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/sQ9c3P/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/28/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-team-projects-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_123() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/user/packages/nuget/2yulgn5t/versions/6piosjAxIF")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"\", " + 
                    " \"homepage\": \"qr4v\", " + 
                    " \"private\": true, " + 
                    " \"has_projects\": false, " + 
                    " \"has_wiki\": true, " + 
                    " \"default_branch\": \"\", " + 
                    " \"delete_branch_on_merge\": true, " + 
                    " \"archived\": true " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/IPGTX95jMULHv/DPcWz2UCSDaCp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/repos/repos#update-a-repository"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/JtGZV4qh3_vsG8A/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8cyuJU3cf1AI6t/1/readme")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-repository-readme"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/OIsfljREN/following/sRK3x4V")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_124() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/BBtmLllHH/NbUxL_FXoe/issues/L1bpU54sVLb/labels/G8Pknxs0pxYSEMz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/container/B4ZKDOi/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/u3HhThTD/teams/0nS54nrRbG/discussions/jZ3IrWxtFIRAkgkz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/vLdnEevMl9/teams/6lSWlJAF63Ec/discussions/4_9eX/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/957/collaborators")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You need at least public_repo scope to view public repository projects via OAuth"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-collaborators"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_125() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/notifications/threads/564/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"scopes\": [ " + 
                    " \"TCo5Jb\", " + 
                    " \"NGsIM23rT\" " + 
                    " ], " + 
                    " \"add_scopes\": [ " + 
                    " \"4aWFEK\", " + 
                    " \"KVWWAAiBZQNRehxs\" " + 
                    " ], " + 
                    " \"remove_scopes\": [ " + 
                    " \"AJLlTxu\" " + 
                    " ], " + 
                    " \"note\": \"ygWmsx0LrjN\", " + 
                    " \"note_url\": \"EQyIf\", " + 
                    " \"fingerprint\": \"9LbV3Ta7bul8\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/authorizations/189")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/vImnIL1znHIec/o8hPz/actions/artifacts/tu7JNus1VRW/DdlEPWxNTkOp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"groups\": [ " + 
                    " { " + 
                    " \"group_id\": \"MRmF\", " + 
                    " \"group_name\": \"5E\", " + 
                    " \"group_description\": \"5yPBQeCHm_DbCM3q\", " + 
                    " \"id\": \"LQ4DH\", " + 
                    " \"name\": \"0GItJ\", " + 
                    " \"description\": \"9TdFOJaOvnHqQr\" " + 
                    " }, " + 
                    " { " + 
                    " \"group_id\": \"VYyWpPTYFUmXLJ\", " + 
                    " \"group_name\": \"x\", " + 
                    " \"group_description\": \"k2\", " + 
                    " \"description\": \"PsfLpQ3wNuSW\" " + 
                    " } " + 
                    " ], " + 
                    " \"synced_at\": \"AZVXFQdOv\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/teams/222/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_126() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/dtsJ1xoAQA1Eo/7pB3bDoqdcn8tIc/issues/comments/FMeZyp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/cards/4")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-a-project-card"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/I7HuuRVZ7D/outside_collaborators/7IvYDYfoQSMO4pF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/65snL/wr/branches/8/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/D3_hZ/outside_collaborators/A08Dd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Nqt_Gol8eYrJ/9g3m0d/actions/artifacts/ApzBj/R9ao5_o_mWN8n_8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_127() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"limit\": \"existing_users\", " + 
                    " \"expiry\": \"EVOMASTER\" " + 
                    " } ")
                .put(baseUrlOfSut + "/user/interaction-limits")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nEVOMASTER is not a member of [\"one_day\", \"three_days\", \"one_week\", \"one_month\", \"six_months\"]."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/Y3ZHutzK/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-webhooks"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/app/installations/895")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 415).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/JY/repos")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-organization-repositories"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/587")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-a-project"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_128() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Ys7XHrp0U0/rmy8MPBrh_apE1/pages/builds/latest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-latest-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/teams/124/memberships/b0F1yStIqQmSqOy_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/3yf2U6/fZCI/deployments/zVxSy4zhl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#delete-a-deployment"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/1ubo444RT3w/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-organization-events"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"event\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/EibMDb9LrWEFl7M/KmY/pulls/p/reviews/kwLfnxpb8WYq6Vcu/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_129() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories/498/environments/tkr69Qcsu6h/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-environment-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/xMpB1L0pt3V/teams/e9Iwmf4t/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/K/_AMUY/issues/r4Ro1JVucIxQcH/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#unlock-an-issue"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/3YFlp/hooks/Cd5MXq/pings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/LfbM0ScjTtg0zmC/uASMCfG/labels")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_130() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/sZWFAZg7HcW3J/orgs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/user/packages/docker/d/versions/GBV6OQBK/restore")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/1Zwp/hn3xLO3XuuKgI/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/632")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_131() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/nq/Db4GXl7vuczv8Z/actions/runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"note\": \"_H\", " + 
                    " \"archived\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/projects/columns/cards/915")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#update-a-project-card"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/enwJ0zZFcJHTCOz/teams/jIcDr3hye8vGFxK/projects/CnMe8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/479/cards")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-cards"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .delete(baseUrlOfSut + "/applications/XODQHKpJjDE/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_132() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/524/members/bX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-team-member-legacy"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/G0UhU0jmQYdp2/actions/permissions/organizations/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XE22FbOWxpiP/_ABHh_6iIBAWSS5/stargazers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-stargazers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"auto_trigger_checks\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/x3HRPfj/F/check-suites/preferences")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/installation/token")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to revoke it"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_133() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/kLAIotyVsWw4/WDoJYbO8/collaborators?affiliation=all")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"firgxIPMwy\", " + 
                    " \"Ajv\", " + 
                    " \"ENWZjMHAX\", " + 
                    " \"GrjUlB3\" " + 
                    " ], " + 
                    " \"displayName\": \"yCZNP26KFPT\" " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/bYu7y_/Groups/qJnvZrLd53rg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/GoXpE5B/8/languages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-languages"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/repos/sDFNS/NyyBfH_/contents/63O_xeR?ref=rTaes")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .delete(baseUrlOfSut + "/authorizations/712")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 304, 401, 403).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/migrations")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nFor 'links/1/schema', nil is not an object."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#start-a-user-migration"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_134() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"tree\": [ " + 
                    " { " + 
                    " \"path\": \"qSMP\", " + 
                    " \"mode\": \"160000\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"commit\", " + 
                    " \"sha\": \"_9Ok1fds\", " + 
                    " \"content\": \"jBIASBHwsX\" " + 
                    " }, " + 
                    " { " + 
                    " \"path\": \"r26v\", " + 
                    " \"mode\": \"EVOMASTER\", " + 
                    " \"type\": \"commit\", " + 
                    " \"sha\": \"jIehAJdd\", " + 
                    " \"content\": \"ZdgsTp0vz9TlT\" " + 
                    " }, " + 
                    " { " + 
                    " \"path\": \"2CyJx8uZXqT\", " + 
                    " \"type\": \"blob\", " + 
                    " \"sha\": \"1xo\", " + 
                    " \"content\": \"7O06\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/04TT6Ha99Vv/8e2E1Q_7I8yhGBI/git/trees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-tree"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/n2oyBb/packages/container/POg9dHahbQGfZHY/versions/ASHF")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"AT_98nfbf\", " + 
                    " \"encoding\": \"99NbymMStKGSVJt\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/F1epewdl0KPWKei/b8ibQDK7/git/blobs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-blob"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/4xvyecvE4v/sAVGVjM9/branches/LB5JdU/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/oGF0E5IuL0vWoP4X/actions/secrets/G6nnwIn/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/hgK5syoUFq9ZSez/n3HRYPGNxna/keys/f9ZwLOaCeJKVxXhT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#get-a-deploy-key"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_135() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/installation/repositories?per_page=665")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to list repositories for an installation."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/JvLwyaoWN0AzFCA0/migrations/HlfEQqd0FbVwpN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/7r20RLiKwxk/blocks/F1z0ymDEH5p1EcJQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"scopes\": [ " + 
                    " \"i8OVLdL3qq_RBzu\", " + 
                    " \"l\", " + 
                    " \"hZf_2QbpMLCT\", " + 
                    " \"u1M\", " + 
                    " \"ZLMbhEx_j\" " + 
                    " ], " + 
                    " \"note\": \"95ATYKVRdjVXm\" " + 
                    " } ")
                .post(baseUrlOfSut + "/authorizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 410, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/i580dzFk1Xmv/LYKTihhrddSqcG5/branches/8/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/WIY/tokens/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_136() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/59i6ZaHu/actions/runner-groups/BtUsEwQ5Fk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/M/r9niQV_2lA/contents/Yh7h?ref=IXU0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-repository-content"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_IRU0bgMAC/5NLMtnQGFfNVP7PU/assignees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-assignees"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/QiQ0/Xb0qY/interaction-limits")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/grants/330")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/cNl5R4FmS6L/hooks/o3Idw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_137() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/PYzPWYaLnitkjr/i5SY43R/traffic/popular/paths")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-paths"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/L/fwlnGcx4hq/issues/KuVvki/reactions/ZoZ6VTysQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/sK/migrations/D2/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/oogAAAVVHRmbhLIh/gpg_keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/L7Z8Jbwe45U9/actions/permissions/selected-actions")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/bhs3qe7St/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_138() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"S1\" " + 
                    " ], " + 
                    " \"userName\": \"9Ax_\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"rPR4epP\", " + 
                    " \"familyName\": \"eHXM\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"Py6\", " + 
                    " \"type\": \"\", " + 
                    " \"primary\": false " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"N47MC41\", " + 
                    " \"type\": \"e\", " + 
                    " \"primary\": false " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"akbPxvylswf\", " + 
                    " \"type\": \"kTWjEymrcz9CwG\", " + 
                    " \"primary\": false " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"O1x\", " + 
                    " \"type\": \"vsux\", " + 
                    " \"primary\": true " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/c/Users/XqoW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(baseUrlOfSut + "/teams/52/repos/7Lmlv_FYC/1")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 404).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/d/actions/secrets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-organization-secrets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/aOymue6AdQYXZ/6gx7SPI/code-scanning/analyses")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/J/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/zlozQdAveV/actions/runner-groups/0P/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_139() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/gTVHFiSwyJtC0/oB/actions/runs/uhs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/installations?per_page=418")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an access token authorized to a GitHub App in order to list installations"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/2112096121/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/bSTQPphub/nFDV/assignees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-assignees"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/a45O8UBe/memberships/_XJR")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/vRj7oLPtztU/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/HKPrL/9G_W6pkd/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/odRgX5qq0mzes/uDYM_v/collaborators/Ai2qCGIe8X")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Zv1cKC/c0XtmR_kLPjB/readme")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-repository-readme"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_140() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repositories/564/environments/i9aTGt/secrets/GClr4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/I5fuT573hW9ly/Users/rRKwdjuzFRMzM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/e7Dragx/xl3v31NrffMDjU/pulls/iXesK54HuDfTPiL/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/notifications/threads/200/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/p9ApO8cG8XvapOg/kqLj8bd6_PmSJRz/issues/UDt87/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/_nYvYDINs0J6z/s9DJ3/hooks/9Vi")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/hrTZkegK7/dzpdo2QmyWob6/branches/WgsY6Dl/protection/required_signatures")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"laugh\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/9mm32mIrUv/nn1drr_Y5tp/issues/SRPBej6/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 415, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_141() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/crGFoc/projects?state=closed")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-organization-projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"names\": [ " + 
                    " \"QfK\", " + 
                    " \"Slbvkg5rahn\", " + 
                    " \"FFOf3Q\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/5fwN6tFay7BFx6D5/YHj4bRP903QnTQgR/topics")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#replace-all-repository-topics"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/hhAR/teams/_AuXoOncI2dGa/discussions/1/comments/Z_7WY8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/repos/IGxlda7XBf/z8ZNGtqoh4ipP2j7/pulls/tFZSz001_N/merge")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ArRgT3DtRjw/public_members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-public-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/KgVDZqH6CeVU/JrO/branches/1/protection/restrictions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/n6Tizo/3ZwhqMD70srnI3sE/releases/tags/We70gWap4_QH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_142() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/QPfw221/teams/U1w/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/tfC8/Inu5wlfT0rKKu/releases/assets/2kOlbNRiw1c")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-release-asset"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/0WQ3wPD/actions/runner-groups/2zS3D82g/runners/yR70JxN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/authorizations/-762262124")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BBvIUc/9k9/pulls?" + 
                    "state=open&" + 
                    "base=xH576UkEGClNnUKA&" + 
                    "direction=desc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-pull-requests"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/teams/11/projects/972b")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/24wo/tokens/ly")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/40LZX/packages/container/_XA5GU30aZWe2/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-a-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_143() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/3jqZsGY3Zol2g8/WFv0rxQfxw3abxS/commits/vqUK32")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422, 500).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/Jl9nbptGpqYVZv2/teams/1/projects/DYRc6UJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project"));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"access_token\": \"aPKxn\" " + 
                    " } ")
                .post(baseUrlOfSut + "/applications/8tTd/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/lHB82ugJdQ/teams/CI/discussions/NUH0gw4/reactions/CHYGi5SHzTI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/GCdUvzj/ky/commits/duY/pulls")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ckR/PlN3WQjskOS0JX/branches/tv4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#get-a-branch"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/cZKtGpV/CJpxoCZQsXV/deployments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#create-a-deployment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 202, 409, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/asEW1I3j88/actions/runner-groups/I8cWjn/repositories/hKjKH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_144() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/T71/actions/secrets/Mr_lN0DUPcP5mSed")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Ki/YrdNiwGCSWsoW0/actions/runners/zbczNLRYcJJm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/pSUwCy3HnM56/Mu53mCJBU3n4z7/check-suites/preferences")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repos/fcoV3lsD3at/6C6gUf7MBgc/hooks/6Xkdh_S1")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/rDctlBSil0T/1IjRTzjRnmrT/collaborators/FmMqOKw2Kt_I1kyU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/xbWtNScpMCv_QIB1/actions/runner-groups/R1IrwvPv6/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Xe/dcEw40DkKsg9HnL/branches/Ybs78S1xYY8w/protection")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_145() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/MSme/lVi_Y7OE/branches/AF7uD5B6WkFkOV/protection/required_signatures")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/zwpAar3etn1/_DXS1KOCK/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/91h2M7DRLdgkE/6hOf3s/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"tag\": \"SvQQW2Xjqn0Qc\", " + 
                    " \"message\": \"TL5hwXT1g5\", " + 
                    " \"object\": \"NiQT_LTg\", " + 
                    " \"type\": \"tree\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/UOizIt3JlofMjDM/SvQQW2Xjqn0Qc/git/tags")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-tag-object"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/E/anVq5i/license")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .get(baseUrlOfSut + "/user/marketplace_purchases/stubbed?per_page=779")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/PMeN0/QNTcdl/git/matching-refs/sK6ZhWU2EAsSdE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#list-matching-references"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_146() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"tag_name\": \"Q3B\", " + 
                    " \"target_commitish\": \"CUZEsT5KMj\", " + 
                    " \"name\": \"VwomQlcBDI4\", " + 
                    " \"body\": \"PqO\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/BzV7rRin2SBm4/NKrfzpdGtF13/releases/PqO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/gists/HCbSuZY/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#star-a-gist"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/2KPGf/actions/runner-groups/R3O/organizations/kyoTRJafK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/container/l/versions/O3MCTSf")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/installation/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to list repositories for an installation."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/nmUU9K/ptFQWrcTAcgxmTWz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-revision"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/hR9m5x7Dxm/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/I/p/branches/AHKCiBYUWYQjK/protection/required_pull_request_reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_147() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"ayvaI0DRescz\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Validation Failed"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'resource'", containsString("User"))
                .body("'errors'[0].'code'", containsString("custom"))
                .body("'errors'[0].'field'", containsString("profile_email"))
                .body("'errors'[0].'message'", containsString("profile_email must be one of the user's verified email addresses"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#update-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/teams/841/invitations")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/m6EO8lD2mkX/Ks42/code-scanning/alerts/EhUfdaKsB/instances")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/0UFUDSF6M7/aSA1Lu/actions/artifacts/AWgNayjNBZwi1Oun")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-artifact"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ZfMAs6F3_F/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-webhooks"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/feA9Bw0sd3cLdpr1/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/sHJWXeYDgMP7/2squlak/issues/p/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-events"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/fmLVuUfDe/XP_gccSaC3QA/pulls/QEMaHY/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_148() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Yo/Lkr4qYa6_/milestones/v1d4molKTSI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-milestone"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/KODaA_BvnDEWBnus/teams/yLsPtEmnsZMp2/discussions/k2g6YCDYajTy9XaC/comments/Vx/reactions?content=%2B1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/BLY/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Cvt9OodE/5H0P8YhZk/releases/tags/cmxEtjry_NxC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/ZYV/audit-log")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/Je6e/packages/npm/v/versions/0GI5p3f8dbcMmc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Mn5tXuPgDDUlYQG/EVqptRl/tarball/FyJe38lSLhYH31")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#download-a-repository-archive"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/U/NFkKSA/labels/tbQiKh5v75")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_149() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"LBK0752C6F2T\", " + 
                    " \"description\": \"55puvksfahXR\", " + 
                    " \"permission\": \"admin\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/teams/790")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Lx_JUTT/GAtd/compare/S08q...zPetux6NkQ0D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#compare-two-commits"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/maven/xqiElkD/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"state\": \"EVOMASTER\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/yeZb6d6qnNJLjG9/1/code-scanning/alerts/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/EIDn4nP/hooks/y3r9ER/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/user/blocks/7ay5Tu40Mz")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/68EUdpS/audit-log")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-audit-log"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"position\": \"RsSFkFvqzjY1oL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/projects/columns/861336521/moves")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#move-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 422).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/EVOMASTER/3/versions/Z1H_oiCNkW9K1lm")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/fQKh3tRPqB/migrations/2DBA/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_150() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/b/AgcoP1yulH/actions/workflows/Wj/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/s3tsEZlF/public_members/zYB2TeBsyUeU0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/A/public_members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-public-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/gpg_keys/1246214580")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XlJkuLU2t/1/actions/runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/Pz1QU9lBoK/comments/O1VPAfKR6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#delete-a-gist-comment"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"heart\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/321/discussions/KuwBITo8cp/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/fczV4m3vn4/Er/issues/comments/zb/reactions?content=confused")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 415).contains(res_7.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/keys/779")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_151() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/repos/hQpSeuME_w89xKc/qe9MWfiezCOb_B4i/vulnerability-alerts")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"labels\": [ " + 
                    " \"KGjSa9qUY9UUP\", " + 
                    " \"o8iarsjX\", " + 
                    " \"q\", " + 
                    " \"yH1WE\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/dzJ5/ufd3/issues/1qN/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#add-labels-to-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/XNy950/teams/1/memberships/IjvPak45l_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/user/keys")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Validation Failed"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'resource'", containsString("PublicKey"))
                .body("'errors'[0].'code'", containsString("custom"))
                .body("'errors'[0].'field'", containsString("key"))
                .body("'errors'[0].'message'", containsString("key is invalid. You must supply a key in OpenSSH public key format"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/BUzNHcpu5/A/pulls/mKT0Q7isqJ/reviews/aSgXQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/memberships/orgs/kw8WtvxLBXiuCN3V")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/12/repos/HBKD_7u5W/lkkz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/U1jNih6/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/A/K4PWbvo9Q1s1DXly/milestones/uK/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_152() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/46TLmJ_6gJZbUG/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/scim/v2/enterprises/UYFjhcm/Users/XKc4naI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/XLESyet3zU9/migrations/m9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/rX/actions/permissions/organizations/r")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/l_lkqttUscI/hooks")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/WybSH19IX2Cn42/mICp/issues/sGTByW/assignees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/installation/repositories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to list repositories for an installation."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"userName\": \"mc9rro6Jp6Dwy\", " + 
                    " \"displayName\": \"2Ap4LLF4Pj_fF\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"6xpH\", " + 
                    " \"familyName\": \"SWh\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"R2aAdyJV\", " + 
                    " \"primary\": true, " + 
                    " \"type\": \"bsviIXLkb_Zr\" " + 
                    " } " + 
                    " ], " + 
                    " \"externalId\": \"PfS883lFk\", " + 
                    " \"groups\": [ " + 
                    " \"fO2Ob1sHRy\", " + 
                    " \"GTEPv\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/organizations/Gw_E4YlPILs5eajI/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/A/rx45XMB8Fh/keys/tJc_5L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#get-a-deploy-key"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/W/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_153() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/jdlD87cPPb/actions/permissions/repositories/UcvJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/licenses?per_page=179")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/fwgSuXYksBCu9Qw/teams/DLwFfLleq8/projects/RSaQsxqzI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5R5K7tPIUju/Vme/commits/w/check-suites?app_id=-1446782816")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"ref\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/y_rDNzif/fFFznuHcLbBcy1dT/actions/workflows/WB/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/K40sywzaVbOk2/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/0bqkWBa/8dP9fMD/commits/7eYuQmzrZ/branches-where-head")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-branches-for-head-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"access_token\": \"Pf2bYdbtYX8O\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/applications/a2mkPiZ/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/TPz0OuKXmjrNv/W/keys/nGr0E")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#get-a-deploy-key"));
        
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/IurUyoGipJbg0E_/78_Ie/commits/NABw2P_/check-suites")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_154() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"key_id\": \"j1jb1ggq\", " + 
                    " \"selected_repository_ids\": [ " + 
                    " \"wlfQGtmXRtXJC\", " + 
                    " \"WNeRBu\", " + 
                    " \"8BT6kXErvw3\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/JA/actions/secrets/PMSyMHUiNekT2q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/zcnjwQtV2jsGH6jq/teams/trn9rs0hG_/discussions/etou/comments/Vm1mS3UiQ8M2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/Dn_tplAl2i7/hq/branches/st7/protection/required_signatures")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/YSqa22Wqvm/teams/O9_0UTDJDQhS1FaT/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ZDWL0ao2gvVqr/invitations/0fJkqls4kxcKG/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/507/repos/o4/Mh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/2aow/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"secret\": \"RWtYhkSfGBQ6jam\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/Oh/hooks/rclik62SrM/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/authorizations/clients/UNbNaFCfM/lSO1V57Iguc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 422).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_155() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/n5j1w77eTjIwuy3/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/nEttXwFCwDXkcL3/d/branches/h9pbIUeTKxNEcX/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/cEQwrWGHP3v/5XjS3/branches/gR5C7fUMpD5pvG1/protection")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-branch-protection"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/enterprises/LjDzjmskwlq_Op9/actions/runners/registration-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/zBB3NBNXsH_zE/actions/runner-groups/drPTVwE7wDFN/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/6zKBd/fGyKQ3AjyYR9pU/git/refs/cxdrXsGgTDsHA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#delete-a-reference"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/PwmtkH/jK43thekzNK36/stats/punch_card")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/934/collaborators/1/permission")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You need at least public_repo scope to view public repository projects via OAuth"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/uCYFQ/fUQch1YMnzyZxi0/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_156() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/DOH_hc_e_kPFbg4/4S6KBFbL/actions/permissions")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/i/19lLU9/actions/workflows")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-workflows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/gpg_keys/39")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/SCg/G9IA6VEo5/comments/vHrm3eXMW8de/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 415, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/zGzft2sPL/nxoAN/check-suites/preferences")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/mVumCM6qf_Hu/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-comments"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/12/discussions/LVjIlg/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/repos/flWYSdyi/J/subscription")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/01b/WJj/branches/1YIIp7M2/protection/required_status_checks/contexts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts"));
        
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/sVIOSSP0QNCgr0e/Groups/uJFB4AZEw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_157() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pzxjhHboi/IjMY5U/milestones/1EnNZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-milestone"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/0DPTDSTkgTB7di/teams/hA24spu/projects/NsrQZN5NN5HuAJOQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/rkikYQy4fT/9V2okXQiTRRR/git/blobs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-blob"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/_a/packages/EVOMASTER/s1MAA6vmM_2ay2g")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/izj3aOKaGfmiftW/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"apps\": [ " + 
                    " \"i2\", " + 
                    " \"\", " + 
                    " \"KbDbeFUJaKN9fn0G\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/dO9Y/BLHwrALqt_hj/branches/5rR2IXnvN6923/protection/restrictions/apps")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/YWLTx/LvEP738AZ7ZAC/traffic/views")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-page-views"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/8IR3H/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .get(baseUrlOfSut + "/repos/7nNomaXh3/f5rkrIeAOzBMW/hooks/DD")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/nNsO8n43JIoP3uP/85iVCGa7WDE/invitations/hE229rjff66v")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_158() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/repos/DVi01Ktm3opf/OVe/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-repository-subscription"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/JwsXq3A/5PAchFe3ZvQW/import/large_files")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#get-large-files"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/VjEiyK/teams/1/discussions/Ng6VDmTmT4FBskT/comments/JBUV4rOz_ZM7npWg/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/8wnCwWV/actions/secrets/39S6JCNA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/installation/token")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("You must authenticate with an installation access token in order to revoke it"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gitignore/templates/6wVSnAKQz1WBiVlK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/gitignore"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/UdRaOuxN06GApUK7/_1KcFT4/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#update-an-import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"organization\": \"Cg16ZcRdTYrU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/tpfPzlAdGpU8w/HOTi/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-fork"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/tpSce3MjJqrpmuO8/s/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_159() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/columns/cards/984")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Must have admin rights to Repository."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project-card"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"7a5ub6Ig9pn\", " + 
                    " \"draft\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/DiYOIIqvhGkUoE1/Vy1FH2qWJO8hDu/releases/7a5ub6Ig9pn")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/orgs/EnRLZHmjllz/installations")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("API rate limit exceeded for 43.154.230.235. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"dismissal_restrictions\": { " + 
                    " \"users\": [ " + 
                    " \"ztEVliKaug__pI\" " + 
                    " ] " + 
                    " }, " + 
                    " \"required_approving_review_count\": 326 " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/DFQGW7BIzEgy_5_/QLnlr/branches/hGVPf97G/protection/required_pull_request_reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/zen")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'text/plain'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/n6/d/branches/0u7Niq4kIDC7ll4X/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/927/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/0RjUrwfJ21/AkCpFH0UMvWN3/traffic/views")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-page-views"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/pKQvHp7O_FCk/U5jA8GtAptvJak4/actions/secrets/xdQxpljBUBwyV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_8.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/d5jMyemSBkOtNWQq/1/branches?protected=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#list-branches"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"state\": \"EVOMASTER\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/user/memberships/orgs/vN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"message\": \"AZduo3VhzyBhJvu\", " + 
                    " \"tree\": \"9CGhCcrSOoD\", " + 
                    " \"parents\": [ " + 
                    " \"0gQvjEOS1PDWUj\", " + 
                    " \"poG\", " + 
                    " \"McOVb\", " + 
                    " \"YLMtduqHbrDJYhZx\" " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"nW_\", " + 
                    " \"date\": \"41bvUq\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/Y9X4Wairk9/uNb/git/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-commit"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/342/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/VxV1hy1wXaLeKW4/hooks/80Emgtim")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_164() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/303/repos/DIRUK/Nuxc7slSX8W1Aw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/t8I/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-webhooks"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_166() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/F/Pmb/deployments/LoAwmO07JpCA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#delete-a-deployment"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/grants?per_page=9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_168() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/following/srbz6srKygZaTdZc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#follow-a-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_169() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/eLii7_/migrations/i/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/450/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-child-teams-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/0Jq5/1/pulls/Yv9QMAYKB4_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-a-pull-request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_172() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/XNr7Sags/1/comments/DyyiR2pVJFJClBpM/reactions/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_173() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/olN0zTKtSVA1Q/8Eji__Odit/commits/J0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#get-a-commit"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"state\": \"EVOMASTER\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/DRAgziqgIH8W/UtcIWk2mxZOA/secret-scanning/alerts/v")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_174() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/YVylX/actions/runner-groups/3OB9GI986YzLd6n/runners/jGG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_175() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/1U368MS3/5f6Lqb4q/check-suites/1/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_176() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/JpYm26s/followers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-followers-of-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_177() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Nh2qp/pRfCzA7IvAEKxuQd/actions/workflows/pHdccY/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/04GB/tokens/gH61eOUBP5c2KD9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/eBw/rxJ/issues/Xw4dnjE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_179() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/orgs/uAthUZ0NCGulWjag/invitations/lbDOcctvl80o7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/YZ7_xJ/6ZvrcMKwyyudXGyc/secret-scanning/alerts/d")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_180() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/F8DM2F7o/SZ/pulls?" + 
                    "state=EVOMASTER&" + 
                    "base=iG7T3HidVWa&" + 
                    "sort=popularity&" + 
                    "direction=asc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-pull-requests"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_181() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories/36/environments/o79OLxWJ/secrets/0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_182() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Cmf7vKRds9vN5/v_NuNiMQj1/environments/c5lyYnN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#get-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/802/collaborators/HY0Oe/permission")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/zUn8lqnIdWeHX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_184() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/Uhf_pic2I5a8x/actions/runner-groups/TJ2/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/vtleUwwQq5au/teams/9_GtMEdtiJczc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-a-team-by-name"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/7idX/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-forks"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_186() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repositories/184/environments/c270Lqh5Wmm1q/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-environment-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_187() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/l6BYXVV/1ZK_F2FB3hVaa/labels/0agBti3j7V0V485")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_188() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/II/1/pulls/comments/h8eF8M6DDbX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_189() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/pRZHEx0wQ8WqqQXi/6v4/milestones/5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_190() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"OCU7mWX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/662/discussions/OCU7mWX/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_191() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/vuGwZ8fU/actions/secrets/AbjGO8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_192() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6c2zoVz/ewYZ/actions/artifacts/krtraX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-artifact"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_193() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/FvKwzJhLhD/jLtyknvWRB81/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_194() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/hUnZSgV9jkWC43/6/community/code_of_conduct")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/organizations/m/Users/oQs9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_195() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/l62OrJgkQ/93VCa3/commits/kKM0OW3_TRHLbK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#get-a-commit"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"permissions\": \"W743sx7\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/J6ftwQi_Nfx/28/collaborators/e1Q0xMiynB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204, 403, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_196() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/RyTPzNvs5dsYUFEx/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-forks"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Kg/1B/traffic/popular/referrers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_197() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/aYkqZbK7pBzlrjcl/LCqQQm_Pb_xWab/statuses/2Qa4nUI19Q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/statuses#create-a-commit-status"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/gists/JZfyC/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#star-a-gist"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_198() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/fnyQ/w5ID06")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-revision"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/grants/729")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_199() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .patch(baseUrlOfSut + "/user/repository_invitations/529")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/ySX0/YODyPV1mLHk/actions/secrets/wL7K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_200() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/pqbkm/memberships/xv9X8ydVtTKxUu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/NqYq/outside_collaborators")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_201() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/following/r6jc5Fp0W6GFy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/J9iT/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_202() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/VDv/hooks/SRZc8AkqHzubJp47")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/NXrZ8V7Va/public_members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-public-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_203() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/0CAX/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/br/x/readme")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-repository-readme"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_204() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/TS9_Fk3IubFsW5/outside_collaborators/erE0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/L4vBhnWw/Az9iB/releases/tags/pVd707S0HpHF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_205() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/memberships/orgs/dUxXW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"color\": \"Gjov7azbG\", " + 
                    " \"description\": \"T642eWM\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/Cn/NOEQ8/labels/CL7tobe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_206() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/HFFSk5Did227/wqA1T/pulls/cHrrPEq2ApiSbLU/merge")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#merge-a-pull-request"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/U4C_9dTgpAxcrhB/3pubL33NE_/deployments?" + 
                    "ref=MJNI&" + 
                    "task=cfq&" + 
                    "environment=GMeJDF7Ar")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#list-deployments"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_207() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/xhvQagPZD8PtA/xc4jIa2w/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/b2uEzkRAObNEB/D8CNNQG/milestones/Nb4MFkwtcm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-milestone"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_208() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/28uuEIUzN5/mRBHvRd/stats/code_frequency")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/190")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_209() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/W0n7iIQdecYRrQa/1_/actions/jobs/MmRN9bGPCI6z6F/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pn50DW/8RnLDWGAEkVZaVx/stats/code_frequency")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_210() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/hq2ETE1/BV3riqo/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/0Fkgs/actions/runners/K2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_211() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/bKxKvj7GlfKbx/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/OPwIk/eu2MuyeSun/branches/mt9qR2SeKPG/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/scim/v2/enterprises/z0C8Q5W5tpy70/Groups/BQcRdpISgpwe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_212() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"userName\": \"D3vJRNBV3k\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"EX6wJ\", " + 
                    " \"familyName\": \"D\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"9eUC5B\", " + 
                    " \"type\": \"4vlBXh\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"omkmHDfCv\" " + 
                    " } " + 
                    " ], " + 
                    " \"externalId\": \"uo3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/scim/v2/organizations/5jWjWGu3SDaV/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/mnfW/vKtFOFzWrPfuT/pulls/8Y1/comments/A4AxRNFW/replies")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/nv8clDXaNTmKr/sjf/milestones/h")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-milestone"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/8HEiT8D2WBP1/7Jas0htTWV4lkcLZ/contents/hrDAz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-or-update-file-contents"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_213() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_repository_ids\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/JomEaRp3/actions/secrets/IiL/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/user/packages/EVOMASTER/rTQbLX/versions/M/restore")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 401, 403, 404).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_214() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/8/actions/permissions/organizations/N9WFM3jLK4Vuh3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ec_ok/i1WYUj92/stats/commit_activity")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_215() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Pm4/8m")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/YH/XvSyymsq9Ia6/pulls/Vrb08xcoTL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-a-pull-request"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/JmGZ469KY0gfg/members/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-an-organization-member"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_216() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/dqiftZq44YQu/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/UaA9ppspyZlw4ct/0yUMfZ8zO9/branches/lnY/protection/restrictions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_217() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/kYDx_OFypB/packages/npm/93l6CwYDTGWqL/versions/1/restore")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/CisbIg_g/18/stargazers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-stargazers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"names\": [ " + 
                    " \"J4wh\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/rWjjEUvF/bD0/topics")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#replace-all-repository-topics"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_218() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/authorizations/94")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/3gM1Vo/Er/actions/workflows/4r/enable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_219() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"zFi\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/Uv6gOKF6wqIHHJ/teams/9fDn1Zwc5GTSARX/discussions/6CZI1HYvL1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"event_type\": \"714cnGD9Z\", " + 
                    " \"client_payload\": { " + 
                    " \"FG3zh4oHA\": \"GAsVCgdjfhqFdU\", " + 
                    " \"YC\": \"vpcy\", " + 
                    " \"XHtdZgck\": \"L4qN3FzB4x1h\", " + 
                    " \"ykSMqIHZOe4EJ\": \"vzpFgB\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/b_ONxZWH4oFGS29/ogNOBEiAtN8fly/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_220() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"vcs_password\": \"mctmC4lrboVtLjm\", " + 
                    " \"vcs\": \"DiIfehMKO5r4jQ\", " + 
                    " \"tfvc_project\": \"z2QwRflc4OMf1OGk\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/KQvvkHb/oZc3Rgj316LT6abY/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#update-an-import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/QVLLaG/teams/ocP6C3o13JT9/discussions/5p/comments/9w/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_221() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/OZUxURN4/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/HTuBXExeuQ_ToHK/Luehj33mTyqMw_/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_222() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/Ul/migrations/7WCnunfw/repos/uZBaxEvm3r9juv8/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/h4PRzxF/J2Cs7BaTUYOi_/hooks/OzVZmOvVgKV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/networks/7Nt00VheR1xsCArv/1/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"runners\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/UU65/actions/runner-groups/fXgzVIJmku8skD/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_223() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/w9eT1p7UBa/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-webhooks"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/enterprises/gHP16/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/JdUgo/teams/qaj/memberships/m_2gP5AbARTbd0OF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_224() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/wrptbGNvcgLE8bYU/4yV8uGKoDOms/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#list-repository-webhooks"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/zxpgXH3f/Q8fy1jahOJ/actions/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-repository-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/enterprises/NNvF3x/actions/runner-groups/LQ_rC7mq9yl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_225() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/iUDdv1s/NyjSL/deployments/RJZ4coLEqhH7CfF/statuses/722")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/NEa0BJ/E7J8Hg0O4zFo/actions/secrets/public-key")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-repository-public-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"groups\": [ " + 
                    " { " + 
                    " \"group_id\": \"zkuueq\", " + 
                    " \"group_name\": \"K2x7e70\", " + 
                    " \"group_description\": \"9f9cNrWByUHc\" " + 
                    " }, " + 
                    " { " + 
                    " \"group_id\": \"H_YEvjQ\", " + 
                    " \"group_name\": \"L9Di_ueJaP7F\", " + 
                    " \"group_description\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"group_id\": \"5sauvXy\", " + 
                    " \"group_name\": \"Jz\", " + 
                    " \"group_description\": \"u5\" " + 
                    " }, " + 
                    " { " + 
                    " \"group_id\": \"F8euJy88uS\", " + 
                    " \"group_name\": \"2Hkefh5k\", " + 
                    " \"group_description\": \"I\" " + 
                    " }, " + 
                    " { " + 
                    " \"group_id\": \"HGebvKeYi9F2KQ\", " + 
                    " \"group_name\": \"7hB3gOwy77\", " + 
                    " \"group_description\": \"dBlJNGTNE3uqk_U\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/3F1BstsG/teams/xKhBE_H09bZBTS0/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_226() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/WlMXm2ZKaC/2/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/releases/releases#create-a-release"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/kVZxxecq/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/milJo/k2jilI/releases/assets/YTUXMrSCqnIu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-asset"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_227() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/IJU9Q/T5ybeTkj79HdD/actions/workflows/RGC/timing")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-workflow-usage"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/starred/3U4SV48rJQ0/SwTZLbo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/bc6TNFtM/hooks/rZ1PVBo2OaOfoa8y")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization-webhook"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/sIT/JizKu79q/issues/events/979")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-event"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_228() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"owner\": \"Q5nKnBnt\", " + 
                    " \"name\": \"1xG9\", " + 
                    " \"include_all_branches\": true, " + 
                    " \"private\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/Q5nKnBnt/qOr25FwZ3nBQhL/generate")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/v/GD/comments/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#update-a-commit-comment"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/CsX2R1kRD/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_229() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/UGn9cVZi/ZwYCCut/milestones/miwan")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-a-milestone"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/343/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/54EHI9p4p0lcrvH0/teams/oHQes4/discussions/nIF5yFo/reactions/iV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_230() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"homepage\": \"U4SdctrdmuU\", " + 
                    " \"private\": false, " + 
                    " \"visibility\": \"EVOMASTER\", " + 
                    " \"has_issues\": true, " + 
                    " \"has_wiki\": false, " + 
                    " \"is_template\": false, " + 
                    " \"allow_rebase_merge\": true, " + 
                    " \"delete_branch_on_merge\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/zUsKKFQ4W_qw/VDD4bJfBOmOztF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/repos/repos#update-a-repository"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6FSd296/jQRdsjhK4yLvnR/releases/lh3U/assets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-release-assets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/xmTq/ns_Rgg0UD/environments/O_eEU3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#delete-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_231() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/nf20LW9J2DJiLGfc/BZlKzU7/pulls/m3T/reviews/PaxWf/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"+1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/t/JmBM7y6YCVTGBvIT/issues/comments/YaLS2O3B7YZ/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 415, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/PfMyb4UYmH/actions/permissions/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_232() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/yqrDzaJo3/teams/yIpRjSh/discussions/B/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/s/LbPjIO/environments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#list-environments"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/gists/RAm9ICYX/comments/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#update-a-gist-comment"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_233() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/j5/teams/2kZ/repos/z570EPgW6sBkps1/NnVWrURKfl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/rUe_3L10O/teams/Ku1BrE/discussions/qf3JmkylX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/837/memberships/cFsm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_234() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/37x/actions/runners/aMFUlF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/columns/cards/149")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project-card"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/7ZyKYtF97kB/kEpY/actions/workflows/dvqXazDT/disable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_235() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"Operations\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/organizations/WEgJ7GC44GH/Users/B5bRyR0n29OoQnsZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/nfgupmHD0hTyBbFJ/actions/permissions/repositories/BOzO3OxG5_ZQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/8eghK/BrlsbAqNA9pf9/statuses/9TkO5Rt9Du0nh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/statuses#create-a-commit-status"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_236() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/5/public_members/FH1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/VG3iRT/teams/WNlKlr/discussions/Vo/comments/05ixIGN/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/gists/bmzETPEPuxTP/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#star-a-gist"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_237() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/d5dE8XXBRyW6/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/UJgyZMpI/oQq/check-suites/2B05xP/check-runs?filter=all")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/IJ7iRRd/DQl1F/traffic/popular/paths")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-paths"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_238() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/HZyiQxS4/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/i86XSvViR/5jdh3Kwjx/actions/runs/rDkTBbx4_iwz/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/fXvUzI/1/actions/workflows/g/runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-workflow-runs"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_239() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/y1Fcn/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/4fk9DBSVKLmhJfZ/h/collaborators/uftQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/TDMFXSwe92wd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409, 415, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_240() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/enterprises/e/actions/runner-groups/sLejCUuZvnDWV9ek")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"vze_tZ\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/orgs/L/teams/r4TcL9NzlCyAAoW/discussions/1/comments/vze_tZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/9o/actions/runners/QN6NCGiOy5hp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_241() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"sha\": \"m9FOSafdhLHfGTa\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/UE8PObrdvjzpT/9m/git/refs/s")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid request.\n\nAt least 40 characters are required; only 15 were supplied."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#update-a-reference"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/glpcLg/r9Vy2JyB8IS4/invitations/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/7l6QxlfZpH/z/labels/PlU0N")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-label"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/mGJG/hYF/contents/MMA_BeRnqusA?ref=uTsX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-repository-content"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_242() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"state\": \"EVOMASTER\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/user/memberships/orgs/APej0TWbg7Am")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/KIYP0G9T0g9afa/teams/bp_F6cfa6fMVRP/discussions/JC0ZwfBhl/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"access_token\": \"In0dryk_fBVi3gwA\" " + 
                    " } ")
                .post(baseUrlOfSut + "/applications/5bQwAgLNbQcf/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"EdqmVdtMo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/LvALgb/Xgo0WUtaV/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-repository-project"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/4buZsQd2TyAj24/Hu7BQG81/releases/assets/r2RUNvT9pxhz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-a-release-asset"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_243() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/mdSsTOwG/actions/runner-groups/REYou7RDQ/runners/CVPh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/A1qWkTAzl/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/q_2/teams/_hUG/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-child-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_244() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/ujk1oRC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#delete-a-gist"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/LxL_VEt_3cm/1/stats/contributors")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/ScQUuG/Be/comments/0Ocrck/reactions/Rywz6irDXRD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/95jTPhl1Wr7D/migrations/_NRKvLh7UEq/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_245() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/e6_zWIv/WLb20/actions/runners/MBKB6IVGjXBFb6q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/C7FX5C7I8rqzJp/LzR9YB_vXcb8FG3b/branches/kledx5yP5/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/jO46sG9NWEGWHBd1/packages/EVOMASTER/zWKLStH/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-a-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"3\" " + 
                    " ], " + 
                    " \"userName\": \"fXhToW\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"0yAd57rqxw\", " + 
                    " \"familyName\": \"dpGEuXVjAhUUEzs\" " + 
                    " }, " + 
                    " \"emails\": [ " + 
                    " { " + 
                    " \"value\": \"u3SH1vje\", " + 
                    " \"type\": \"Vtomb\", " + 
                    " \"primary\": false " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"23wm84Rq7n\", " + 
                    " \"type\": \"6uNL\", " + 
                    " \"primary\": true " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"vqa4khCJpR24AooI\", " + 
                    " \"type\": \"fYKL\", " + 
                    " \"primary\": true " + 
                    " } " + 
                    " ], " + 
                    " \"groups\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"value\": \"kUnu1OgJhp\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"value\": \"WyjlYtmRNOR9H\" " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/k_zJ2BrmjPJapOsg/Users/BwTzvvvqV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_246() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/TkKEzi4V0u/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"VQYDe\", " + 
                    " \"key\": \"IgB0uk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/Jvus9DEVF6iydCX8/IgB0uk/keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#create-a-deploy-key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/0Ho/packages/npm/E9IfTfMQnvy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_247() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/mDAEY_Jk_cCw/mUWvuLE/pages/builds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#request-a-github-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/834HDbp/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/_iIZPcdiG9F/migrations/fPMuYVH0ZODx7767/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/77/K0JviXN/traffic/popular/referrers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_248() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/0qY8E5/failed_invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"event\": \"REQUEST_CHANGES\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/z89cqbsv4/2NPwWEBK_/pulls/zDKE3/reviews/1KDjEYY6/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"organization\": \"FEmdTIhiRI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/IXlenoz6/M/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-fork"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/EEoz/UpRoi5/issues/Mw6ZUqXev/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-events"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/X/_TwHIiQq1r7wgyU/pulls/SJu7uxiZKyDRYXk/comments?direction=desc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_249() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8y_A7wb/DkUZP/stargazers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-stargazers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/rubygems/MhWkv/versions/_Qr0RibLKF")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/OQ2d1/actions/runner-groups/9PX0Mg5xTYccc/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/515?exclude=qAQjwNw&exclude=wSoKnxZRUAcSble")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#get-a-user-migration-status"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_250() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/zen")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'text/plain'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/QHDrb7Mu_GDQzuAh/1/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/962_MG3i75f/packages/npm/Uh51LmS0zTfEcAge/versions/NeEDT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/scim/v2/organizations/fC/Users/R7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#set-scim-information-for-a-provisioned-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_251() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/AYhcqNoFvou_/79Ko1HQQLe/pulls/comments?direction=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_ZpFaRh1B/KCQifBxi/code-scanning/alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/Fq1/teams/GIqC/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .post(baseUrlOfSut + "/enterprises/FTgTZ4URCqYgm/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_252() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/1y5ZxlNA/m9BoIetS/pulls/LNO9AN/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/SWXWLcqWuvz/packages/container/Dvd9Pu40pa1Hx/versions/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/blocks/1vrGmGLCWv3xT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#unblock-a-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5lp4GEXF/3vs32dU/actions/workflows/L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_253() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/9I9dT1feIaS_jdW/actions/runner-groups/JgDjkGk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/8G_Pp5DN/actions/permissions/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/keys/751")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/ka7cE4Jj/members/C_GRRFH1WFlV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#remove-an-organization-member"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_254() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/LgIhNNVO1kitX/members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 302, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/cx76R/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/jJlkOICtLJPO/actions/runner-groups/TP8DVtiG/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses/vh1QteEagPG7d7W")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/licenses#get-a-license"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_255() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_sha\": \"AC\", " + 
                    " \"ref\": \"Re2xrIU5YspE\", " + 
                    " \"sarif\": \"l21JFcMIfrHdfW\", " + 
                    " \"checkout_uri\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/RNd7bmDmqB/l21JFcMIfrHdfW/code-scanning/sarifs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#upload-an-analysis-as-sarif-data"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/fxN/members/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/codes_of_conduct/9Jg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/gF4NbLO2K2nr0_3H/members?filter=all")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 302, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/M/wECYjde42QHnv/actions/secrets/8hWHN7wbfSwC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_256() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"base\": \"\", " + 
                    " \"head\": \"YRCnLPcz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/ud8rguFp/_0Au/merges")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#merge-a-branch"));
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/gists/nMEo2HWNVxhsd/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#star-a-gist"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/KFFIEFqaWWm/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-commits"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/cmAmev96WIFK_V/X5p/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#set-a-repository-subscription"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/enterprises/mCGUHf_IYcD/actions/runner-groups/l1zlw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_257() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"base\": \"MT\", " + 
                    " \"head\": \"7tZ\", " + 
                    " \"commit_message\": \"L\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/RbQ1gCBvzDqK/V5_/merges")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#merge-a-branch"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/OcyYJrxUy9/cI5xMc1P/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#cancel-an-import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_K55Rd/lAYbzz41W5YzLxX/pulls/comments?direction=asc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/authorizations/122")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_258() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/scim/v2/organizations/Eo/Users/FTy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"event_type\": \"z\", " + 
                    " \"client_payload\": { " + 
                    " \"EwVG\": \"sW4n\", " + 
                    " \"gpY\": \"G6yeMz7SlnjM7qH\", " + 
                    " \"\": \"\", " + 
                    " \"Hsp_tX5\": \"htuvMK8\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/ilMypasTn5SP/1/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/orgs/J/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-an-organization-project"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ey/memberships/fHOFrk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/app-manifests/IXVrEIt5zHE/conversions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"reviewers\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/rGCB_mCoiVwkXU/c5Sf9XhWJsC/pulls/oFX7T6Ts/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_259() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"expected_head_sha\": \"8f1NNJJvNhwCSJFQ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/DDBOeR1n3Mh4TS/wXiFfOFo/pulls/fz8tR/update-branch")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202, 403, 415, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/J_KdVt2cuXdYkC6/tme6BwgFLq/deployments?" + 
                    "sha=q527&" + 
                    "task=9xzNXmeg&" + 
                    "environment=908KzzblPGIW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#list-deployments"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"runners\": [ " + 
                    " 646, " + 
                    " 403, " + 
                    " 62, " + 
                    " 754, " + 
                    " 385 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/MVCdJ_4LqmFN/actions/runner-groups/afVSsF9KSSvt3/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_repository_ids\": [ " + 
                    " 59, " + 
                    " 624, " + 
                    " 915, " + 
                    " 363, " + 
                    " 789 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/Q9/actions/secrets/VYZk7f/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_260() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/h2bLve1kJ2/CDZqwQRcRmAjP/branches/S0/protection/required_pull_request_reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Vy2zzt0wyZn/EWU8cbkghS4_4z/hooks/WZ6oVvl6px/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/following/OiT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ZAhUQw6CPMo4Z/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/4GeK0M8EekkyN/packages/npm/YY5D21aDQMLQ3V/versions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-an-organization"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_261() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/QZOHbtsq/XEfdO9NhzmKzq/git/ref/6uu7m1R")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-reference"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"last_read_at\": \"kOqJF8lsz6Tm8\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/_t3dnm9myjjf1Nh/cFHoawFX/notifications")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/6oo3/1/import/authors/752")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"TqGTyOGpDpW6E\", " + 
                    " \"head\": \"l85rE\", " + 
                    " \"base\": \"RnVYbPFvMA\", " + 
                    " \"maintainer_can_modify\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/hNBvCNmK_gN_y6Q/1/pulls")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#create-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/zzXqO0Vg0d6u/credential-authorizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_262() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/lry2O4rRa/WjUX/branches/Y/protection/restrictions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/dRU/actions/runners/JDTtkQbLxR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"limit\": \"collaborators_only\", " + 
                    " \"expiry\": \"one_day\" " + 
                    " } ")
                .put(baseUrlOfSut + "/orgs/n4kzP/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/263/discussions/mDiXTfmijGmUZ/comments/B7_0HWyJ38M")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_263() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"hooray\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/892/discussions/aySnPFW2qrAE6Vfr/comments/okjud94/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ex/credential-authorizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/packages/rubygems/XuFvEv4S5ya1oFLh/versions/RkE5fzy")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/g/H/projects?state=all")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-repository-projects"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"message\": \"_ALHFe\", " + 
                    " \"event\": \"uulKr3\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/I4_wyNepHtAP/1/pulls/2/reviews/iJ0hC/dismissals")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_264() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/user/installations/512/repositories/Ey4O3wt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repos/p/f00m1XloGNz/subscription")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#delete-a-repository-subscription"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/J2WQAki/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/hlB/SlcwtweeJid/comments/tMjBz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#get-a-commit-comment"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/j5o/teams/aJSB/projects/I8ptNWT_8GQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_265() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/217/discussions/lOv6Z99/comments/doLiCys_Inr2G/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/jcARtBLeSvc0n/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-commits"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/6y6/nLuApdFT0zPZbi/branches/rm_ybKZe9VbAIDs/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5Qgwu7/uHD6dnHvwEhG6LO/contributors?anon=m3eWd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-contributors"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/WBOXFXO2/y2TSu9/tarball/KZ5fH3sNs9jF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#download-a-repository-archive"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/aq8eRv/Em5QCB9zpgCP/check-runs/AFHbqNPaGe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#get-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_266() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/RBaKcQdhd0FNa98/actions/runner-groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pt/SCNLoWiuIAH/actions/workflows/Mfj3Y")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .put(baseUrlOfSut + "/enterprises/5KmqkAFCWd5sl/actions/permissions/organizations/NY3e71SGNM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/JR3Nufl9xp/WTk2tB7e1Js/deployments/Wc97W4ulUwh6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#delete-a-deployment"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/cy2U/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_267() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XuVUZOabSLYR/ZfYKGOMox5/branches/1/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gitignore/templates/Zcjkqy7iaeM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/gitignore"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/67DJMM/XhSTDDamqihT/check-suites/1/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"permission\": \"admin\" " + 
                    " } ")
                .put(baseUrlOfSut + "/projects/295/collaborators/NvsJEqzG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#add-project-collaborator"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/j4aSpoyCFme0MeAB/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/qVk6_6mP/migrations/CVepr5/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_268() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/Va/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/6_5vV/memberships/enMhTzYI62")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/UkaE/rdqVEyxLQCEjCCs/branches/xlfCWyKNSbej_T/protection/required_status_checks/contexts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/N/teams/dpc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#delete-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/LU/installations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/gists/UwvFLkO7znb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists/#update-a-gist"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_269() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/IdWV/hooks/0fgfuAA6gcdoTzWp/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/hEGk0O/members/_qE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/qRnlPQz21WG/actions/permissions/organizations/YxCOzOBlBd2y0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/OlH9_zRP/21md4s7G/milestones/MkS0/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/O4BH7boC4/installations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_270() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/252/repos")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/IxHU/issues?sort=updated")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"encrypted_value\": \"KL1\", " + 
                    " \"key_id\": \"qGtY76tb8v\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repositories/398/environments/j/secrets/JdtSNR8hkg8BW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/p/kqkF7i7DNIf/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#create-a-repository-webhook"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/NDQySXEdV9Q9nO/6Q_E/branches/aHvulLnk0XGC4/protection/enforce_admins")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/gists/NRqfbtxHy07/comments/K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#update-a-gist-comment"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/RNSOJ/spKQMnCFANVDMr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-revision"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_271() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"contexts\": [ " + 
                    " \"cp4u3fQ5\", " + 
                    " \"3h09wQ36kyTDA\" " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/3Qa5oMcgMA6ySbZd/SZeIs/branches/fQArAMbkggI/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"lR9CXRF\", " + 
                    " \"rMVtvcTb1fT\", " + 
                    " \"4MZ\" " + 
                    " ], " + 
                    " \"userName\": \"Df5IBRI1\", " + 
                    " \"name\": { " + 
                    " \"givenName\": \"0QIm\", " + 
                    " \"familyName\": \"hH\" " + 
                    " }, " + 
                    " \"emails\": [], " + 
                    " \"groups\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"value\": \"7__uDFzh6zN6T\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"QeKuqUKL\" " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/v6yWP4/Users/w62HG52rhtwAOvH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/OpVUsK3s/EmQ97qd549riEuYe/environments/HoAU96w9h9Ql")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#delete-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/IMAIwn0U/teams/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-a-team-by-name"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/uq2r10Gdjh3A6N/B/actions/runs/dJym/approvals")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/-1018179779/members/7cfyWCv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_272() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"BLCfibRvgrZ7Q0Gn\", " + 
                    " \"body\": \"tPD1dlFvdB4x\", " + 
                    " \"assignee\": \"6E6ISUr2titoE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/U_bT4OI/tPD1dlFvdB4x/issues")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-an-issue"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/DulSS/teams/3C/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-child-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/user/packages/maven/ek2qYRQwm3d/restore")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/169/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/688UoczYWB5/I3r/issues/zeLmYlejZnD/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/DvxZJbaBlzbZVU/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_273() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/wSz/OvSVR3r5/actions/workflows/alX4BP")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/311/cards")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-cards"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/ghSsqOAEtJYs_rU/9rnyhCX0aOozC/branches/Rap0xYynk90H2h/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Ai9U/5pzuoR/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#cancel-an-import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repos/cwEK_Sos/Ierly4CMLZc6lm/branches/LDr1/protection")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_274() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/sLUgpxdZgyx/teams/wAA152nR4/members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repositories/291/environments/HZYFTsrEs/secrets/oerDfYA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-an-environment-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/ICixr1/23wthOqLiPpw0O7/actions/workflows/T5_dE6u2/disable")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#disable-a-workflow"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"selected_organization_ids\": [ " + 
                    " 630, " + 
                    " 881, " + 
                    " 572, " + 
                    " 46 " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/enterprises/arSVcfJSME/actions/runner-groups/_BHoI5TUda/organizations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"teams\": [ " + 
                    " \"i\", " + 
                    " \"F\", " + 
                    " \"ym2B60sR9Wv2\", " + 
                    " \"cFUwaMYyFCmheN\", " + 
                    " \"bjnSunSSkX\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/Poa727a3Q7WpzY/J1dE6L/branches/pL9cTta/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_275() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/xflul/settings/billing/packages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/kxS9W_tD/failed_invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"access_token\": \"pM\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/applications/bu20wEa00Lptb/token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/c/migrations/4hpVDFddRkrSdB/repos/_nNzXtLkQHoVJTXH/lock")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"position\": \"YsX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/projects/columns/651/moves")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#move-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/9DccPNMSumOD_itY/dh9O/invitations/6xW2gx8YyvEo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_276() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/authorizations/861")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/u71KvoFTqkI_ChoJ/hooks/1_pPVixV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/j1KGoHF9/actions/runner-groups/KlF/organizations/bQ59SEOt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/nOi0rnEgzLtBlwBE/X/pulls/Ou/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/8s/DAZWUt7JyeXn/code-scanning/alerts/ZeyStCp1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gitignore/templates/1QeQeTDmBzz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/gitignore"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_277() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Omi/vr/hooks/L6rQDdfAe7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#get-a-repository-webhook"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/Qk_1HHlcPa3/MqI/branches/vkXovyQBCWU6JHg1/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6/YDoaE1G8/git/commits/XnqGB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-commit"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/AYNShrD8WHojt_om/uw/actions/artifacts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"heart\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/gg6FS/ALOEquwW2u_/issues/FUCZjy_8rjHRp_/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 415, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/6T/Users/hPQiZGe3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_278() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/t5n/actions/permissions/repositories/0LhQEdH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/ahAXMyocUCq/orgs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/JHF4L5/LoxFSuKGuiU/issues/Z5wBO/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-comments"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/t0v59nSPvHzG4f/v/contents/1la_Sv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#delete-a-file"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/1dmJ0_eGCt/o8DOFs/git/blobs/5TH5F7Rile")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#get-a-blob"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"new_owner\": \"3EJ1\", " + 
                    " \"team_ids\": [ " + 
                    " 735, " + 
                    " 333 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/AtaUl/_n/transfer")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid new_owner"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#transfer-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/xQkppujBzrDQ/31yBoAiE/compare/7kGN6J...epmPwCgmjc6U1_6c")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#compare-two-commits"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_279() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/dpyohn2uwM8mR3/tSs7fj4En/code-scanning/alerts/Ne1iriz_e1oHR/instances")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/n09RVsldDDJ/6H5BLeOHYu6uqDy/actions/workflows")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-workflows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/nuw0uSO8TShLw/received_events/public")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/repository_invitations/693")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/673")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#delete-a-project"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/2_rQjIbdDljGt_OW/actions/secrets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-organization-secrets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/pfuEA_uEwL58/following/_MXor1lOv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_280() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"vcs_url\": \"tYHywbdQHoUh\", " + 
                    " \"vcs_password\": \"fKokuQjPbcLZ\", " + 
                    " \"tfvc_project\": \"r\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/Zug5n4jbmGZD/2v6C7Ytw2EFre_/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#start-an-import"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"DQ9HAc5\", " + 
                    " \"config\": { " + 
                    " \"url\": \"5rgi_83exqrDH1\", " + 
                    " \"content_type\": \"FZ1N2qB\", " + 
                    " \"insecure_ssl\": \"_FOL0p\", " + 
                    " \"password\": \"V\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/phnT7TkY_3GSEgp/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#create-an-organization-webhook"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/6/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/VZqlSyrVs1fliSb7/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#unstar-a-gist"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/txaM8WHbT/teams/bKaL410HpoWhS2Z/repos/CC/FVr9tZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/DoIxSMNyUjegO/PY/collaborators/dpCW2WvFNt/permission")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/Om3RI2YYzHfEww/migrations/RdzjfAbvDL1b")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/0XO/wTOzoSWDUFY/check-suites/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#get-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_281() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/d9IHF9l1VQZMVP3/y/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/143/discussions/yvgPf/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/FBPM/jtt/branches?protected=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#list-branches"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/WcIT5zluck/gFl7KjI/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-repository-projects"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/PgfmMX1Qsu49/ncl/check-runs/6lRMPebNroP/annotations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-run-annotations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/fbMbFxtAY_C7JN/1VjkK/actions/artifacts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/36/memberships/GI_hKYB3BO2D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_282() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/PviU6c8ZT8D0E/NDJfKX253v6/contents/n?ref=WMG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#get-repository-content"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/z9vcgW/teams/0hGmQaT5y6Wr9_/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/qK7acN9ZdGIc/public_members/ZuxYIJtCuLo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/hlYWtsetjmDhMF/vbhx4yt80e2_UKl/actions/runners/remove-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/URnIe/ZBVaiocV/pages/builds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#list-github-pages-builds"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ci0eJL5/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_283() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"teams\": [ " + 
                    " \"80VIUJkdOB_HYgj\", " + 
                    " \"F2hS6TWB1W6usd\", " + 
                    " \"\", " + 
                    " \"AWwRFK\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/L/x8epyG/branches/wa_/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .post(baseUrlOfSut + "/orgs/nzQfViv2k4eW/actions/runners/registration-token")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/tBZK/migrations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#list-organization-migrations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/7WVl4Twbnzm/PBditM/pulls/1/reviews/RXEDeLSzQ5wP2qe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/VSA6qzUUtcktrq4J/BLZfkEd1/actions/runs/sx/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/tED/packages/maven/ZkdFbWgQa70Wu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_284() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/oLI4OGryTUBcj/2gKbKRdmDl6aD5/actions/secrets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-secrets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/50zgk9G4Vfvgm/a4ytcvBGV/git/blobs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/git#create-a-blob"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/H2y883Kiv_XJsbNB/migrations/e/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/user/memberships/orgs/ivJktjXRmFYK0rb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/ti/6R/milestones/YACKW9mQ1gq12PF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-milestone"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .patch(baseUrlOfSut + "/user/repository_invitations/877")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_/A0GcI08s/code-scanning/alerts/_LtfwfzysFD/instances")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/luvJnWRt/followers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-followers-of-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/HwYdwkWst7VPrFYm/w2fwZD/pulls/Q_rL0yQlFqUl/reviews/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_285() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/orgs/wE88cH/teams/xEgL/projects/uyO1_RuXW5keHJd8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .delete(baseUrlOfSut + "/repos/j4dj/_nhA/actions/secrets/MrXS4HgJzesD7W")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/md/N/pulls/X/files")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-pull-requests-files"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422, 500).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/v1/teams/BDEitx/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-child-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/FFfk/teams/6uSXtiJVLBBSLxn/discussions/ljyL/comments/zM41jC/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/HcFMt/wMnHm6No/invitations/r_O")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_286() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/starred?since=H7Jv")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid since parameter: 'H7Jv'. Must be an ISO 8601 timestamp."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/gists/#parameters"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 304, 401, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/MLwhiPC4OJcU/teams/J")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#delete-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/x6ciB3/jr_D7/pulls/comments/ihlS2k4pSv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/octocat?s=RiKiQ93Q5")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'application/octocat-stream'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/NNoXfdbeohFsw_O/gPza_r7/pulls/eafy8QZz/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/user/packages/container/ALdwhJXJF8SI1G/versions/yZMbXgrrHSWPq/restore")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The version_id parameter must be an integer."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 401, 403, 404).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_287() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/m7/teams/fRpF/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/octocat?s=5Ti7fytY")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'application/octocat-stream'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/applications/Hjklf/tokens/Y7CIoo2BMDa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/gists/ixkwVp7LvioKzY/comments/zlO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#delete-a-gist-comment"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/37gNI/UgUlq5eL/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repository-events"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/9_0eaD/2NG5kqdmM/subscribers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-watchers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/orgs/aQxjbB5U/packages/npm/SyMlTm0KuWt1/versions/dA/restore")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_sha\": \"Fd\", " + 
                    " \"ref\": \"YN0TfFz_\", " + 
                    " \"sarif\": \"\", " + 
                    " \"checkout_uri\": \"olt9ujg9bUk\", " + 
                    " \"tool_name\": \"3_TD3IBNUrHRYV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/pBoZYI33WyIS/1/code-scanning/sarifs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#upload-an-analysis-as-sarif-data"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_288() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/TMEFdj1C2T/vhiX79tDh/actions/workflows/dLkqHlUv/runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-workflow-runs"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/scim/v2/enterprises/wmVF/Users/0mZMSZEpc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/xzIJfHo0SmlJXkC/pIghHMnW/pulls/3mCRjzwpvYRp5SN/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/grants/816")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 304, 401, 403).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/0TD/teams/QPUSKz/memberships/m2h")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/q89TnZU1qt_QZfp/k0wxdf81Q/issues/1/assignees")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_289() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5OykzIMryuq/bsZql4_j/actions/runs/LU9c/logs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/rofYgw0_4XCHRdm/AI0VvuTF2/branches/YKSJ0T9/protection")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-branch-protection"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/mc_CP7pmgeXaQT/teams/0KVUZ/members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/e4cz_kBJKXx/qrKYe/subscribers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-watchers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ZqIRr7V/1/branches/ataVw/protection/required_status_checks/contexts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/SnFu4jWok/teams/egL9sUio7T8PMYLQ/repos/PiIMxCB5C6rNkA/ule")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XbkBzlKYzY/dHVOGBhShfEOnI7/pulls/1/files")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-pull-requests-files"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422, 500).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_290() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/yA/EwAyQ62T/issues/comments/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/NuXzz4zAMu/T1DclqI/stats/contributors")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/wNhdC7Aqxq/SJta4j/hooks/IxGGDRiNGDHca9/config")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/QVa1/actions/runners/LcMTq9tbksj7n5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/9Qgj1b/RlDlo/pulls/N1VFysruu/reviews/CJ/dismissals")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/dhdeh/teams/nzIk/discussions/W4za176mUdpi60/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/8AP/actions/runner-groups/ilpocal76aO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_291() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"qzfPyQMZwY\", " + 
                    " \"config\": { " + 
                    " \"url\": \"F\", " + 
                    " \"insecure_ssl\": \"lEYsz90VIo\", " + 
                    " \"username\": \"ifpefMkYZF\", " + 
                    " \"password\": \"7878ZrAt\" " + 
                    " }, " + 
                    " \"events\": [ " + 
                    " \"zIRdD37wPrtR_\", " + 
                    " \"6hCpND\", " + 
                    " \"_xf\", " + 
                    " \"VjHv9uOssd0Q\", " + 
                    " \"JotjXVT7YD07to\" " + 
                    " ], " + 
                    " \"active\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/orgs/eq9n4sE1Jbfv/hooks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#create-an-organization-webhook"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/enterprises/EWLDXa4w7itoz/actions/permissions/organizations/xZAHD7JJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/EeBHKkG6/gpg_keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/DuqpKtDOLtnkvy/Groups/0N")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/xyuPYI/actions/secrets/c1bipKhW8A2v30z/repositories/314")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 409).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .delete(baseUrlOfSut + "/orgs/MQc9oscL/teams/fp7wMx/discussions/T4irqxFPTN8nXz")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/repos/pI3uFN6Z/EWEBvSKoWT8Vug/collaborators/UICFQRUlNBa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204, 403, 422).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_292() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/casVWiGt/4OX/invitations/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pvg3lbrn0nj/dUj/traffic/popular/referrers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/Epth73Aejyhu/mQVjgilakzBm/comments/yRzowahMj9JdOJ6h")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#delete-a-commit-comment"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/DAU0/actions/runner-groups/JYKbbWh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/4dkZhP/team-sync/groups")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"position\": \"prXMUhoytj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/projects/columns/963708073/moves")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#move-a-project-column"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 422).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/oqO3ihvnwUa5/H/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-labels-for-a-repository"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/kv0ZgkdJ_Cgxz8gV/i2/issues/BgMPv5xOmy9ZXc/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_293() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"users\": [ " + 
                    " \"lCv\", " + 
                    " \"ESfeeRTiMSs\", " + 
                    " \"FTQQIlb\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/lSw/Z/branches/yckS/protection/restrictions/users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/columns/cards/630")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-a-project-card"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/wI9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#update-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409, 415, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5uGhx/fN/contributors")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-contributors"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_IPFcQnq94cr/6zFpbIGx_L/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/qS3cRvQgB/orgs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/VB1LG/iqsD/import")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/source-imports#get-an-import-status"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"commit_id\": \"PWWx36KnbTsD\", " + 
                    " \"event\": \"APPROVE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/VuO/rIx_r2BgI/pulls/uk8o4fVBXhLdLRB/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_294() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/repos/7U_qbNz_c/uXbpMaVLz95r/vulnerability-alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [ " + 
                    " \"\", " + 
                    " \"6ymyemsctDa3k\", " + 
                    " \"\", " + 
                    " \"bymNIodLf4J\", " + 
                    " \"8OL\" " + 
                    " ], " + 
                    " \"Operations\": [ " + 
                    " { " + 
                    " \"\": \"Hs205zXBI7aN\", " + 
                    " \"Cqn7ci\": \"7O\", " + 
                    " \"z\": \"Jh_G\" " + 
                    " }, " + 
                    " { " + 
                    " \"kUa\": \"i\", " + 
                    " \"dELwTEXvgSX\": \"W\", " + 
                    " \"19PeoPWAPHWJ\": \"4f1QsCEwkusWXW2V\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/scim/v2/enterprises/tImWi4aYREZFbyB1/Users/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/xeSIPzA/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/q1YimePzneom/teams/VScO/discussions/8PwH/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/XM4ziDR6rO/VaMqfK9GV/issues/comments/4ZYg3sELgdLzDfMo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-comment"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/wr/4bnExiSs1e/pages/builds/662")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#get-github-pages-build"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/yNnmC/f6PBOw/check-suites/KaZ44uRFH/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_295() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/3MzY3bKSfpDT/6s/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/applications/V042cMB/tokens/0Q4yJFr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/g8s6/JqBD/branches/CKqrbOtOcw58U2pw/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/633/collaborators")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#list-project-collaborators"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/eLVAAANeiChH44/teams/CY1prE4z/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/mJlbXiQuUji/migrations/QMOz2_mvp1/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/wBHmF2igZmf2/R/pulls/sXem5np/reviews/1/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/UdV6wUJ2i8s/TxerW_kuF2L5/dispatches")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_296() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/applications/yDD3c_leFCF/token/scoped")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/941/repos/bl8f_/K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/GjWTnY/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Joo/8h6QPBnr6U/stargazers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-stargazers"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/repos/b7KAL7iAM/m2Fjk8j/check-suites/ab7kFR6MeNLT9/rerequest")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/IuoO6DS2SkW27/events/public")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-public-events-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/_gsz0bDZ0/IVdjOx2Sc9u0oO/environments/XeYwOTA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/environments#delete-an-environment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_297() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/enterprises/aMytGPKJB9yu3Y/actions/runner-groups/2b92fkvZZPkivJl/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/b0PEmOGHZM/s47vzYY/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#list-repository-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"reviewers\": [ " + 
                    " \"eaEhjLhGJ_9ne9\", " + 
                    " \"zNLlOnodcNZBT\", " + 
                    " \"F\", " + 
                    " \"ylPoUSp8VvX3CNgb\" " + 
                    " ], " + 
                    " \"team_reviewers\": [ " + 
                    " \"TogZFJ8t9\", " + 
                    " \"Ts0kQwWpXAyMo\", " + 
                    " \"lEEHVrMsskD4nUE1\", " + 
                    " \"hwW9JlAURV0fGU\", " + 
                    " \"UxgqcJZEi8led0xA\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/lS44dH6885TMy6nI/3e/pulls/LDb3mXGD4/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/8lsf0h6jMEjU98F/x/actions/secrets/QMo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-a-repository-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/BQjY/HiwQi/notifications")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/TpBWGKHQnRLV27u_/hyrB/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/kIVAQDr/outside_collaborators/qGFX4nJFYVCach")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_298() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/pLvH_Pkv/members")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-organization-members"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 302, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Oz3WnBkI83v/cVzNirZ2/pulls/comments/UT/reactions?content=hooray")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"schemas\": [], " + 
                    " \"displayName\": \"Uw\", " + 
                    " \"members\": [ " + 
                    " { " + 
                    " \"value\": \"VFunZmK8L4\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"D09qP\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/scim/v2/enterprises/aq/Groups/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/teams/298/discussions/DU3BF0F1gua_T3/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/3b1EVMhnJ4VGF/J4K2d/commits/1/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#create-a-commit-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 403, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/fLDnNXJC/subscriptions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/orgs/Lhld/teams/cPEgQD4ANjbr/team-sync/group-mappings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_299() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/i5SsA/3r3iqk5elgB69/pulls/3dPxb/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/organizations/Ugta4CkY/Users/23")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/649/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#download-a-user-migration-archive"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302, 304, 401, 403).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/pYpCcZcsDcfpF7mJ/hzKwUN7XbEqf/hooks/2CX6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/DuCj8qdIDkw8/odrm05_Xs/branches/S2xXFhRPNEMJp4P/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pa/mM/commits/DetY8nwjWqVin/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#list-commit-comments"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Q1q1zX2Jfcw/gvv3qYvpoBo/releases")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-releases"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/GsvG7h626e/aFEqVC/issues/AhEN2tEA/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#set-labels-for-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410, 422).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/tIs/audit-log")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-audit-log"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_300() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/q/BJCOxMfyJr/pulls/MOOXhD9Rep8s/commits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"body\": \"i\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/Nr1M9BChDarT/Irnc_Ib7Uf_/issues/comments/i")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/fs8FWl7/audit-log")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-audit-log"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/0idj_Et/star")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#unstar-a-gist"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/projects/996/collaborators/vK3EgsMhlGiDu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#remove-project-collaborator"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/6/isf1X9FE/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"auto_trigger_checks\": [ " + 
                    " { " + 
                    " \"app_id\": 864, " + 
                    " \"setting\": true " + 
                    " }, " + 
                    " { " + 
                    " \"app_id\": 210, " + 
                    " \"setting\": true " + 
                    " }, " + 
                    " { " + 
                    " \"app_id\": 473, " + 
                    " \"setting\": false " + 
                    " }, " + 
                    " { " + 
                    " \"app_id\": 418, " + 
                    " \"setting\": true " + 
                    " }, " + 
                    " { " + 
                    " \"app_id\": 687, " + 
                    " \"setting\": true " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/6Ay48zzXd1meULqp/n/check-suites/preferences")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/gM/actions/permissions/selected-actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_301() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/qRF6M/lotcvzAx3znkN/invitations/2jdgxj7wBIMs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/fKinA/settings/billing/shared-storage")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/hSJz/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/C2wlY9hNwImul/GKhHJZXRBhFhCt/issues/comments/Fy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-comment"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/projects/551/collaborators/1/permission")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"config\": { " + 
                    " \"url\": \"iy3K\", " + 
                    " \"content_type\": \"f9cLubUPhyem\", " + 
                    " \"secret\": \"lVk6fH\", " + 
                    " \"insecure_ssl\": \"0DN3YseeuhvHoqJ6\", " + 
                    " \"address\": \"3N\", " + 
                    " \"room\": \"3rHBS0S1\" " + 
                    " }, " + 
                    " \"add_events\": [ " + 
                    " \"ZC\", " + 
                    " \"K1mdMXEz5dsfK\", " + 
                    " \"jGIsJdMP2ZNApN\", " + 
                    " \"U3067rzI5FU\", " + 
                    " \"NMtf2_jFFq6fibbA\" " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/y/HC9MuV4pgwNzuo4/hooks/LutkOPWAXV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#update-a-repository-webhook"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/TtRpGUJYDhCDzQ/NS9jL13/issues/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/QA9XwGwAXsO8vmCA/MOVq1OXbcH6g/branches/1CIucQ741LQzUg/protection")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#delete-branch-protection"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/p/8i/code-scanning/alerts?state=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_302() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/kAVdnpizo/teams/doRZ9XqDX/repos/1/_DJAcUlOfchsLa1L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/repos/s2UuDhn_/qVdsqqenGhM_Tn/branches/I9g9cxmJbYAN9/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/pr/BwU/pulls/29adkeFd/merge")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/keys/683")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/iJgJMJI95d/actions/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/YiQF3/RlBlXgCP3h/commits/0v2On4lb6l2gIFxN/pulls")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 415).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/c6MfdlwirgLI/EIoq/issues/events/203")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#get-an-issue-event"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/9Cy/teams/YKb2XJ/memberships/hlo1OTEWda")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/xyc89945hot/OqOwkzC/issues/wqZwnPUiXswW/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#add-labels-to-an-issue"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 410, 422).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_303() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/memberships/orgs/7bJ3X0z4eI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/HapFPOxBgO91wF/migrations/QcGR/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/llZJ/events/orgs/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/FWwj6SbV/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/orgs/52j5rD8obh9b/actions/secrets/qv72Vcr_yKgajO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/scim/v2/enterprises/KtR_Og5uXQoIKMzi/Users")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/zfdAKHABP1FP6/1XM0NA/releases/assets/NZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#update-a-release-asset"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"public\": false, " + 
                    " \"source\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/f_/5qS5uZq4NnkS/pages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/pages#update-information-about-a-github-pages-site"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 400, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_304() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/enterprises/eNDGRg1g7/actions/runner-groups/z/organizations/rhEhAwviQ87V6Ab")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/905/members/cKnDSC3wOSP4Z0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#remove-team-member-legacy"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/pti9aR2F0SD1D_/actions/secrets/YlvgR05a8Bu0/repositories/97")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 409).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/M1XjSMGTUXU/MtCC3x9J39vvkve/comments/y3fse99VD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/commits/comments#update-a-commit-comment"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/Ag98Lm/grants/_UPkybJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/am1/I/actions/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"gpk\", " + 
                    " \"body\": \"507\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/507/discussions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/5pAdR5Urmw9eqdS/TgAD6/check-runs/dssm1/annotations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#list-check-run-annotations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_305() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/licenses/V_XhCa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/licenses#get-a-license"));
        
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/user/blocks/8n84PNyPl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#unblock-a-user"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/pSuyrfHwap/outside_collaborators/64IUw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/OwBphHWOiDVeOHQb/comments/sE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#get-a-gist-comment"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/BYHDdCgw/teams/pozMd/repos")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-team-repositories"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"message\": \"mVRaCKPQVkG5AhuI\", " + 
                    " \"content\": \"ljDIJUS\", " + 
                    " \"branch\": \"oKTT04OPwuNkCM\", " + 
                    " \"committer\": { " + 
                    " \"name\": \"QZAheWLm\", " + 
                    " \"email\": \"2Ro967ZnJI\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/DMQRH03Jzebwv/ljDIJUS/contents/QNrVQckqJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#create-or-update-file-contents"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/LR1Ou/settings/billing/actions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/1XZ5x/Kjh0OKa/actions/jobs/uu8l1gF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(202).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"base\": \"snc\", " + 
                    " \"head\": \"H8P0pX13URM\", " + 
                    " \"commit_message\": \"xRmv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/h_ApVc/8r1sqGibYx_2B9a/merges")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#merge-a-branch"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/CwNsbeKhuJ7M5d/jaNPky1ET7ssj/labels")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#create-a-label"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_306() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .put(baseUrlOfSut + "/orgs/fCbF1/public_members/DOs23sxeqdqep1D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 403).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .post(baseUrlOfSut + "/user/packages/npm/JK9/restore")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Package not found."))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/IMjehJ9Pd/6cqTux/milestones/3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-a-milestone"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/qB_/actions/runner-groups/FvfIfCK4_k46z/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/nDD9aqEzRTGjiUh/actions/secrets/DjuRRR9WCS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#get-an-organization-secret"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/1gmm2a7c/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-teams"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 403).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/3ECacXEg/fTOEq5Y4f9sIV/check-runs/5Z3NGISWQwke1h")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#get-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/hWs3NT6d/actions/runner-groups/oQo6CeVjgwKvN/runners")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_307() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/enterprises/ZocFldYaqkm/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-enterprise"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/repos/qOMlY/P6/issues/comments/iv1AcyZC_8Mc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#update-an-issue-comment"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/GmqLvje7w46/EOF/languages")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#list-repository-languages"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/i_T_/c8l/pulls/Z8ec4lFJ4kXy5/reviews/AE4Mh72Dxo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/811/discussions/Lqd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#get-a-discussion-legacy"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/29GBghK/forks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#list-gist-forks"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/sgqBCBN/Hyc/pulls/duEc6Y/comments")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/WSSCkA/6KsDAJDTRfbYc/actions/artifacts/CvQQPjzw2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#delete-an-artifact"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jz\", " + 
                    " \"details_url\": \"eF9gkE6kaWyCApi\", " + 
                    " \"external_id\": \"PstGY\", " + 
                    " \"status\": \"queued\", " + 
                    " \"output\": { " + 
                    " \"title\": \"715\", " + 
                    " \"summary\": \"pVBuh2ntzx6\", " + 
                    " \"text\": \"IucwDPg\", " + 
                    " \"annotations\": [ " + 
                    " { " + 
                    " \"path\": \"TcoLeAXrkyJJ\", " + 
                    " \"start_line\": 731, " + 
                    " \"end_line\": 171, " + 
                    " \"start_column\": -1723840651, " + 
                    " \"annotation_level\": \"EVOMASTER\", " + 
                    " \"message\": \"BTiRXPm2LaZGYKc4\", " + 
                    " \"raw_details\": \"Yu6OjzgbEFoIffY\" " + 
                    " }, " + 
                    " { " + 
                    " \"path\": \"4hT7u\", " + 
                    " \"start_line\": 917, " + 
                    " \"end_line\": 364, " + 
                    " \"end_column\": 308, " + 
                    " \"annotation_level\": \"notice\", " + 
                    " \"message\": \"aUQmnVX0BH7vc43\", " + 
                    " \"title\": \"M5l\", " + 
                    " \"raw_details\": \"ljxsq3n1xz0WcmH\" " + 
                    " }, " + 
                    " { " + 
                    " \"path\": \"jSiWv8sng\", " + 
                    " \"start_line\": 414, " + 
                    " \"end_line\": 108, " + 
                    " \"start_column\": 265, " + 
                    " \"annotation_level\": \"notice\", " + 
                    " \"message\": \"po4a68\", " + 
                    " \"raw_details\": \"SGm29KVfC\" " + 
                    " } " + 
                    " ], " + 
                    " \"images\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/N/0f/check-runs/cuYGixvP4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_308() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/MAY4/installations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/users/vDpFgbp1mn/following")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#list-the-people-a-user-follows"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/e6hKj4RhNS_Xs/1/milestones/IJaRNEb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#delete-a-milestone"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/X2K/3h/keys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deploy-keys#list-deploy-keys"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/teams/863/projects")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#list-team-projects-legacy"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/BPEG/ZrIhuYau0jNsy/deployments/SuVDm5m31")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/deployments/deployments#get-a-deployment"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/orgs/jJUR3AbxpLLb2/blocks/1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/gists/hdaz78b7xLU/comments/x7XjxnGxjZgtvWX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/gists#delete-a-gist-comment"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .delete(baseUrlOfSut + "/applications/m84OyQFTI/tokens/k")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_8.extract().statusCode()));
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/_/7xl/pulls/6MX_Kc/requested_reviewers")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_309() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/ukjE62a6vcCBsl/cypbvONqfBRamKu/stats/participation")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/repos/yIKmW0vHnVxK/vhYb0hUlmqv6/check-runs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#create-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/pANhyfAgozw5/Ol/pulls/comments/FvCiO/reactions/Imat5K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/keys/182")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ztOXGi7pA/actions/secrets")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-organization-secrets"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"config\": { " + 
                    " \"url\": \"Lj9W1J3Z4V7\", " + 
                    " \"content_type\": \"7CM6\", " + 
                    " \"secret\": \"y8rw80O9gPcM\", " + 
                    " \"address\": \"wI3r9NZBjN9xt\", " + 
                    " \"room\": \"E09vEqZGOiW3fDdB\" " + 
                    " }, " + 
                    " \"remove_events\": [ " + 
                    " \"bkC\", " + 
                    " \"Oyh\" " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/dGJyI5q/RSqoS/hooks/MaSqN52Kd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/webhooks/repos#update-a-repository-webhook"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"client_secret\": \"a9cxfxx5bToIAl\" " + 
                    " } ")
                .put(baseUrlOfSut + "/authorizations/clients/oQzq_sV/fIkhG2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"base\": \"1eCT5\", " + 
                    " \"head\": \"whxjd8z\", " + 
                    " \"commit_message\": \"HbT3pyG8h0S03ELW\" " + 
                    " } ")
                .post(baseUrlOfSut + "/repos/p3K8mc492Z_SidAY/s/merges")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branches#merge-a-branch"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/CLqV4/8pbPMFKCb/issues/wBNusXrphK/timeline")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue"));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/migrations/111/archive")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/migrations/users#download-a-user-migration-archive"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(302, 304, 401, 403).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_310() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"details_url\": \"Xq\", " + 
                    " \"completed_at\": \"r3J1t\", " + 
                    " \"actions\": [] " + 
                    " } ")
                .patch(baseUrlOfSut + "/repos/vxP9lvVE4Hc/ZUKw3TP56yclZ/check-runs/f")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/checks#update-a-check-run"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/applications/nBcN34gfj/grant")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/teams/163/discussions/ek/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/teams/833/projects/epufoYy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"teams\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/pk/_4CyCaiu4rqUcF/branches/9CHpH8/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"client_secret\": \"HI4S6\", " + 
                    " \"scopes\": [ " + 
                    " \"Cu1yUrguozRLNJzV\", " + 
                    " \"TLzQRRcWlb\", " + 
                    " \"c_wcx6K6sOtZ\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/authorizations/clients/JC/fvIF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" \"26\" ")
                .post(baseUrlOfSut + "/projects/columns/26/cards")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/projects#create-a-project-card"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 304, 401, 403, 422, 503).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/el9/oH8COydztBP7dL/issues/comments/M3qFCPIVqFbs2ir/reactions/sGzK1lc1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/authorizations?per_page=604")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_311() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/tvHL0opc_4q2HuMT/actions/runners/downloads")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/repos/Wpf/lK1FXcepgKNiw7/vulnerability-alerts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/BmN5uuw_XzGeS/teams/1bo/invitations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/teams#list-pending-team-invitations"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"limit\": \"EVOMASTER\", " + 
                    " \"expiry\": \"one_week\" " + 
                    " } ")
                .put(baseUrlOfSut + "/repos/L_rn41T3hWWvo5/BOldxIrKFHlnG/interaction-limits")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 409).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/ahm_ifn3Bt/actions/runner-groups/qQ/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" {} ")
                .patch(baseUrlOfSut + "/repos/UMX6sl8iEI0B2/KOVGSq4767lJZYtC/branches/NGs/protection/required_status_checks")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .delete(baseUrlOfSut + "/repos/A/ibM0OXvo/branches/yqDbXbAmQbqvEsQ/protection/restrictions/teams")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"rocket\" " + 
                    " } ")
                .post(baseUrlOfSut + "/teams/620/discussions/z61/reactions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201).contains(res_7.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/user/installations/410/repositories")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token"));
        
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/orgs/QQeyDC_x/packages/nuget/DeK3SJpHyOZQFA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Not Found"))
                .body("'documentation_url'", containsString("https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_312() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/octocat")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unsupported 'Accept' header: 'application/octocat-stream'. Must accept 'application/json'."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/media"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer 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") // Fixed Headers
                .get(baseUrlOfSut + "/gists/public?since=377yO")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid since parameter: '377yO'. Must be an ISO 8601 timestamp."))
                .body("'documentation_url'", containsString("https://docs.github.com/v3/gists/#parameters"));
        
    }


}
