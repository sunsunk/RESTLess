################################################################################
 InvalidValueChecker_500

 Hash: InvalidValueChecker_500_f38d6355b8320289ed9febc48f5d3bc5444414c8

 To attempt to reproduce this bug using restler, run restler with the command
 line option of --replay_log <path_to_this_log>.
 If an authentication token is required, you must also specify the token_refresh_cmd.

 This log may contain specific values for IDs or names that were generated
 during fuzzing, using the fuzzing dictionary. Such names will be re-played
 without modification. You must update the replay log manually with any changes
 required to execute the requests in your environment (for example, replacing
 pre-created account, subscription, or other resource IDs, as needed).
################################################################################

-> "GET /users/v1/'jp#>2Q&h HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:5000\r\n\r\n"
! producer_timing_delay 0
! max_async_wait_time 20
PREVIOUS RESPONSE: 'HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.7.16\r\nDate: Tue, 28 Mar 2023 07:58:06 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 41587\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near "jp": syntax error\n[SQL: SELECT * FROM users WHERE username = \'\'jp\']\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "MlXiVHCXDDXXICO7gogN";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>OperationalError</h1>\n<div class="detail">\n  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near &#34;jp&#34;: syntax error\n[SQL: SELECT * FROM users WHERE username = &#39;&#39;jp&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-139812076305872">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1965</em>,\n      in <code class="function">_exec_single_context</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">                        </span>):</pre>\n<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>\n<pre class="line before"><span class="ws">                            </span>break</pre>\n<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>\n<pre class="line before"><span class="ws">                    </span>self.dialect.do_execute(</pre>\n<pre class="line current"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class="line after"><span class="ws">                    </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre>\n<pre class="line after"><span class="ws">                    </span>self,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076306000">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py"</cite>,\n      line <em class="line">747</em>,\n      in <code class="function">do_execute</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>\n<li><div class="frame" id="frame-139812082360144">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">2548</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812077100496">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">2528</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812078537552">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">2525</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812077862608">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">1822</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812077694800">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">1820</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812077518544">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/flask/app.py"</cite>,\n      line <em class="line">1796</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076785360">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/connexion/decorators/decorator.py"</cite>,\n      line <em class="line">68</em>,\n      in <code class="function">wrapper</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>else:  # pragma: no cover</pre>\n<pre class="line before"><span class="ws">            </span>@functools.wraps(function)</pre>\n<pre class="line before"><span class="ws">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class="line before"><span class="ws">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class="line current"><span class="ws">                </span>response = function(request)</pre>\n<pre class="line after"><span class="ws">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076785232">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/connexion/decorators/uri_parsing.py"</cite>,\n      line <em class="line">149</em>,\n      in <code class="function">wrapper</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>form = coerce_dict(request.form)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>request.query = self.resolve_query(query)</pre>\n<pre class="line before"><span class="ws">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class="line before"><span class="ws">            </span>request.form = self.resolve_form(form)</pre>\n<pre class="line current"><span class="ws">            </span>response = function(request)</pre>\n<pre class="line after"><span class="ws">            </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>return wrapper</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076783824">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/connexion/decorators/validation.py"</cite>,\n      line <em class="line">399</em>,\n      in <code class="function">wrapper</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>for param in self.parameters.get(&#39;formData&#39;, []):</pre>\n<pre class="line before"><span class="ws">                </span>error = self.validate_formdata_parameter(param[&#34;name&#34;], param, request)</pre>\n<pre class="line before"><span class="ws">                </span>if error:</pre>\n<pre class="line before"><span class="ws">                    </span>raise BadRequestProblem(detail=error)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>return function(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076784592">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/connexion/decorators/parameter.py"</cite>,\n      line <em class="line">120</em>,\n      in <code class="function">wrapper</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span># attempt to provide the request context to the function</pre>\n<pre class="line before"><span class="ws">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class="line before"><span class="ws">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">        </span>return function(**kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076302800">\n  <h4>File <cite class="filename">"/vampi/api_views/users.py"</cite>,\n      line <em class="line">27</em>,\n      in <code class="function">get_by_username</code></h4>\n  <div class="source "><pre class="line before"><span class="ws">    </span>return_value = jsonify({&#39;users&#39;: User.get_all_users_debug()})</pre>\n<pre class="line before"><span class="ws">    </span>return return_value</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>def get_by_username(username):</pre>\n<pre class="line current"><span class="ws">    </span>if User.get_user(username):</pre>\n<pre class="line after"><span class="ws">        </span>return Response(str(User.get_user(username)), 200, mimetype=&#34;application/json&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>else:</pre>\n<pre class="line after"><span class="ws">        </span>return Response(error_message_helper(&#34;User not found&#34;), 404, mimetype=&#34;application/json&#34;)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076302928">\n  <h4>File <cite class="filename">"/vampi/models/user_model.py"</cite>,\n      line <em class="line">72</em>,\n      in <code class="function">get_user</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@staticmethod</pre>\n<pre class="line before"><span class="ws">    </span>def get_user(username):</pre>\n<pre class="line before"><span class="ws">        </span>if vuln:  # SQLi Injection</pre>\n<pre class="line before"><span class="ws">            </span>user_query = f&#34;SELECT * FROM users WHERE username = &#39;{username}&#39;&#34;</pre>\n<pre class="line current"><span class="ws">            </span>query = db.session.execute(text(user_query))</pre>\n<pre class="line after"><span class="ws">            </span>ret = query.fetchone()</pre>\n<pre class="line after"><span class="ws">            </span>if ret:</pre>\n<pre class="line after"><span class="ws">                </span>fin_query = &#39;{&#34;username&#34;: &#34;%s&#34;, &#34;email&#34;: &#34;%s&#34;}&#39; % (ret[1], ret[3])</pre>\n<pre class="line after"><span class="ws">            </span>else:</pre>\n<pre class="line after"><span class="ws">                </span>fin_query = None</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076303312">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/scoping.py"</cite>,\n      line <em class="line">715</em>,\n      in <code class="function">execute</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>statement,</pre>\n<pre class="line before"><span class="ws">            </span>params=params,</pre>\n<pre class="line before"><span class="ws">            </span>execution_options=execution_options,</pre>\n<pre class="line before"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>\n<pre class="line before"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre>\n<pre class="line current"><span class="ws">            </span>_add_event=_add_event,</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def expire(</pre>\n<pre class="line after"><span class="ws">        </span>self, instance: object, attribute_names: Optional[Iterable[str]] = None</pre>\n<pre class="line after"><span class="ws">    </span>) -&gt; None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076303440">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py"</cite>,\n      line <em class="line">2235</em>,\n      in <code class="function">execute</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>statement,</pre>\n<pre class="line before"><span class="ws">            </span>params,</pre>\n<pre class="line before"><span class="ws">            </span>execution_options=execution_options,</pre>\n<pre class="line before"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>\n<pre class="line before"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre>\n<pre class="line current"><span class="ws">            </span>_add_event=_add_event,</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>@overload</pre>\n<pre class="line after"><span class="ws">    </span>def scalar(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076303824">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py"</cite>,\n      line <em class="line">2134</em>,\n      in <code class="function">_execute_internal</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">                </span>bind_arguments,</pre>\n<pre class="line before"><span class="ws">                </span>conn,</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>else:</pre>\n<pre class="line before"><span class="ws">            </span>result = conn.execute(</pre>\n<pre class="line current"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>\n<pre class="line after"><span class="ws">            </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>if _scalar_result:</pre>\n<pre class="line after"><span class="ws">            </span>return result.scalar()</pre>\n<pre class="line after"><span class="ws">        </span>else:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076303952">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1417</em>,\n      in <code class="function">execute</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class="line before"><span class="ws">        </span>else:</pre>\n<pre class="line before"><span class="ws">            </span>return meth(</pre>\n<pre class="line before"><span class="ws">                </span>self,</pre>\n<pre class="line before"><span class="ws">                </span>distilled_parameters,</pre>\n<pre class="line current"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class="line after"><span class="ws">            </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def _execute_function(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>func: FunctionElement[Any],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076304336">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/elements.py"</cite>,\n      line <em class="line">490</em>,\n      in <code class="function">_execute_on_connection</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>\n<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>\n<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>\n<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>\n<pre class="line before"><span class="ws">            </span>return connection._execute_clauseelement(</pre>\n<pre class="line current"><span class="ws">                </span>self, distilled_params, execution_options</pre>\n<pre class="line after"><span class="ws">            </span>)</pre>\n<pre class="line after"><span class="ws">        </span>else:</pre>\n<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def _execute_on_scalar(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076784464">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1648</em>,\n      in <code class="function">_execute_clauseelement</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>execution_options,</pre>\n<pre class="line before"><span class="ws">            </span>compiled_sql,</pre>\n<pre class="line before"><span class="ws">            </span>distilled_parameters,</pre>\n<pre class="line before"><span class="ws">            </span>elem,</pre>\n<pre class="line before"><span class="ws">            </span>extracted_params,</pre>\n<pre class="line current"><span class="ws">            </span>cache_hit=cache_hit,</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws">        </span>if has_events:</pre>\n<pre class="line after"><span class="ws">            </span>self.dispatch.after_execute(</pre>\n<pre class="line after"><span class="ws">                </span>self,</pre>\n<pre class="line after"><span class="ws">                </span>elem,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076304464">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1843</em>,\n      in <code class="function">_execute_context</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">                </span>dialect,</pre>\n<pre class="line before"><span class="ws">                </span>context,</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>else:</pre>\n<pre class="line before"><span class="ws">            </span>return self._exec_single_context(</pre>\n<pre class="line current"><span class="ws">                </span>dialect, context, statement, parameters</pre>\n<pre class="line after"><span class="ws">            </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>dialect: Dialect,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076304848">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1984</em>,\n      in <code class="function">_exec_single_context</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>\n<pre class="line before"><span class="ws">            </span>self._handle_dbapi_exception(</pre>\n<pre class="line current"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class="line after"><span class="ws">            </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>return result</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def _exec_insertmany_context(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076304976">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">2325</em>,\n      in <code class="function">_handle_dbapi_exception</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>if newraise:</pre>\n<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>\n<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>\n<pre class="line after"><span class="ws">            </span>else:</pre>\n<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>\n<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076305360">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py"</cite>,\n      line <em class="line">1965</em>,\n      in <code class="function">_exec_single_context</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">                        </span>):</pre>\n<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>\n<pre class="line before"><span class="ws">                            </span>break</pre>\n<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>\n<pre class="line before"><span class="ws">                    </span>self.dialect.do_execute(</pre>\n<pre class="line current"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class="line after"><span class="ws">                    </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre>\n<pre class="line after"><span class="ws">                    </span>self,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-139812076305488">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py"</cite>,\n      line <em class="line">747</em>,\n      in <code class="function">do_execute</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near &#34;jp&#34;: syntax error\n[SQL: SELECT * FROM users WHERE username = &#39;&#39;jp&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1965, in _exec_single_context\n    cursor, str_statement, effective_parameters, context\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: near &#34;jp&#34;: syntax error\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &#34;/usr/local/lib/python3.7/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File &#34;/usr/local/lib/python3.7/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n  File &#34;/usr/local/lib/python3.7/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n  File &#34;/usr/local/lib/python3.7/site-packages/connexion/decorators/validation.py&#34;, line 399, in wrapper\n    return function(request)\n  File &#34;/usr/local/lib/python3.7/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n  File &#34;/vampi/api_views/users.py&#34;, line 27, in get_by_username\n    if User.get_user(username):\n  File &#34;/vampi/models/user_model.py&#34;, line 72, in get_user\n    query = db.session.execute(text(user_query))\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/scoping.py&#34;, line 715, in execute\n    _add_event=_add_event,\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py&#34;, line 2235, in execute\n    _add_event=_add_event,\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py&#34;, line 2134, in _execute_internal\n    statement, params or {}, execution_options=execution_options\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1417, in execute\n    execution_options or NO_OPTIONS,\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/elements.py&#34;, line 490, in _execute_on_connection\n    self, distilled_params, execution_options\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1648, in _execute_clauseelement\n    cache_hit=cache_hit,\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context\n    dialect, context, statement, parameters\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1984, in _exec_single_context\n    e, str_statement, effective_parameters, cursor, context\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py&#34;, line 1965, in _exec_single_context\n    cursor, str_statement, effective_parameters, context\n  File &#34;/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near &#34;jp&#34;: syntax error\n[SQL: SELECT * FROM users WHERE username = &#39;&#39;jp&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1965, in _exec_single_context\n    cursor, str_statement, effective_parameters, context\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: near "jp": syntax error\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File "/usr/local/lib/python3.7/site-packages/connexion/decorators/decorator.py", line 68, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.7/site-packages/connexion/decorators/uri_parsing.py", line 149, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.7/site-packages/connexion/decorators/validation.py", line 399, in wrapper\n    return function(request)\n  File "/usr/local/lib/python3.7/site-packages/connexion/decorators/parameter.py", line 120, in wrapper\n    return function(**kwargs)\n  File "/vampi/api_views/users.py", line 27, in get_by_username\n    if User.get_user(username):\n  File "/vampi/models/user_model.py", line 72, in get_user\n    query = db.session.execute(text(user_query))\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/scoping.py", line 715, in execute\n    _add_event=_add_event,\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py", line 2235, in execute\n    _add_event=_add_event,\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py", line 2134, in _execute_internal\n    statement, params or {}, execution_options=execution_options\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1417, in execute\n    execution_options or NO_OPTIONS,\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/elements.py", line 490, in _execute_on_connection\n    self, distilled_params, execution_options\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1648, in _execute_clauseelement\n    cache_hit=cache_hit,\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context\n    dialect, context, statement, parameters\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1984, in _exec_single_context\n    e, str_statement, effective_parameters, cursor, context\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1965, in _exec_single_context\n    cursor, str_statement, effective_parameters, context\n  File "/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near "jp": syntax error\n[SQL: SELECT * FROM users WHERE username = \'\'jp\']\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n\n-->\n'

