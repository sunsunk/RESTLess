{
  "openapi":"3.0.2",
  "info":{
    "title":"Swagger Petstore - OpenAPI 3.0",
    "description":"This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService":"http://swagger.io/terms/",
    "contact":{
      "email":"apiteam@swagger.io"
    },
    "license":{
      "name":"Apache 2.0",
      "url":"http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version":"1.0.6"
  },
  "servers":[
    {
      "url":"http://127.0.0.1:8080/api/v3"
    }
  ],
  "paths":{
    "/pet/findByStatus":{
      "get":{
        "tags":[
          "pet"
        ],
        "summary":"Finds Pets by status",
        "description":"Multiple status values can be provided with comma separated strings",
        "operationId":"findPetsByStatus",
        "parameters":[
          {
            "name":"status",
            "in":"query",
            "description":"Status values that need to be considered for filter",
            "required":false,
            "explode":true,
            "schema":{
              "type":"string",
              "default":"available",
              "enum":[
                "available",
                "pending",
                "sold"
              ]
            }
          }
        ],
        "responses":{
          "200":{
            "description":"successful operation",
            "content":{
              "application/xml":{
                "schema":{
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/Pet"
                  }
                }
              },
              "application/json":{
                "schema":{
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400":{
            "description":"Invalid status value"
          }
        }
      }
    },
    "/pet/findByTags":{
      "get":{
        "tags":[
          "pet"
        ],
        "summary":"Finds Pets by tags",
        "description":"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId":"findPetsByTags",
        "parameters":[
          {
            "name":"tags",
            "in":"query",
            "description":"Tags to filter by",
            "required":false,
            "explode":true,
            "schema":{
              "type":"array",
              "items":{
                "type":"string"
              }
            }
          }
        ],
        "responses":{
          "200":{
            "description":"successful operation",
            "content":{
              "application/xml":{
                "schema":{
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/Pet"
                  }
                }
              },
              "application/json":{
                "schema":{
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400":{
            "description":"Invalid tag value"
          }
        }
      }
    },
    "/pet/{petId}":{
      "get":{
        "tags":[
          "pet"
        ],
        "summary":"Find pet by ID",
        "description":"Returns a single pet",
        "operationId":"getPetById",
        "parameters":[
          {
            "name":"petId",
            "in":"path",
            "description":"ID of pet to return",
            "required":true,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"successful operation",
            "content":{
              "application/xml":{
                "schema":{
                  "$ref":"#/components/schemas/Pet"
                }
              },
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Pet"
                }
              }
            }
          },
          "400":{
            "description":"Invalid ID supplied"
          },
          "404":{
            "description":"Pet not found"
          }
        }
      }
    },
    "/user":{
      "post":{
        "tags":[
          "user"
        ],
        "summary":"Create user",
        "description":"This can only be done by the logged in user.",
        "operationId":"createUser",
        "requestBody":{
          "description":"Created user object",
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/User"
              }
            },
            "application/xml":{
              "schema":{
                "$ref":"#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded":{
              "schema":{
                "$ref":"#/components/schemas/User"
              }
            }
          }
        },
        "responses":{
          "default":{
            "description":"successful operation",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/User"
                }
              },
              "application/xml":{
                "schema":{
                  "$ref":"#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList":{
      "post":{
        "tags":[
          "user"
        ],
        "summary":"Creates list of users with given input array",
        "description":"Creates list of users with given input array",
        "operationId":"createUsersWithListInput",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "type":"array",
                "items":{
                  "$ref":"#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful operation",
            "content":{
              "application/xml":{
                "schema":{
                  "$ref":"#/components/schemas/User"
                }
              },
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/User"
                }
              }
            }
          },
          "default":{
            "description":"successful operation"
          }
        }
      }
    }
  },
  "components":{
    "schemas":{
      "Category":{
        "type":"object",
        "properties":{
          "id":{
            "type":"integer",
            "format":"int64",
            "example":1
          },
          "name":{
            "type":"string",
            "example":"Dogs"
          }
        },
        "xml":{
          "name":"category"
        }
      },
      "User":{
        "type":"object",
        "properties":{
          "id":{
            "type":"integer",
            "format":"int64",
            "example":10
          },
          "username":{
            "type":"string",
            "example":"theUser"
          },
          "firstName":{
            "type":"string",
            "example":"John"
          },
          "lastName":{
            "type":"string",
            "example":"James"
          },
          "email":{
            "type":"string",
            "example":"john@email.com"
          },
          "password":{
            "type":"string",
            "example":"12345"
          },
          "phone":{
            "type":"string",
            "example":"12345"
          },
          "userStatus":{
            "type":"integer",
            "description":"User Status",
            "format":"int32",
            "example":1
          }
        },
        "xml":{
          "name":"user"
        }
      },
      "Tag":{
        "type":"object",
        "properties":{
          "id":{
            "type":"integer",
            "format":"int64"
          },
          "name":{
            "type":"string"
          }
        },
        "xml":{
          "name":"tag"
        }
      },
      "Pet":{
        "required":[
          "name",
          "photoUrls"
        ],
        "type":"object",
        "properties":{
          "id":{
            "type":"integer",
            "format":"int64",
            "example":10
          },
          "name":{
            "type":"string",
            "example":"doggie"
          },
          "category":{
            "$ref":"#/components/schemas/Category"
          },
          "photoUrls":{
            "type":"array",
            "xml":{
              "wrapped":true
            },
            "items":{
              "type":"string",
              "xml":{
                "name":"photoUrl"
              }
            }
          },
          "tags":{
            "type":"array",
            "xml":{
              "wrapped":true
            },
            "items":{
              "$ref":"#/components/schemas/Tag"
            }
          },
          "status":{
            "type":"string",
            "description":"pet status in the store",
            "enum":[
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml":{
          "name":"pet"
        }
      }
    }
  }
}