{
  "openapi": "3.0.1",
  "info": {
    "title": "LanguageTool API",
    "description": "Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.",
    "version": "1.1.2"
  },
  "servers": [
    {
      "url": "http://localhost:8010/v2"
    }
  ],
  "paths": {
    "/check": {
      "post": {
        "summary": "Check a text",
        "description": "The main feature - check a text with LanguageTool for possible style and grammar issues.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "language"
                ],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The text to be checked. This or 'data' is required."
                  },
                  "data": {
                    "type": "string",
                    "description": "The text to be checked, given as a JSON document that specifies what's text and what's markup. This or 'text' is required. Markup will be ignored when looking for errors. Example text: <pre>A &lt;b>test&lt;/b></pre>JSON for the example text: <pre>{\"annotation\":[\n {\"text\": \"A \"},\n {\"markup\": \"&lt;b>\"},\n {\"text\": \"test\"},\n {\"markup\": \"&lt;/b>\"}\n]}</pre> <p>If you have markup that should be interpreted as whitespace, like <tt>&lt;p&gt;</tt> in HTML, you can have it interpreted like this: <pre>{\"markup\": \"&lt;p&gt;\", \"interpretAs\": \"\\n\\n\"}</pre><p>The 'data' feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input."
                  },
                  "language": {
                    "type": "string",
                    "description": "A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`."
                  },
                  "username": {
                    "type": "string",
                    "description": "Set to get Premium API access: Your username/email as used to log in at languagetool.org."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Set to get Premium API access: <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>your API key</a>",
                    "format": "password"
                  },
                  "dicts": {
                    "type": "string",
                    "description": "Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset"
                  },
                  "motherTongue": {
                    "type": "string",
                    "description": "A language code of the user's native language, enabling false friends checks for some language pairs."
                  },
                  "preferredVariants": {
                    "type": "string",
                    "description": "Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`."
                  },
                  "enabledRules": {
                    "type": "string",
                    "description": "IDs of rules to be enabled, comma-separated"
                  },
                  "disabledRules": {
                    "type": "string",
                    "description": "IDs of rules to be disabled, comma-separated"
                  },
                  "enabledCategories": {
                    "type": "string",
                    "description": "IDs of categories to be enabled, comma-separated"
                  },
                  "disabledCategories": {
                    "type": "string",
                    "description": "IDs of categories to be disabled, comma-separated"
                  },
                  "enabledOnly": {
                    "type": "boolean",
                    "description": "If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled.",
                    "default": false
                  },
                  "level": {
                    "type": "string",
                    "description": "If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text.",
                    "enum": [
                      "default",
                      "picky"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the result of checking the text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/languages": {
      "get": {
        "summary": "Get a list of supported languages.",
        "responses": {
          "200": {
            "description": "An array of language objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "code",
                      "longCode",
                      "name"
                    ],
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "a language name like 'French' or 'English (Australia)'"
                      },
                      "code": {
                        "type": "string",
                        "description": "a language code like 'en'"
                      },
                      "longCode": {
                        "type": "string",
                        "description": "a language code like 'en-US' or 'ca-ES-valencia'"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/words": {
      "get": {
        "summary": "List words in dictionaries",
        "description": "List words in the user's personal dictionaries.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of where to start in the list of words. Defaults to 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of words to return. Defaults to 10.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Your username as used to log in at languagetool.org.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "<a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>",
            "required": true,
            "schema": {
              "type": "string",
              "format": "password"
            }
          },
          {
            "name": "dicts",
            "in": "query",
            "description": "Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the user's words from the given user dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/words/add": {
      "post": {
        "summary": "Add word to a dictionary",
        "description": "Add a word to one of the user's personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "apiKey",
                  "username",
                  "word"
                ],
                "properties": {
                  "word": {
                    "type": "string",
                    "description": "The word to be added. Must not be a phrase, i.e. cannot contain white space. The word is added to a global dictionary that applies to all languages."
                  },
                  "username": {
                    "type": "string",
                    "description": "Your username as used to log in at languagetool.org."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "<a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>",
                    "format": "password"
                  },
                  "dict": {
                    "type": "string",
                    "description": "Name of the dictionary to add the word to; non-existent dictionaries are created after calling this; if unset, adds to special default dictionary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the result of adding the word",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/words/delete": {
      "post": {
        "summary": "Remove word from a dictionary",
        "description": "Remove a word from one of the user's personal dictionaries.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "apiKey",
                  "username",
                  "word"
                ],
                "properties": {
                  "word": {
                    "type": "string",
                    "description": "The word to be removed."
                  },
                  "username": {
                    "type": "string",
                    "description": "Your username as used to log in at languagetool.org."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "<a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>",
                    "format": "password"
                  },
                  "dict": {
                    "type": "string",
                    "description": "Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the result of removing the word",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {}
}